{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Supabase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open to Browser": {
      "main": [
        [
          {
            "node": "Open Browser To",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open Browser To": {
      "main": [
        []
      ]
    },
    "Save Screenshot": {
      "main": [
        [
          {
            "node": "Locate On Screen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen": {
      "main": [
        [
          {
            "node": "Coordinate Parser4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser4": {
      "main": [
        [
          {
            "node": "Click",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click": {
      "main": [
        [
          {
            "node": "Locate On Screen1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen1": {
      "main": [
        [
          {
            "node": "Coordinate Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser": {
      "main": [
        [
          {
            "node": "Ingresa Secret",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click4": {
      "main": [
        [
          {
            "node": "Click28",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Locate On Screen1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Close&Open",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Supabase9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Supabase21",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Supabase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click28": {
      "main": [
        [
          {
            "node": "Supabase6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Scroll",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ingresa Secret": {
      "main": [
        [
          {
            "node": "Locate INICIAR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate INICIAR": {
      "main": [
        [
          {
            "node": "Coordinate Parser2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser2": {
      "main": [
        [
          {
            "node": "Click4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser15": {
      "main": [
        [
          {
            "node": "Execute Command2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click8": {
      "main": [
        [
          {
            "node": "Execute Command3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot3": {
      "main": [
        [
          {
            "node": "Click13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click13": {
      "main": [
        [
          {
            "node": "Coordinate Parser15",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Scroll",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command2": {
      "main": [
        [
          {
            "node": "Click9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser16": {
      "main": [
        [
          {
            "node": "Click8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scroll": {
      "main": [
        [
          {
            "node": "Save Screenshot3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser17": {
      "main": [
        [
          {
            "node": "Locate On Screen10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command3": {
      "main": [
        [
          {
            "node": "Coordinate Parser17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen10": {
      "main": [
        [
          {
            "node": "Execute Command4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser19": {
      "main": [
        [
          {
            "node": "Click24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command4": {
      "main": [
        [
          {
            "node": "Coordinate Parser19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click24": {
      "main": [
        [
          {
            "node": "Execute Command5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Command3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser20": {
      "main": [
        [
          {
            "node": "Click25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click25": {
      "main": [
        [
          {
            "node": "Save Screenshot16",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Command5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command5": {
      "main": [
        [
          {
            "node": "Coordinate Parser20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen5": {
      "main": [
        [
          {
            "node": "Coordinate Parser16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click9": {
      "main": [
        [
          {
            "node": "Coordinate Parser16",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Locate On Screen5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot2": {
      "main": [
        [
          {
            "node": "Locate On Screen2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen2": {
      "main": [
        [
          {
            "node": "Coordinate Parser5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser5": {
      "main": [
        [
          {
            "node": "Click1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click1": {
      "main": [
        [
          {
            "node": "Save Screenshot4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen4": {
      "main": [
        [
          {
            "node": "Coordinate Parser6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser6": {
      "main": [
        [
          {
            "node": "Ingresa Secret2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click6": {
      "main": [
        [
          {
            "node": "Save Screenshot30",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ingresa Secret2": {
      "main": [
        [
          {
            "node": "Locate INICIAR2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate INICIAR2": {
      "main": [
        [
          {
            "node": "Coordinate Parser7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser7": {
      "main": [
        [
          {
            "node": "Click6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot4": {
      "main": [
        [
          {
            "node": "Locate On Screen4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot30": {
      "main": [
        [
          {
            "node": "Locate On Screen15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen15": {
      "main": [
        [
          {
            "node": "Coordinate Parser37",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser37": {
      "main": [
        [
          {
            "node": "Click49",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click49": {
      "main": [
        [
          {
            "node": "Save Screenshot31",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot30",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot31": {
      "main": [
        [
          {
            "node": "Locate On Screen18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen18": {
      "main": [
        [
          {
            "node": "Coordinate Parser38",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser38": {
      "main": [
        [
          {
            "node": "Click50",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click50": {
      "main": [
        [
          {
            "node": "Save Screenshot32",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot32": {
      "main": [
        [
          {
            "node": "Locate On Screen23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen23": {
      "main": [
        [
          {
            "node": "Coordinate Parser39",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser39": {
      "main": [
        [
          {
            "node": "Click51",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click51": {
      "main": [
        [
          {
            "node": "Save Screenshot33",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot33": {
      "main": [
        [
          {
            "node": "Locate On Screen24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen24": {
      "main": [
        [
          {
            "node": "Coordinate Parser40",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser40": {
      "main": [
        [
          {
            "node": "Click52",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click52": {
      "main": [
        [
          {
            "node": "Save Screenshot34",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot34": {
      "main": [
        [
          {
            "node": "Locate On Screen25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen25": {
      "main": [
        [
          {
            "node": "Coordinate Parser41",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser41": {
      "main": [
        [
          {
            "node": "Click53",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click53": {
      "main": [
        [
          {
            "node": "Save Screenshot35",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot34",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot35": {
      "main": [
        [
          {
            "node": "Click55",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser42": {
      "main": [
        [
          {
            "node": "Click54",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click54": {
      "main": [
        [
          {
            "node": "Save Screenshot36",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot35",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click55": {
      "main": [
        [
          {
            "node": "Coordinate Parser42",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot36",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot36": {
      "main": [
        [
          {
            "node": "Click57",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser43": {
      "main": [
        [
          {
            "node": "Click56",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click56": {
      "main": [
        [
          {
            "node": "Save Screenshot36",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot36",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click57": {
      "main": [
        [
          {
            "node": "Coordinate Parser43",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot37",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot37": {
      "main": [
        [
          {
            "node": "Locate On Screen26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen26": {
      "main": [
        [
          {
            "node": "Coordinate Parser44",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser44": {
      "main": [
        [
          {
            "node": "Click58",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click58": {
      "main": [
        [
          {
            "node": "Save Screenshot38",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot37",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot38": {
      "main": [
        [
          {
            "node": "Locate On Screen27",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen27": {
      "main": [
        [
          {
            "node": "Coordinate Parser45",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser45": {
      "main": [
        [
          {
            "node": "Click59",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click59": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot38",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot5": {
      "main": [
        [
          {
            "node": "Locate On Screen3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen3": {
      "main": [
        [
          {
            "node": "Coordinate Parser8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser8": {
      "main": [
        [
          {
            "node": "Click2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click2": {
      "main": [
        [
          {
            "node": "Save Screenshot6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot6": {
      "main": [
        [
          {
            "node": "Locate On Screen8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen8": {
      "main": [
        [
          {
            "node": "Coordinate Parser9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser9": {
      "main": [
        [
          {
            "node": "Click3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click3": {
      "main": [
        [
          {
            "node": "Save Screenshot21",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot7": {
      "main": [
        [
          {
            "node": "Locate On Screen9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen9": {
      "main": [
        [
          {
            "node": "Coordinate Parser10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser10": {
      "main": [
        [
          {
            "node": "Click5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click5": {
      "main": [
        [
          {
            "node": "Save Screenshot8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Save Screenshot58",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot8": {
      "main": [
        [
          {
            "node": "Locate On Screen12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen12": {
      "main": [
        [
          {
            "node": "Coordinate Parser11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser11": {
      "main": [
        [
          {
            "node": "Click7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click7": {
      "main": [
        [
          {
            "node": "Save Screenshot9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot9": {
      "main": [
        [
          {
            "node": "Locate On Screen13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen13": {
      "main": [
        [
          {
            "node": "Coordinate Parser12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser12": {
      "main": [
        [
          {
            "node": "Click12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click12": {
      "main": [
        [
          {
            "node": "Save Screenshot10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot10": {
      "main": [
        [
          {
            "node": "Locate On Screen28",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen28": {
      "main": [
        [
          {
            "node": "Coordinate Parser13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser13": {
      "main": [
        [
          {
            "node": "Click14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click14": {
      "main": [
        [
          {
            "node": "Save Screenshot12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot11": {
      "main": [
        [
          {
            "node": "Click68",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser14": {
      "main": [
        [
          {
            "node": "Click15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click15": {
      "main": [
        [
          {
            "node": "Save Screenshot46",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot39": {
      "main": [
        [
          {
            "node": "Click67",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser46": {
      "main": [
        [
          {
            "node": "Click60",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click60": {
      "main": [
        [
          {
            "node": "Save Screenshot45",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot39",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot40": {
      "main": [
        [
          {
            "node": "Locate On Screen31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen31": {
      "main": [
        [
          {
            "node": "Coordinate Parser47",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser47": {
      "main": [
        [
          {
            "node": "Click61",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click61": {
      "main": [
        [
          {
            "node": "Save Screenshot41",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot40",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot41": {
      "main": [
        [
          {
            "node": "Locate On Screen32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen32": {
      "main": [
        [
          {
            "node": "Coordinate Parser48",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser48": {
      "main": [
        [
          {
            "node": "Click62",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click62": {
      "main": [
        [
          {
            "node": "Save Screenshot42",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot41",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot42": {
      "main": [
        [
          {
            "node": "Click64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser49": {
      "main": [
        [
          {
            "node": "Click63",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click63": {
      "main": [
        [
          {
            "node": "Save Screenshot44",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot42",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click64": {
      "main": [
        [
          {
            "node": "Coordinate Parser49",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot43",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot12": {
      "main": [
        [
          {
            "node": "Locate On Screen33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen33": {
      "main": [
        [
          {
            "node": "Coordinate Parser51",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser51": {
      "main": [
        [
          {
            "node": "Click16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click16": {
      "main": [
        [
          {
            "node": "Save Screenshot13",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot13": {
      "main": [
        [
          {
            "node": "Local OCR Tesseract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click17": {
      "main": [
        [
          {
            "node": "Save Screenshot11",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Local OCR Tesseract1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find OCR Word Input": {
      "main": [
        [
          {
            "node": "OCR Word",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Local OCR Tesseract": {
      "main": [
        [
          {
            "node": "Find OCR Word Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OCR Word": {
      "main": [
        [
          {
            "node": "Click17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot44": {
      "main": [
        [
          {
            "node": "Locate On Screen34",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen34": {
      "main": [
        [
          {
            "node": "Coordinate Parser50",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser50": {
      "main": [
        [
          {
            "node": "Click65",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click65": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot44",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot43": {
      "main": [
        [
          {
            "node": "Save Screenshot44",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Local OCR Tesseract1": {
      "main": [
        [
          {
            "node": "Save Screenshot13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click67": {
      "main": [
        [
          {
            "node": "Coordinate Parser46",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot39",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click68": {
      "main": [
        [
          {
            "node": "Coordinate Parser14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot14": {
      "main": [
        [
          {
            "node": "Locate On Screen11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen11": {
      "main": [
        [
          {
            "node": "Coordinate Parser18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser18": {
      "main": [
        [
          {
            "node": "Click18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click18": {
      "main": [
        [
          {
            "node": "Save Screenshot47",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot19": {
      "main": [
        [
          {
            "node": "Locate On Screen19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen19": {
      "main": [
        [
          {
            "node": "Coordinate Parser25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser25": {
      "main": [
        [
          {
            "node": "Click33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click33": {
      "main": [
        [
          {
            "node": "Save Screenshot20",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot20": {
      "main": [
        [
          {
            "node": "Locate On Screen20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen20": {
      "main": [
        [
          {
            "node": "Coordinate Parser26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser26": {
      "main": [
        [
          {
            "node": "Click34",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click34": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot15": {
      "main": [
        [
          {
            "node": "Locate On Screen6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen6": {
      "main": [
        [
          {
            "node": "Coordinate Parser21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser21": {
      "main": [
        [
          {
            "node": "Click10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click10": {
      "main": [
        [
          {
            "node": "Save Screenshot17",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot16": {
      "main": [
        [
          {
            "node": "Locate On Screen7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen7": {
      "main": [
        [
          {
            "node": "Coordinate Parser22",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser22": {
      "main": [
        [
          {
            "node": "Click11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click11": {
      "main": [
        [
          {
            "node": "Save Screenshot15",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot17": {
      "main": [
        [
          {
            "node": "Locate On Screen14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen14": {
      "main": [
        [
          {
            "node": "Coordinate Parser23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser23": {
      "main": [
        [
          {
            "node": "Click19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click19": {
      "main": [
        [
          {
            "node": "Save Screenshot18",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot18": {
      "main": [
        [
          {
            "node": "Locate On Screen16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen16": {
      "main": [
        [
          {
            "node": "Coordinate Parser24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser24": {
      "main": [
        [
          {
            "node": "Click20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click20": {
      "main": [
        [
          {
            "node": "Supabase8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot22": {
      "main": [
        [
          {
            "node": "Locate On Screen21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen21": {
      "main": [
        [
          {
            "node": "Coordinate Parser28",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser28": {
      "main": [
        [
          {
            "node": "Click22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click22": {
      "main": [
        [
          {
            "node": "Save Screenshot23",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot23": {
      "main": [
        [
          {
            "node": "Locate On Screen22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen22": {
      "main": [
        [
          {
            "node": "Coordinate Parser29",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser29": {
      "main": [
        [
          {
            "node": "Click23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click23": {
      "main": [
        [
          {
            "node": "Save Screenshot24",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot24": {
      "main": [
        [
          {
            "node": "Locate On Screen38",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen38": {
      "main": [
        [
          {
            "node": "Coordinate Parser30",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser30": {
      "main": [
        [
          {
            "node": "Click26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click26": {
      "main": [
        [
          {
            "node": "Supabase20",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot25": {
      "main": [
        [
          {
            "node": "Locate On Screen39",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen39": {
      "main": [
        [
          {
            "node": "Coordinate Parser31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser31": {
      "main": [
        [
          {
            "node": "Click27",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click27": {
      "main": [
        [
          {
            "node": "Save Screenshot26",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot26": {
      "main": [
        [
          {
            "node": "Locate On Screen40",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen40": {
      "main": [
        [
          {
            "node": "Coordinate Parser32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser32": {
      "main": [
        [
          {
            "node": "Click29",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click29": {
      "main": [
        [
          {
            "node": "Supabase7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot27": {
      "main": [
        [
          {
            "node": "Locate On Screen41",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen41": {
      "main": [
        [
          {
            "node": "Coordinate Parser33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser33": {
      "main": [
        [
          {
            "node": "Click30",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click30": {
      "main": [
        [
          {
            "node": "Supabase18",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot27",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot28": {
      "main": [
        [
          {
            "node": "Locate On Screen42",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen42": {
      "main": [
        [
          {
            "node": "Coordinate Parser34",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser34": {
      "main": [
        [
          {
            "node": "Click31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click31": {
      "main": [
        [
          {
            "node": "Save Screenshot29",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Click39",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot29": {
      "main": [
        [
          {
            "node": "Locate On Screen43",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen43": {
      "main": [
        [
          {
            "node": "Coordinate Parser35",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser35": {
      "main": [
        [
          {
            "node": "Click32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click32": {
      "main": [
        [
          {
            "node": "Save Screenshot52",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot29",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot52": {
      "main": [
        [
          {
            "node": "Click83",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser59": {
      "main": [
        [
          {
            "node": "Click77",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click77": {
      "main": [
        [
          {
            "node": "Save Screenshot53",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot52",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot53": {
      "main": [
        [
          {
            "node": "Locate On Screen44",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen44": {
      "main": [
        [
          {
            "node": "Coordinate Parser60",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser60": {
      "main": [
        [
          {
            "node": "Supabase22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot54": {
      "main": [
        [
          {
            "node": "Locate On Screen45",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen45": {
      "main": [
        [
          {
            "node": "Coordinate Parser61",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser61": {
      "main": [
        [
          {
            "node": "Click79",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click79": {
      "main": [
        [
          {
            "node": "Save Screenshot55",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "direc4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot55": {
      "main": [
        [
          {
            "node": "Click81",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser62": {
      "main": [
        [
          {
            "node": "Click80",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click80": {
      "main": [
        [
          {
            "node": "Save Screenshot57",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot55",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click81": {
      "main": [
        [
          {
            "node": "Coordinate Parser62",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot56",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot56": {
      "main": [
        [
          {
            "node": "Save Screenshot57",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot57": {
      "main": [
        [
          {
            "node": "Locate On Screen46",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen46": {
      "main": [
        [
          {
            "node": "Coordinate Parser63",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser63": {
      "main": [
        [
          {
            "node": "Click82",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click82": {
      "main": [
        [
          {
            "node": "Save Screenshot59",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot57",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click83": {
      "main": [
        [
          {
            "node": "Coordinate Parser59",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot52",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot59": {
      "main": [
        [
          {
            "node": "Locate On Screen48",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen48": {
      "main": [
        [
          {
            "node": "Coordinate Parser64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser64": {
      "main": [
        [
          {
            "node": "Click36",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click36": {
      "main": [
        [
          {
            "node": "Save Screenshot60",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot59",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot60": {
      "main": [
        [
          {
            "node": "Locate On Screen49",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen49": {
      "main": [
        [
          {
            "node": "Coordinate Parser65",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser65": {
      "main": [
        [
          {
            "node": "Click37",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click37": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot60",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase3": {
      "main": [
        [
          {
            "node": "direc5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase4": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase13": {
      "main": [
        []
      ]
    },
    "Supabase14": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Click35",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click35": {
      "main": [
        [
          {
            "node": "direc4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot53",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click39": {
      "main": [
        [
          {
            "node": "direc3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "direc3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot58": {
      "main": [
        [
          {
            "node": "Save Screenshot14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase15": {
      "main": [
        [
          {
            "node": "Supabase3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase7": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase8": {
      "main": [
        [
          {
            "node": "Supabase7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "direc2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "direc3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase16": {
      "main": [
        [
          {
            "node": "Save Screenshot27",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase17": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "direc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase19": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase20": {
      "main": [
        [
          {
            "node": "Supabase19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "direc1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase18": {
      "main": [
        [
          {
            "node": "Supabase17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "direc": {
      "main": [
        [
          {
            "node": "Save Screenshot22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "direc1": {
      "main": [
        [
          {
            "node": "Save Screenshot25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "direc2": {
      "main": [
        [
          {
            "node": "Supabase16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "direc3": {
      "main": [
        [
          {
            "node": "Save Screenshot28",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "direc4": {
      "main": [
        [
          {
            "node": "Save Screenshot54",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "direc5": {
      "main": [
        [
          {
            "node": "Save Screenshot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Supabase5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase6": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase5": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase2": {
      "main": [
        [
          {
            "node": "Supabase11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen17": {
      "main": [
        [
          {
            "node": "Save Screenshot6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot45": {
      "main": [
        [
          {
            "node": "Click70",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click70": {
      "main": [
        [
          {
            "node": "Save Screenshot39",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot40",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot46": {
      "main": [
        [
          {
            "node": "Click69",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click69": {
      "main": [
        [
          {
            "node": "Save Screenshot39",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot47": {
      "main": [
        [
          {
            "node": "Click71",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click71": {
      "main": [
        [
          {
            "node": "Save Screenshot61",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot21": {
      "main": [
        [
          {
            "node": "Locate On Screen17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot61": {
      "main": [
        [
          {
            "node": "Save Screenshot19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase10": {
      "main": [
        [
          {
            "node": "Supabase15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase21": {
      "main": [
        [
          {
            "node": "Supabase10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase11": {
      "main": [
        [
          {
            "node": "Supabase4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase22": {
      "main": [
        [
          {
            "node": "Supabase14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-05T19:14:50.676Z",
  "id": "JQaUFfHy4jVE74HE",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "N8N-LS-CNRyLD",
  "nodes": [
    {
      "parameters": {},
      "id": "efba742b-f4de-4fee-a863-f5c13ddaea2c",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1540,
        -160
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
              "name": "Web Browser",
              "value": "chrome",
              "type": "string"
            },
            {
              "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
              "name": "URL",
              "value": "https://portalasegurado.papps.lasegunda.com.ar",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d4d38334-ca8d-4347-893f-1545e084a8cf",
      "name": "Open to Browser",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -780,
        -240
      ],
      "notesInFlow": false,
      "disabled": true,
      "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
    },
    {
      "parameters": {
        "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://portalasegurado.papps.lasegunda.com.ar'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
      },
      "id": "c12a94c5-3749-4760-8899-8495e0034119",
      "name": "Open Browser To",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -560,
        -240
      ],
      "notesInFlow": true,
      "notes": "New Window start \"\" {{ $json['Web Browser'] }} --new-window {{ $json.URL }}\n"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(3);from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\Ls\\WorkingScreen.png')\""
      },
      "id": "a0b31034-cb9c-4a9e-859a-ebb73a0508bb",
      "name": "Save Screenshot",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        120,
        -120
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc='{{$('direc5').item.json.direc}}';import time; time.sleep(3);print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Usuario-LS.png', grayscale=True, confidence=0.6))\"\n"
      },
      "id": "a0964775-f24d-4247-b90a-a002148fba8c",
      "name": "Locate On Screen",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        300,
        -120
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "342eb218-f3bb-46aa-97f3-b0cb04880b61",
      "name": "Coordinate Parser4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        -120
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x -130}}, {{ $('Coordinate Parser4').item.json.y +20}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
      },
      "id": "aa42dba2-fd10-45aa-b0cc-1bad74422040",
      "name": "Click",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        -120
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Contrasena-LS.png', grayscale=True, confidence=0.6))\"\n"
      },
      "id": "894fc4dd-0527-4cdc-a012-07574d6b2925",
      "name": "Locate On Screen1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        120,
        100
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "ab554ea8-1aae-49dc-aed3-eab6754eb1be",
      "name": "Coordinate Parser",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        100
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }},{{ $json.y }})\""
      },
      "id": "e1fa7ef1-5473-4631-bfba-88ba546bdee7",
      "name": "Click4",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Login\n**Ingresa Secreto y presiona\nIngresar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        80
      ],
      "typeVersion": 1,
      "id": "7d43955e-d942-45e6-a715-199a7cec1346",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4f07cf59-674a-4360-96c8-a6a4cc0b94f7",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -780,
        -80
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Usuarios-Personal"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1000,
        -80
      ],
      "id": "15102cd8-b6ab-45ad-a0ea-05935e573a50",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
              "leftValue": "={{ $('Supabase').item.json['Usuario AR'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "64cfe917-6ae9-4347-8ac4-af0952f5a7eb",
              "leftValue": "={{ $('Supabase').item.json['Secret AR'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -560,
        -60
      ],
      "id": "18c8fbce-953d-4bbf-bac5-3941d02ec46a",
      "name": "If"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1540,
        20
      ],
      "id": "28109f89-3537-4b14-b58c-eb78922af434",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "content": "## Login\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        -140
      ],
      "typeVersion": 1,
      "id": "e391b6ec-3463-4064-bfb9-d0f67adbabc7",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "content": "## Usuario/Clave Incorrecto\n**En caso de que el usuario\no la contrasena no funcionen\nlo suma a la lista de errores**",
        "height": 220,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        300
      ],
      "typeVersion": 1,
      "id": "cb50c8ff-fb3d-4f24-a01f-da81ecb11778",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Usuario-Contrasena-Incorrecto.png', grayscale=True, confidence=0.6))\"\n"
      },
      "id": "bb6ede80-dff3-41aa-b526-f594e4b394ae",
      "name": "Click28",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        120,
        360
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';pyautogui.doubleClick({{ $json.x -120}},{{ $json.y +15}} ); pyautogui.typewrite(r'{{ $('Supabase').item.json['Secret LS']}}')\""
      },
      "id": "2ea8d43c-ca1f-4d3c-8ef3-3512ec3507ba",
      "name": "Ingresa Secret",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        460,
        100
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Ingresar-LS.png', grayscale=True, confidence=0.6))\""
      },
      "id": "1f21d992-e1fa-468f-92f1-271769915232",
      "name": "Locate INICIAR",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        800,
        100
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "ea52ebb0-a762-41e0-b4fa-5f76027ab7cf",
      "name": "Coordinate Parser2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        100
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc ='{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Bien-Asegurado-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "725bb93d-87a0-47ea-9b1a-1bce133d7f98",
      "name": "Click13",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        600
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "adfe6d1b-3db8-4a6a-a6e0-a3d7a42a5833",
      "name": "Coordinate Parser15",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        100,
        820
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Deslizo hacia abajo\n**Busca el Dropdown\nBien asegurado\ny lo presiona** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        560
      ],
      "typeVersion": 1,
      "id": "3d5de099-e966-4c25-b93b-fae10cbd72f6",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "3cb29bdb-56e5-4824-91bc-2a5464fdd96a",
      "name": "Click8",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        820
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;direc = '{{$('direc5').item.json.direc}}';img = ImageGrab.grab();img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "73dba00c-6dc6-48c2-8b3d-967ce8cd9154",
      "name": "Save Screenshot3",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        460,
        600
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y +30}})\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        820
      ],
      "id": "cd635ac0-7fdd-4ec6-b95e-8cac4870b4a2",
      "name": "Execute Command2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "d844ce80-4822-4c62-a7b4-80b84086096e",
      "name": "Coordinate Parser16",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        820
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2); pyautogui.scroll(-500)\""
      },
      "id": "9530ed5e-f874-4b95-aec9-be1ca82bc970",
      "name": "Scroll",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        600
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "content": "## Seleccion Dropdown\n**Selecciona colectivo 24hs** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        780
      ],
      "typeVersion": 1,
      "id": "c443d806-738a-46fa-b1b9-f257bf04660d",
      "name": "Sticky Note17"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "66c0fd59-34d8-4df7-ad18-8473127ce468",
      "name": "Coordinate Parser17",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        1020
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "ebedb15c-8336-4d39-8b3a-c67af9153a03",
      "name": "Click24",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        1020
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Tipo-Documento-LS.png', grayscale=True, confidence=0.7))\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        1020
      ],
      "id": "fc063491-6b0f-4c7f-aa7c-ab2129993f19",
      "name": "Execute Command3"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "d083c0b8-f14c-4ebc-979a-0a38f31962b6",
      "name": "Locate On Screen10",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        500,
        1020
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "829b91bb-a870-494c-b154-f754b640e280",
      "name": "Coordinate Parser19",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        1020
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Segundo Dropdown\n**Selecciona tipo\ny copia polisa** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        1000
      ],
      "typeVersion": 1,
      "id": "44c1075b-07f7-48f9-9cd9-7158758cb894",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Certificado-LS.png', grayscale=True, confidence=0.8))\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        660,
        1020
      ],
      "id": "926a0267-d5a7-4e6f-a9cd-f37adfdf5945",
      "name": "Execute Command4",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "4800431a-b13b-4f69-a742-f6ff7f2652b1",
      "name": "Coordinate Parser20",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        1240
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "71723918-fb85-4c4f-82e1-6d03b27887ec",
      "name": "Click25",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        1240
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Imprimir-LS.png', grayscale=True, confidence=0.8))\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        1240
      ],
      "id": "2b30fc77-49d3-4679-857f-6d4b9204a609",
      "name": "Execute Command5",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Boton Imprimir\n**Presiona Imprimir** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        1220
      ],
      "typeVersion": 1,
      "id": "4dd7b187-0526-469c-96dd-ba371e80a00b",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Polisadegrupos-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "d601b24f-6c2a-4f42-acf3-af6ead184667",
      "name": "Locate On Screen5",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        680,
        820
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Colectivo24hs-LS.png', grayscale=True, confidence=0.6))\""
      },
      "id": "98c88a7f-f0e6-40fc-9a48-feafc3929ed8",
      "name": "Click9",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        460,
        820
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\"\n"
      },
      "id": "0bdb19fa-f9a5-4c79-8bc7-5a3896f6585d",
      "name": "Save Screenshot2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        1680
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc='{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Usuario-LS-2.png', grayscale=True, confidence=0.6))\""
      },
      "id": "22b9e52e-f82c-458d-9e95-f4ae7b4eb147",
      "name": "Locate On Screen2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        1680
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "4ef3bfd3-2e32-44bc-8222-6a449a7f0de4",
      "name": "Coordinate Parser5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        1680
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.doubleClick({{ $('Coordinate Parser5').item.json.x -130}}, {{ $('Coordinate Parser5').item.json.y +20}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
      },
      "id": "43ba261f-5a28-4d3c-920c-2f43bc18257c",
      "name": "Click1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        1680
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Login\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        1660
      ],
      "typeVersion": 1,
      "id": "59bab0c3-bf27-43df-b16b-2f7cae2bb66b",
      "name": "Sticky Note37"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Contrasena2-LS.png', grayscale=True, confidence=0.6))\""
      },
      "id": "320b270d-d2b8-4c99-afec-af82966258f6",
      "name": "Locate On Screen4",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        1900
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "3e2d649c-bde8-4b58-a628-cfb66e07155e",
      "name": "Coordinate Parser6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        1900
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }},{{ $json.y }})\""
      },
      "id": "20a0ad69-900c-40bc-885d-7c8fc619796c",
      "name": "Click6",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        1900
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Login\n**Ingresa Secreto y presiona\nIngresar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        1880
      ],
      "typeVersion": 1,
      "id": "0121a8d6-68be-4008-b088-445a9afca92b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }},{{ $json.y }} ); pyautogui.typewrite(r'{{ $('Supabase').item.json['Secret LS']}}', interval = 1)\""
      },
      "id": "3e7574c2-f17a-4c95-858e-ccccf612727f",
      "name": "Ingresa Secret2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        620,
        1900
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Ingresar-LS.png', grayscale=True, confidence=0.6))\""
      },
      "id": "958f8908-9ce2-4023-9629-aaae9ea7fa6d",
      "name": "Locate INICIAR2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        800,
        1900
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "72fc164a-9b5d-4f82-bf9c-81bc82725a59",
      "name": "Coordinate Parser7",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        1900
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "3bdca9e8-a1b9-4358-86ca-8b8ea474be58",
      "name": "Save Screenshot4",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        1900
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
      },
      "id": "6fccd26e-dff3-4756-8fe3-e3887348383a",
      "name": "Save Screenshot30",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        2120
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\LibreDeuda-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "486141e5-34f9-4c5b-b7e6-fd5aa1f854fd",
      "name": "Locate On Screen15",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        440,
        2120
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "ad4548cb-6309-4b57-b8bf-b60dd684cd35",
      "name": "Coordinate Parser37",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        2120
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "f8af7f46-9548-4fbd-bef4-a710ed5e7344",
      "name": "Click49",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        2120
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Libre Deuda\n**Busca y presiona el \nbotón de LD**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        2100
      ],
      "typeVersion": 1,
      "id": "03d66fef-c347-4f57-ac59-34a56c603af6",
      "name": "Sticky Note38"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
      },
      "id": "c3c28873-f238-47bf-8568-39976bfaa8a8",
      "name": "Save Screenshot31",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        2340
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Imprimir-LibreDeuda-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "9cd878c0-4e3b-40d4-beb5-32b3f50bafb8",
      "name": "Locate On Screen18",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        2340
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "a5bbd633-3073-41cd-8725-38a354c5a254",
      "name": "Coordinate Parser38",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        2340
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "87c8ea3d-7dd9-43cf-9646-8fd03a4f9f62",
      "name": "Click50",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        2340
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Libre Deuda\n**Busca y presiona el \nbotón de LD**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        2320
      ],
      "typeVersion": 1,
      "id": "c15d57b6-a712-44ef-8efe-d8d12a4533ff",
      "name": "Sticky Note39"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
      },
      "id": "6114e38b-1a1b-473b-beb2-c3e07254fc4b",
      "name": "Save Screenshot32",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        2580
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Descargar2-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "2396dcf6-d8a9-40c9-9ed3-c9e377ac9459",
      "name": "Locate On Screen23",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        2580
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "45d8c7fe-d9a8-4757-9af9-f71fd426df41",
      "name": "Coordinate Parser39",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        2580
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "f0373353-c5dd-4765-99d1-754c269aa2b3",
      "name": "Click51",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        2580
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Descarga\n**Busca y presiona el \nbotón de descarga**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        2540
      ],
      "typeVersion": 1,
      "id": "63312357-0143-4962-bb17-bae3206598a1",
      "name": "Sticky Note40"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
      },
      "id": "915182f8-aaa5-4416-9969-030985d29a8e",
      "name": "Save Screenshot33",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        2780
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Barra-Guardar-Nombre-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "977fb7ac-a7d0-49b0-88b8-efb2b1a5a99c",
      "name": "Locate On Screen24",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        2780
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "857d588f-8be5-4253-b788-e9f759628f3d",
      "name": "Coordinate Parser40",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        2780
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();mesdirec = current_date.strftime('%m - %B %Y'); year=mesdirec = current_date.strftime('%Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); nombre = '{{ $('Loop Over Items').item.json.Nombre }}'; pyautogui.doubleClick({{ $('Coordinate Parser40').item.json.x +50}}, {{ $('Coordinate Parser40').item.json.y }}); pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\LA SEGUNDA\\Pago poliza acc personales\\Pago poliza acc. personales-{nombre}-{mesdirec}.pdf')\""
      },
      "id": "ddf328d7-1ae2-49fc-932d-770149b99435",
      "name": "Click52",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        2780
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        2760
      ],
      "typeVersion": 1,
      "id": "a198a61a-8163-4238-b017-f794c0037704",
      "name": "Sticky Note41"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "47e13db9-c274-4a18-80b6-4da7c640b351",
      "name": "Save Screenshot34",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        3000
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "f0788fed-286f-4712-a340-f5ea53a3f204",
      "name": "Locate On Screen25",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        3000
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "1baad369-4e9e-406b-9081-f5bce7ade965",
      "name": "Coordinate Parser41",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        3000
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser41').item.json.x }}, {{ $('Coordinate Parser41').item.json.y }})\""
      },
      "id": "7be7209d-c895-42cb-b8f9-929f6203a165",
      "name": "Click53",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        3000
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        2980
      ],
      "typeVersion": 1,
      "id": "8cff37da-cb34-413f-8a21-169f2afda929",
      "name": "Sticky Note42"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
      },
      "id": "b2871f42-074f-4575-9788-7654ffba5726",
      "name": "Save Screenshot35",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        3220
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "7a6053ca-8c6d-4b10-9648-76a61212db8d",
      "name": "Coordinate Parser42",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        3220
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser42').item.json.x }}, {{ $('Coordinate Parser42').item.json.y }})\""
      },
      "id": "efc6127b-9afd-4eee-978d-0ea326fcd918",
      "name": "Click54",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        3220
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        3200
      ],
      "typeVersion": 1,
      "id": "dd2586c8-cb9e-4f7c-a649-244697ddfec4",
      "name": "Sticky Note43"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "a5c08ad4-8d70-4ee3-aefe-56a08c95d094",
      "name": "Click55",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        3220
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab();direc='{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "397cd733-2be0-4afc-b1e0-4224f4596b2f",
      "name": "Save Screenshot36",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        3440
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "e86baebc-73fe-4a29-8a8b-3185c7f2b6bb",
      "name": "Coordinate Parser43",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        3440
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser43').item.json.x }}, {{ $('Coordinate Parser43').item.json.y }})\""
      },
      "id": "c79e618c-3b4e-4a88-a28e-abfd126f0ec7",
      "name": "Click56",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        3440
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## En caso de Loop\n**Cancela hasta que siga** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        3420
      ],
      "typeVersion": 1,
      "id": "72da157f-b56d-4252-88e5-20a9a159b920",
      "name": "Sticky Note44"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\""
      },
      "id": "8849161f-acc7-4ff7-a8b7-497ad6c87f1d",
      "name": "Click57",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        3440
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Cierrre\n**Cancela hasta que siga** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        3640
      ],
      "typeVersion": 1,
      "id": "54ffd579-74b7-44e3-9b58-6ed6bcb99239",
      "name": "Sticky Note45"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "3a2297d2-dc86-4e4f-987a-bf1224597960",
      "name": "Save Screenshot37",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        3660
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\ImpresionCotizacion-CNR-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "54665da8-254c-4853-bd34-822ac3fca14c",
      "name": "Locate On Screen26",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        3660
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "7b48ca9b-f671-46f2-9cb1-70f724738e9b",
      "name": "Coordinate Parser44",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        3660
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser44').item.json.x +380}}, {{ $('Coordinate Parser44').item.json.y }})\""
      },
      "id": "dab16f50-81d2-44a7-a4b7-5b5e768d1426",
      "name": "Click58",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        3660
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Cierrre\n**Cancela hasta que siga** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        3860
      ],
      "typeVersion": 1,
      "id": "1ca32952-0ce8-40f0-b90d-53ea1ba5006c",
      "name": "Sticky Note46"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "bcc36443-b004-4404-91a6-bbbe681e3b92",
      "name": "Save Screenshot38",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        3880
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\PCerrar-CNR-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "166c9411-d36b-40f1-9605-e6f20b3bdd04",
      "name": "Locate On Screen27",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        3880
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "6b8f8fa7-817f-4b87-8fda-903bb8000f81",
      "name": "Coordinate Parser45",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        3880
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser45').item.json.x +180}}, {{ $('Coordinate Parser45').item.json.y -30}})\""
      },
      "id": "57c776ac-9757-41bc-9255-7aa9b51d1640",
      "name": "Click59",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        3880
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "2e401afd-2a1e-4501-a187-d0893553d636",
      "name": "Save Screenshot5",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        4340
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-CNR-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "17bf2693-a638-493f-885c-3f224580c76c",
      "name": "Locate On Screen3",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        4340
      ],
      "retryOnFail": true,
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "00431c8f-8f3e-460e-bb4a-7c0da1d1c29a",
      "name": "Coordinate Parser8",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        4340
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.doubleClick({{ $('Coordinate Parser8').item.json.x}}, {{ $('Coordinate Parser8').item.json.y}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
      },
      "id": "7506a6f6-ff13-4ba6-b2fd-4c9ecff91a98",
      "name": "Click2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        4340
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## CNR\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        4320
      ],
      "typeVersion": 1,
      "id": "706f05a8-bbf9-4f70-8c8b-1f2c98b39f26",
      "name": "Sticky Note47"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "59808d0e-45d9-43e5-8650-29564d15ddb6",
      "name": "Save Screenshot6",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        4560
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-AgregarSubrogante.png', grayscale=True, confidence=0.8))\""
      },
      "id": "6ceb6e97-145f-42f9-a328-3ffd8617ee10",
      "name": "Locate On Screen8",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        4560
      ],
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "01d2a622-a1d0-4c26-b5b7-72c00ec1debd",
      "name": "Coordinate Parser9",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        4560
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.doubleClick({{ $('Coordinate Parser9').item.json.x}}, {{ $('Coordinate Parser9').item.json.y}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
      },
      "id": "f54b351f-5271-42f9-9406-4a7054056721",
      "name": "Click3",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        640,
        4560
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Agregar Subrogante\n**Rellenar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        4540
      ],
      "typeVersion": 1,
      "id": "3caa8a3c-23cb-41ee-b9f3-0179fa9f8fe2",
      "name": "Sticky Note48"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc='{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "a8cbc3e9-7346-43e1-954e-108da243dbc3",
      "name": "Save Screenshot7",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        4780
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Denominacion-CNR-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "71248223-5dad-4ae4-8d85-02f927cab84b",
      "name": "Locate On Screen9",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        4780
      ],
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "666fa879-e5cd-499c-80a3-cbe4815c34f3",
      "name": "Coordinate Parser10",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        4780
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;pyautogui.doubleClick({{ $('Coordinate Parser10').item.json.x}}, {{ $('Coordinate Parser10').item.json.y}});  pyautogui.typewrite('{{ $('Supabase1').item.json['Nombre']}}')\""
      },
      "id": "2a8a1774-7ecc-4391-87ee-599ff3c8e87e",
      "name": "Click5",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        4780
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Denominacion\n**Rellenar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        4760
      ],
      "typeVersion": 1,
      "id": "7beccc96-5d27-4390-866a-55dc61ed0f26",
      "name": "Sticky Note49"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "CUITS Plantas"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        100,
        4120
      ],
      "id": "41869aac-afb8-446f-b437-024f430657d6",
      "name": "Supabase1",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        280,
        4120
      ],
      "id": "232a409b-d34d-4c75-872e-910c40ef58a2",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "bed940fe-1950-4fbc-ae24-638e6a3e8643",
      "name": "Save Screenshot8",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        5000
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\CUIT-CNR-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "e2d9d390-7a73-4c5d-9255-cc9f87293601",
      "name": "Locate On Screen12",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        5000
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "2d6cc825-7e74-4b61-b6e4-f1368cc1331d",
      "name": "Coordinate Parser11",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        5000
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser11').item.json.x}}, {{ $('Coordinate Parser11').item.json.y}})\""
      },
      "id": "5c07587c-166c-41a0-8b6b-a931b8bf1b10",
      "name": "Click7",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        5000
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## CUIT\n**Rellenar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        4980
      ],
      "typeVersion": 1,
      "id": "80172bd8-409f-4367-89fa-e4f9f176ade3",
      "name": "Sticky Note50"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(0); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "918ec724-5a36-437d-9553-1d60469c095d",
      "name": "Save Screenshot9",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        5220
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\NroDocumento-CNR-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "18c3f32e-cfe4-4d34-a9b8-0c5bb7009cc1",
      "name": "Locate On Screen13",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        5220
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "653d7f85-ea87-4d4a-afca-7f1484a451cb",
      "name": "Coordinate Parser12",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        5220
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser12').item.json.x}}, {{ $('Coordinate Parser12').item.json.y}}); pyautogui.typewrite('{{ $('Supabase1').item.json['CUIT']}}')\""
      },
      "id": "f31fdf73-fb22-4ca4-a111-a98d0b7631e6",
      "name": "Click12",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        5220
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Nro Documento\n**Rellenar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        5200
      ],
      "typeVersion": 1,
      "id": "1de0eacc-650d-48bb-b37f-895a312b5646",
      "name": "Sticky Note51"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(0); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "c9e57b65-da52-4393-bbcd-12dec5b5ee95",
      "name": "Save Screenshot10",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        5440
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\\\.n8n\\\\Screenshots\\\\LS\\\\Aceptar-CNR-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "c702808a-817e-4573-9687-2d29e6da8a17",
      "name": "Locate On Screen28",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        5440
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "f5a4e2ed-a434-4377-89a8-2cb2a3d0dafa",
      "name": "Coordinate Parser13",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        5440
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser13').item.json.x}}, {{ $('Coordinate Parser13').item.json.y}})\""
      },
      "id": "6619b02b-c88c-4919-b732-faef61040476",
      "name": "Click14",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        5440
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Aceptar\n**Rellenar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        5420
      ],
      "typeVersion": 1,
      "id": "a83e2fc8-6222-4928-a004-0a4b264ac460",
      "name": "Sticky Note52"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "eea98495-cb92-46dc-9ec7-f637c22a4bc3",
      "name": "Save Screenshot11",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        6100
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "5e000dc7-d4b6-4b9e-9a36-608112758933",
      "name": "Coordinate Parser14",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        6100
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.doubleClick({{ $('Coordinate Parser14').item.json.x}}, {{ $('Coordinate Parser14').item.json.y}})\""
      },
      "id": "60e3c49e-2465-4aa0-98c2-0790b24b6d22",
      "name": "Click15",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        720,
        6100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Imprimir Clausula\n**Rellenar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        6080
      ],
      "typeVersion": 1,
      "id": "23f104d0-0abf-4ccc-b85e-6b4c987b712b",
      "name": "Sticky Note53"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(6);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "ac0dbf2e-4ef9-404b-ad1a-15edf86c6b76",
      "name": "Save Screenshot39",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        6320
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "c7d42ba5-9fa9-4721-bf35-ef13ded73251",
      "name": "Coordinate Parser46",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        6340
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "75ed882c-4525-44ca-82eb-7dffa374139f",
      "name": "Click60",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        740,
        6340
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Descarga\n**Busca y presiona el \nbotón de descarga**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        6300
      ],
      "typeVersion": 1,
      "id": "4f00bd13-cdf4-4739-bd39-81040328fde9",
      "name": "Sticky Note54"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "a6d33666-6e5e-4500-bd9a-acc888001113",
      "name": "Save Screenshot40",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        6540
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc='{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Barra-Guardar-Nombre-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "d24a3a45-c90d-49be-b875-501aaacddc22",
      "name": "Locate On Screen31",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        6540
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "b9b00687-3014-4167-bf0e-b8d448501664",
      "name": "Coordinate Parser47",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        6540
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();  nombre = '{{ $('Loop Over Items').item.json.Nombre }}'; planta = '{{ $('Supabase1').item.json['Nombre']}}';year=mesdirec = current_date.strftime('%Y');mesdirec = current_date.strftime('%m - %B %Y'); mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); mes = current_date.strftime('%B'); pyautogui.doubleClick({{ $('Coordinate Parser47').item.json.x +50}}, {{ $('Coordinate Parser47').item.json.y }}); pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{planta}-{nombre}-{mesdirec}.pdf')\"\n"
      },
      "id": "1ab5ec42-702d-4a9b-be9b-1ffb30034442",
      "name": "Click61",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        6540
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        6520
      ],
      "typeVersion": 1,
      "id": "b401c115-bef4-49db-acec-2801a258231f",
      "name": "Sticky Note55"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "49d959cf-9bf7-4260-b806-7518f629d868",
      "name": "Save Screenshot41",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        6760
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "29307dc1-61e4-4401-85c0-ff61097f47f2",
      "name": "Locate On Screen32",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        6760
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "cc26f467-2590-487e-bb74-3611a482844a",
      "name": "Coordinate Parser48",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        6760
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser48').item.json.x }}, {{ $('Coordinate Parser48').item.json.y }})\""
      },
      "id": "a98d51db-64cf-4e34-824c-3f2b5a46aaf5",
      "name": "Click62",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        6760
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        6740
      ],
      "typeVersion": 1,
      "id": "fa9ce463-2c7a-4cdb-b07a-5bda4f1c80b5",
      "name": "Sticky Note56"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "f1920767-19e1-4e1e-b33c-376de3756a9f",
      "name": "Save Screenshot42",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        6980
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "d200d307-ca08-4750-b1e0-9c30ed4a9aaf",
      "name": "Coordinate Parser49",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        6980
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser49').item.json.x }}, {{ $('Coordinate Parser49').item.json.y }})\""
      },
      "id": "3a45a348-f91a-417f-bb8d-dab5bfef1529",
      "name": "Click63",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        6980
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        6960
      ],
      "typeVersion": 1,
      "id": "3ea1505d-b512-4a19-a865-f5e6225c2430",
      "name": "Sticky Note57"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc='{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "2fec9d2c-776a-4853-92e1-bf0d7d918e11",
      "name": "Click64",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        6980
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('direc5').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "f4669c80-08ce-4f9e-b43d-684b8d0881c4",
      "name": "Save Screenshot12",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        5660
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\AFavor-CNR-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "f9c9c3fe-234b-46c1-b7ee-d52592596bc0",
      "name": "Locate On Screen33",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        5660
      ],
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "7fda36f5-3455-4469-89f3-47b063f2217f",
      "name": "Coordinate Parser51",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        5660
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser51').item.json.x +100}}, {{ $('Coordinate Parser51').item.json.y}}); pyautogui.moveRel(0,50,0);pyautogui.scroll(-1000)\""
      },
      "id": "7fc3160e-6423-455c-aeec-3b61d836762e",
      "name": "Click16",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        5660
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## A favor de\n**Rellenar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        5640
      ],
      "typeVersion": 1,
      "id": "118004ce-ea9e-4eef-854c-681885f3ce49",
      "name": "Sticky Note59"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
      },
      "id": "22338f7c-113a-4753-be0b-eb7424a097c1",
      "name": "Save Screenshot13",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        5880
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundPhrase.center.x }}, {{ $json.foundPhrase.center.y }})\""
      },
      "id": "8a89505a-eab6-47cc-b354-036d87e4d013",
      "name": "Click17",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        820,
        5880
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Generado\n**Rellenar**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        5860
      ],
      "typeVersion": 1,
      "id": "8c37a683-bb44-44fd-8918-e08389838b88",
      "name": "Sticky Note60"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
              "name": "Find Phrase",
              "value": "={{ $('Supabase1').item.json['Nombre']}}",
              "type": "string"
            },
            {
              "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
              "name": "stdout",
              "value": "={{ $json.stdout }}",
              "type": "string"
            },
            {
              "id": "89e28ceb-e80c-4be5-a523-34099bba4510",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ba2d79d3-5fbd-4cc3-bcff-fe49d3fe0283",
      "name": "Find OCR Word Input",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        500,
        5880
      ],
      "notesInFlow": false,
      "notes": "Optional parser that helps manage the output of local ocr"
    },
    {
      "parameters": {
        "jsCode": "function normalizeText(text) {\n  return String(text).toLowerCase().trim().replace(/[.,]/g, '');\n}\n\nfunction isSimilar(searchWord, textWord) {\n  const s = normalizeText(searchWord);\n  const t = normalizeText(textWord);\n  return t.includes(s) || s.includes(t);\n}\n\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) =>\n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\nfunction calculateTotalDistance(words) {\n  let total = 0;\n  for (let i = 1; i < words.length; i++) {\n    total += distance(words[i - 1].x, words[i - 1].y, words[i].x, words[i].y);\n  }\n  return total;\n}\n\nfunction getCenterCoordinates(items) {\n  const avgX = Math.round(items.reduce((sum, item) => sum + item.x + item.width / 2, 0) / items.length);\n  const avgY = Math.round(items.reduce((sum, item) => sum + item.y + item.height / 2, 0) / items.length);\n  return { x: avgX, y: avgY };\n}\n\nfunction findCloseWords(data, searchWords, maxDistance = 100, minMatches = null) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isSimilar(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  const minRequiredMatches = minMatches || Math.ceil(searchWords.length * 0.6);\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    const validItems = combo.filter(Boolean);\n    if (validItems.length >= minRequiredMatches) {\n      const totalDistance = calculateTotalDistance(validItems);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (validItems.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = validItems;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// MAIN\nconst input = $input.all()[0].json;\nconst searchPhrase = input['Find Phrase'];\nconst maxDistance = 150;\n\nlet parsedData, result;\n\ntry {\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = normalizeText(searchPhrase).split(/\\s+/);\n\n  parsedData.forEach(item => {\n    item.text = normalizeText(item.text);\n  });\n\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n\n  if (foundItems && foundItems.length > 0) {\n    const center = getCenterCoordinates(foundItems);\n    result = {\n      phrase: searchPhrase,\n      foundWords: foundItems,\n      center: center\n    };\n  } else {\n    result = {\n      phrase: searchPhrase,\n      foundWords: [],\n      center: null,\n      error: `No similar phrase found for \"${searchPhrase}\" in OCR results.`\n    };\n  }\n} catch (error) {\n  result = {\n    error: 'Error parsing or processing OCR data',\n    details: error.message\n  };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
      },
      "id": "b35a9453-3e81-4fbc-b86d-8a6e3db77e3e",
      "name": "OCR Word",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        5880
      ],
      "notesInFlow": false,
      "onError": "continueRegularOutput",
      "notes": "Required with Parser"
    },
    {
      "parameters": {
        "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; direc = '{{$('direc5').item.json.direc}}';pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(5).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 6'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
      },
      "id": "4d93ec08-4247-4f64-9e79-b6177486f486",
      "name": "Local OCR Tesseract",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        300,
        5880
      ],
      "notesInFlow": false,
      "onError": "continueRegularOutput",
      "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(5); pyautogui.hotkey('ctrl', 'w')\""
      },
      "id": "2e00bff0-6760-4975-85d5-9ca1c42bf7fd",
      "name": "Save Screenshot43",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        580,
        6980
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Cierrre\n**Cancela hasta que siga** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        7180
      ],
      "typeVersion": 1,
      "id": "9ba31e37-83df-4e2d-80e6-bba11150dbe2",
      "name": "Sticky Note58"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "53e908cd-bd1a-4169-8ab4-9e41ca8e845b",
      "name": "Save Screenshot44",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        7200
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\LS\\Cerrar-CNR-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "3f7f8e17-818a-4b59-9d35-61cc0722a04e",
      "name": "Locate On Screen34",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        7200
      ],
      "retryOnFail": true,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "2b6f7eb6-2059-47d1-a4b5-da1288e95694",
      "name": "Coordinate Parser50",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        7200
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.hotkey(['esc'])\""
      },
      "id": "33659c99-88c7-45ca-8991-ecc338b636ba",
      "name": "Click65",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        7200
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.moveRel(0,50,0);pyautogui.scroll(-500)\""
      },
      "id": "7b84625a-4f71-45db-8267-a8d39dd1b814",
      "name": "Local OCR Tesseract1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1000,
        5900
      ],
      "notesInFlow": false,
      "onError": "continueRegularOutput",
      "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.7))\""
      },
      "id": "7b1ef8be-14b5-4523-b86d-adb6709698a8",
      "name": "Click67",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        6320
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\ImprimirClausula-CNR-LS.png', grayscale=True, confidence=0.7))\"\n"
      },
      "id": "834d8cc8-82a1-403b-be5e-a99c95d388b5",
      "name": "Click68",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        260,
        6100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Cerrar pestañas\n**Cierra la pestaña \nFormularios** ",
        "height": 180,
        "width": 1460,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        7400
      ],
      "typeVersion": 1,
      "id": "8cedf2f2-d49d-487a-a9f9-2acefb058410",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "9cf91763-b9e9-4f8d-a8a5-97f211593a3a",
      "name": "Save Screenshot14",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        200,
        7420
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\LS\\Window-CertCobertura-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "8389973d-e009-4061-aaac-5c0e51be01ab",
      "name": "Locate On Screen11",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        340,
        7420
      ],
      "retryOnFail": true,
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "06892028-344b-442e-a1cf-84278f72f854",
      "name": "Coordinate Parser18",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        7420
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui, math; reference_point = ({{ $json.x +50}}, {{ $json.y}}); matches = list(pyautogui.locateAllOnScreen(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\Boton-Close.png')); closest_match = min(matches, key=lambda match: math.sqrt((pyautogui.center(match)[0] - reference_point[0])**2 + (pyautogui.center(match)[1] - reference_point[1])**2)); pyautogui.click(pyautogui.center(closest_match))\""
      },
      "id": "7470bd81-f10e-4f91-8fb5-b939f37bbd65",
      "name": "Click18",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        620,
        7420
      ],
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "73a6c718-c777-47eb-8b44-a61db931f1d2",
      "name": "Save Screenshot19",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        40,
        7640
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\LS\\\\Boton-Perfil-LS.png', grayscale=True, confidence=0.3))\""
      },
      "id": "6057eca3-787c-459d-b8ff-9bde00f931c8",
      "name": "Locate On Screen19",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        220,
        7640
      ],
      "retryOnFail": true,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "90806dea-af3d-4bc9-927d-0bbc894aefee",
      "name": "Coordinate Parser25",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        7640
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui, math;from datetime import date; import datetime; import time; time.sleep(2); pyautogui.click(1735, 120)\""
      },
      "id": "212ac822-3704-48e7-a746-7dfaf66f07ab",
      "name": "Click33",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        7640
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Cerrar Sesion\n**Presiona el logo de \nPerrfil en ARCA**",
        "height": 180,
        "width": 1460,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        7620
      ],
      "typeVersion": 1,
      "id": "10d524fb-21de-4928-a136-407050df3d5d",
      "name": "Sticky Note24"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "cdd3db99-cff5-4763-9892-b71a2da3ff99",
      "name": "Save Screenshot20",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        40,
        7860
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\\\Screenshots\\\\LS\\\\Boton-Cerrarsesion-LS.png', grayscale=True, confidence=0.7))\""
      },
      "id": "9b19e375-6a9d-428e-8c20-d40d491bce5c",
      "name": "Locate On Screen20",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        220,
        7860
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "88d93604-cf21-4895-9797-f6e7eb9cba11",
      "name": "Coordinate Parser26",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        7860
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
      },
      "id": "c014c3ee-549d-4acc-9e58-864b1ccf8194",
      "name": "Click34",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        7860
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Cerrar Sesion\n**Selecciona la opción \nCerrar Sesión**",
        "height": 180,
        "width": 1460,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        7840
      ],
      "typeVersion": 1,
      "id": "72ef072e-5aec-4c24-a814-f46e132e6e96",
      "name": "Sticky Note25"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "58fdd608-a644-4ac3-b5ac-6b815730ffb0",
      "name": "Save Screenshot15",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        -100
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Siguiente-LS.png', grayscale=True, confidence=0.7))\"\n"
      },
      "id": "cb5bcc66-4824-440f-b722-8249f5d4ba38",
      "name": "Locate On Screen6",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        -100
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "4a87ce59-8c52-40a0-8d55-4f3a03ba2512",
      "name": "Coordinate Parser21",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        -100
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.click({{ $('Coordinate Parser21').item.json.x }}, {{ $('Coordinate Parser21').item.json.y }})\""
      },
      "id": "3137e93f-2b47-4f0c-986f-65fa13d4a811",
      "name": "Click10",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        -100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        -140
      ],
      "typeVersion": 1,
      "id": "79551a90-5b05-4a67-96d5-a157cd7d4013",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; import time; time.sleep(5); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "61f85870-2323-432e-b14b-1d81938d87cf",
      "name": "Save Screenshot16",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        100,
        1460
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\CheckBox-ConNomina-LS.png', grayscale=True, confidence=0.6))\"\n"
      },
      "id": "2e5d9a59-76a8-4baf-953c-4b9c7411eccb",
      "name": "Locate On Screen7",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        280,
        1460
      ],
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "8784dbfa-0aa7-4ffa-99e6-c80b64eb5b33",
      "name": "Coordinate Parser22",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        1460
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.click({{ $('Coordinate Parser22').item.json.x -60}}, {{ $('Coordinate Parser22').item.json.y }}); time.sleep(1);pyautogui.click({{ $('Coordinate Parser22').item.json.x -60}}, {{ $('Coordinate Parser22').item.json.y +40}})\""
      },
      "id": "c298b286-390c-434e-9b11-1a99faac19f4",
      "name": "Click11",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        1460
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Chequea la version \n## de la interfaz\n**Si es la nueva \ncheckea el box**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        1440
      ],
      "typeVersion": 1,
      "id": "9e163996-4350-4935-b03a-b06b1061e425",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "7e44dc4a-b5de-433e-a4d0-908cef168b03",
      "name": "Save Screenshot17",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        120
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\CheckBox-Descripcion-LS.png', grayscale=True, confidence=0.6))\"\n"
      },
      "id": "a74c642f-cfd4-4644-88b6-6d3a4e689b8c",
      "name": "Locate On Screen14",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        120
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "ec3e723f-7d3e-47cc-91f5-42e893da8c2d",
      "name": "Coordinate Parser23",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        120
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser23').item.json.x -80}}, {{ $('Coordinate Parser23').item.json.y }})\""
      },
      "id": "81462750-8bf9-435d-8071-f9fccd920b38",
      "name": "Click19",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        120
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## CheckBox\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        80
      ],
      "typeVersion": 1,
      "id": "394e8b4a-08eb-403f-b2e1-4d8207d0e24c",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "9ecdb13e-47a1-42c0-a7b2-e21023573b15",
      "name": "Save Screenshot18",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        340
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Siguiente-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "455066cb-c08e-487c-a0cf-c021250bc3ce",
      "name": "Locate On Screen16",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        340
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "fc7d8cfd-6a17-4fc4-8937-caadab295edb",
      "name": "Coordinate Parser24",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        340
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser24').item.json.x }}, {{ $('Coordinate Parser24').item.json.y }})\""
      },
      "id": "21759033-8f2f-4238-8a0e-a3ff7a565ae2",
      "name": "Click20",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        340
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        300
      ],
      "typeVersion": 1,
      "id": "0b24ef85-1bc8-4d9b-85e1-4991471b77f7",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(5);direc = '{{$json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n/Screenshots/ARCA/Pantalla-Inicio.png')\""
      },
      "id": "33d99cff-a4b5-4809-9485-fca35cf433f0",
      "name": "Save Screenshot22",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2360,
        1040
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Denominacion-CNR2-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "ed611f76-1f87-4b1c-a3ac-18cbe66d6761",
      "name": "Locate On Screen21",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2480,
        1040
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "f185bb4d-0ae7-4920-8958-0aa11747ed20",
      "name": "Coordinate Parser28",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2600,
        1040
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser28').item.json.x -130}}, {{ $('Coordinate Parser28').item.json.y +20}}); pyautogui.typewrite('{{ $('Code5').item.json.nombre }}')\""
      },
      "id": "ce04e6e9-e983-4ae8-9812-4ee9d3ee8296",
      "name": "Click22",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2720,
        1040
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        1000
      ],
      "typeVersion": 1,
      "id": "4b27d341-153f-491d-875d-596127ee844c",
      "name": "Sticky Note27"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('direc').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\LS\\WorkingScreen.png')\""
      },
      "id": "4ab1e3b3-25f5-4706-a1a1-4ea21a8e08b3",
      "name": "Save Screenshot23",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        1260
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\CUIT-CNR2-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "d0295955-e1b7-4a29-9ab1-baf6f22ce4b5",
      "name": "Locate On Screen22",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        1260
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "2cb75e7a-37ac-4a37-88cf-aa35496bf4e9",
      "name": "Coordinate Parser29",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        1260
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser29').item.json.x -10}}, {{ $('Coordinate Parser29').item.json.y }})\""
      },
      "id": "295029d2-0e84-4f1d-aa1c-f754e31eccfd",
      "name": "Click23",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        1260
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        1220
      ],
      "typeVersion": 1,
      "id": "d5f96d6a-f0a8-4593-b343-45586894ac2e",
      "name": "Sticky Note28"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\Users\\simon\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "270ce8d3-994a-4ab6-b52a-ff911e2ea6fe",
      "name": "Save Screenshot24",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        1480
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\LS\\CUIT-CNR2-LS.png', grayscale=True, confidence=0.7))\"\n"
      },
      "id": "6bc4cf67-f529-49b9-ae80-8997f0f4b03a",
      "name": "Locate On Screen38",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        1480
      ],
      "retryOnFail": true,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "0b5b737f-990a-499e-b727-341c846b4cc4",
      "name": "Coordinate Parser30",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        1480
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.click({{ $('Coordinate Parser30').item.json.x }}, {{ $('Coordinate Parser30').item.json.y }})\""
      },
      "id": "95defd5c-a9bd-45f2-88cc-e537827d9a95",
      "name": "Click26",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        1480
      ],
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        1440
      ],
      "typeVersion": 1,
      "id": "79107d4a-afa7-4151-bf52-e4628442d86f",
      "name": "Sticky Note29"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('direc1').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "10638912-e10a-4cbd-ab0b-73a0c8e4cbb4",
      "name": "Save Screenshot25",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2340,
        1700
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc1').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Documento-CNR2-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "e62d3a91-1d39-40ac-bec5-916e012263eb",
      "name": "Locate On Screen39",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2460,
        1700
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "8fba1e15-6503-4ca8-875b-bb9a162bb1da",
      "name": "Coordinate Parser31",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2580,
        1700
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser31').item.json.x }}, {{ $('Coordinate Parser31').item.json.y }}); pyautogui.typewrite('{{ $('Code6').item.json.nombre }}')\""
      },
      "id": "ad8c8795-7b29-4a0c-87b4-926db39b8c4e",
      "name": "Click27",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        1700
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        1660
      ],
      "typeVersion": 1,
      "id": "3e4f14b5-0502-402a-b383-bd9c071fb50c",
      "name": "Sticky Note30"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;direc ='{{$('direc1').item.json.direc}}'; img = ImageGrab.grab();img.save(fr'{direc}/.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "9bfe09c5-b650-4b90-8631-30d12f395076",
      "name": "Save Screenshot26",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        1920
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc='{{$('direc1').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Aceptar-CNR2-LS.png', grayscale=False, confidence=0.9))\"\n"
      },
      "id": "5030e0f0-b6d1-4c92-a4bb-4bfabdbae1be",
      "name": "Locate On Screen40",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        1920
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "b85d2752-1b6d-4f3d-9bd0-9a852111728e",
      "name": "Coordinate Parser32",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        1920
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser32').item.json.x }}, {{ $('Coordinate Parser32').item.json.y }})\""
      },
      "id": "6012dded-0c3a-41e9-aa04-7b8e00cf641a",
      "name": "Click29",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        1920
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        1880
      ],
      "typeVersion": 1,
      "id": "84c193a9-fd59-4a83-a1e0-1d7b3f475d97",
      "name": "Sticky Note31"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('direc2').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "eaa7bb76-fce7-4754-bac8-0791a6864319",
      "name": "Save Screenshot27",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        820
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc2').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-InteresTemporal-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "4cdf8323-8fb1-4ddc-8755-091462a76945",
      "name": "Locate On Screen41",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        820
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "53fa87ff-4fca-4cc2-8a8c-18b5c90b9035",
      "name": "Coordinate Parser33",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        820
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser33').item.json.x }}, {{ $('Coordinate Parser33').item.json.y }})\""
      },
      "id": "0df4ef1c-ec5a-4c9c-b4fc-4c1a35cc8a50",
      "name": "Click30",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        820
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        780
      ],
      "typeVersion": 1,
      "id": "bcbffbe1-7e75-46dd-99a7-4a7af05c85fb",
      "name": "Sticky Note32"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc3').item.json.direc}}'; img.save(fr'{direc}/.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "94d52ad5-dda3-4ca4-ab30-c75f57661561",
      "name": "Save Screenshot28",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1920,
        2140
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Siguiente-LS.png', grayscale=True, confidence=0.7))\"\n"
      },
      "id": "0aa2df52-ae64-4978-99dd-bbd1ba785afa",
      "name": "Locate On Screen42",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        2140
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "ba90c79e-7625-4727-9e92-c9edcef30fe3",
      "name": "Coordinate Parser34",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        2140
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser34').item.json.x }}, {{ $('Coordinate Parser34').item.json.y }})\""
      },
      "id": "83584cba-364f-4a2f-a6e2-bd6166347270",
      "name": "Click31",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2520,
        2140
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        2100
      ],
      "typeVersion": 1,
      "id": "71e3c1eb-5e8f-45a9-b2cc-95f3bdba0d71",
      "name": "Sticky Note33"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('direc3').item.json.direc}}';img.save(fr'{direc}/.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "b6c37105-330e-4fbc-8fd6-a0e9ad9c49da",
      "name": "Save Screenshot29",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        2360
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-GenerarPDF-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "3c3711b0-446d-4d9e-987b-8464759674db",
      "name": "Locate On Screen43",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        2360
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "ba7f6b59-042f-4664-b175-90705750d455",
      "name": "Coordinate Parser35",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        2360
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser35').item.json.x }}, {{ $('Coordinate Parser35').item.json.y }})\""
      },
      "id": "33313798-89f6-4281-8b4b-3dcae82304cc",
      "name": "Click32",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        2360
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        2320
      ],
      "typeVersion": 1,
      "id": "a2e3b4a5-34f4-4650-a27b-e28a111055b0",
      "name": "Sticky Note34"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc3').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "35fed03b-6c28-4d76-bcf0-a818c29afe2e",
      "name": "Save Screenshot52",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        2580
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "bc542056-e907-4e47-be89-e733f37c24d9",
      "name": "Coordinate Parser59",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2520,
        2580
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
      },
      "id": "02a24313-2a96-42ad-a956-daf7b185dd1f",
      "name": "Click77",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        2580
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Descarga\n**Busca y presiona el \nbotón de descarga**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        2540
      ],
      "typeVersion": 1,
      "id": "0801f396-c70f-4bde-b165-452bd39aa955",
      "name": "Sticky Note68"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(10); img = ImageGrab.grab(); direc = '{{$('direc3').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "4529e9f8-b0de-4be2-8904-c8b12c89e146",
      "name": "Save Screenshot53",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        2800
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc3').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Barra-Guardar-Nombre-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "7b5d4faa-4836-40f8-870a-4cb252e6707c",
      "name": "Locate On Screen44",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1880,
        2800
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "de2167ea-5e08-49b2-8212-20961d28f23b",
      "name": "Coordinate Parser60",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        2800
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        2760
      ],
      "typeVersion": 1,
      "id": "b09ad325-dcf9-4c4f-8b16-e587c02e8544",
      "name": "Sticky Note69"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc4').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "60ef8a6b-d810-458c-99f1-01b3a0f09040",
      "name": "Save Screenshot54",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1880,
        3020
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc4').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "7d16c6f7-a3b9-4bc8-a8b4-8af7020496e3",
      "name": "Locate On Screen45",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        3020
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "48c1f955-b013-4e07-b14d-a3fd675bad5b",
      "name": "Coordinate Parser61",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        3020
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;pyautogui.click({{ $('Coordinate Parser61').item.json.x }}, {{ $('Coordinate Parser61').item.json.y }})\""
      },
      "id": "7fcc3d4b-9d92-46be-abfb-623bf002ab3a",
      "name": "Click79",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        3020
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        2980
      ],
      "typeVersion": 1,
      "id": "bb7fe5af-07e6-4e07-9e7f-53ab3e124dce",
      "name": "Sticky Note70"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc4').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "cb4b4a35-beda-4734-806b-47cd6f5a9a6b",
      "name": "Save Screenshot55",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        3240
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "5104ec66-17ed-4e32-b10a-089b32d08dac",
      "name": "Coordinate Parser62",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        3240
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser62').item.json.x }}, {{ $('Coordinate Parser62').item.json.y }})\""
      },
      "id": "d7d46888-3754-4e82-9a20-f40ee9dcae0d",
      "name": "Click80",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        3240
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        3200
      ],
      "typeVersion": 1,
      "id": "d12a3318-69cf-4287-9922-e5adb7755c09",
      "name": "Sticky Note71"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc4').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "ff95fcd0-8d27-4bbf-b175-f23229e7138b",
      "name": "Click81",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        3240
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2); pyautogui.hotkey('ctrl', 'w')\""
      },
      "id": "28d45dfb-200b-4c37-be1c-09ba4fb92ea0",
      "name": "Save Screenshot56",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2300,
        3260
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Cierrre\n**Cancela hasta que siga** ",
        "height": 180,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        3420
      ],
      "typeVersion": 1,
      "id": "a05e1a0a-1afd-4e69-84a6-fc24177409f3",
      "name": "Sticky Note72"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "c7a6e542-31fe-41ac-a2e6-f9c989ae59d5",
      "name": "Save Screenshot57",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        3460
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\LS\\Cerrar-CNR-LS.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "79e1c4f0-a14c-4d9c-9dbd-5b3272e64a78",
      "name": "Locate On Screen46",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        3460
      ],
      "retryOnFail": true,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "1fb2b9c7-3993-4b3f-9b73-1fcead942c93",
      "name": "Coordinate Parser63",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        3460
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
      },
      "id": "324282fc-cf71-44c5-8e88-1fdecc515c4a",
      "name": "Click82",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        3460
      ],
      "executeOnce": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "8e010a35-215f-41d1-beca-b2ef4fe2c925",
      "name": "Click83",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        2580
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "f8ce44c5-38dd-428d-9810-89cbe2d47098",
      "name": "Save Screenshot59",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        3680
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\LS\\\\Boton-Perfil-LS.png', grayscale=True, confidence=0.3))\""
      },
      "id": "7451fdb5-4237-4a1f-ab4e-ab67fd192fb4",
      "name": "Locate On Screen48",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        3680
      ],
      "retryOnFail": true,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "2cf32cea-a305-4eb9-b64c-6e8a01b34438",
      "name": "Coordinate Parser64",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2520,
        3680
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui, math;from datetime import date; import datetime; import time; time.sleep(5); pyautogui.click(1870, 120)\""
      },
      "id": "333cabcf-360d-43dc-8655-ed7e9e2dbbcf",
      "name": "Click36",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        3680
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Cerrar Sesion\n**Presiona el logo de \nPerrfil en ARCA**",
        "height": 180,
        "width": 1460,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        3640
      ],
      "typeVersion": 1,
      "id": "659e83fe-ae9c-45f1-982a-8fd96e7e63f9",
      "name": "Sticky Note35"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc4').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "061a29a5-9e91-4ada-9217-e3ce2aac582a",
      "name": "Save Screenshot60",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1740,
        3900
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('direc4').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\\\Screenshots\\\\LS\\\\Boton-Cerrarsesion-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "0f3a8980-26b4-4a6c-92a7-5c0e7c64973b",
      "name": "Locate On Screen49",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        3900
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "052c456c-98a6-4f59-a239-131b42a3237a",
      "name": "Coordinate Parser65",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2520,
        3900
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
      },
      "id": "d02c408e-fd80-46b0-8fa7-578a3a7731c3",
      "name": "Click37",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        3900
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Cerrar Sesion\n**Selecciona la opción \nCerrar Sesión**",
        "height": 180,
        "width": 1460,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1400,
        3860
      ],
      "typeVersion": 1,
      "id": "f37d6170-95da-4453-8966-6fe054ef7c44",
      "name": "Sticky Note36"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Loop-Index"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "valor",
              "fieldValue": "={{ $('Supabase15').item.json.valor +1}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -160,
        -120
      ],
      "id": "88150805-4ac9-4f1d-886d-eeb5198ca511",
      "name": "Supabase3",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Loop-Index"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "valor",
              "fieldValue": "-1"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1140,
        -80
      ],
      "id": "33b47b60-0898-41f1-b174-3bf23e530556",
      "name": "Supabase4",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Loop-Index"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2160,
        2800
      ],
      "id": "fd358fad-1dfb-482c-ab4a-9bd78113166a",
      "name": "Supabase13",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Usuarios-Personal"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2300,
        2800
      ],
      "id": "3346d4de-895b-4492-9694-81c10a3d6a34",
      "name": "Supabase14",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los registros del nodo de entrada\nconst registros = $input.all();  // Esto devuelve un array con todos los items\n\n// Obtener el índice (valor) de la posición deseada, por ejemplo, de Supabase\nconst valor = $('Supabase22').item.json.valor;  // Asegúrate de que 'valor' es un número\n\n// Inicializamos el array de salida\nlet output = [];\n\n// Verificamos que el valor esté dentro del rango de los datos disponibles\nif (valor >= 0 && valor < registros.length) {\n    // Accedemos al registro en la posición indicada por 'valor'\n    const item = registros[valor].json;  // Accedemos al item correspondiente\n    const nombre = item.Nombre;  // Accedemos a 'Nombre' dentro de cada item\n    const apellido = item.Apellido;  // Accedemos a 'Apellido' dentro de cada item\n\n    // Agregamos el nombre y apellido al array de salida\n    output.push({\n        nombre: nombre,\n        apellido: apellido\n    });\n} else {\n    // Si el índice está fuera de rango, agregamos un error\n    output.push({\n        error: \"Índice fuera de rango\"\n    });\n}\n\n// Retornamos el array con el resultado\nreturn output;\n\n// Retornamos el array de objetos como salida\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        2800
      ],
      "id": "f6e52e67-41b9-4120-8df0-79b179df6a05",
      "name": "Code",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "714ee829-0bd5-48d9-bff5-e9614d1361eb",
              "name": "nombre",
              "value": "={{ $json.nombre }}",
              "type": "string"
            },
            {
              "id": "24ca1a69-9fdb-4b80-84e5-53cf08619ca9",
              "name": "apellido",
              "value": "={{ $json.apellido }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2560,
        2800
      ],
      "id": "43b1cf36-fa6e-4340-b386-78579e161fce",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();year=current_date.strftime('%Y');mesdirec = current_date.strftime('%Y');mesdirec = current_date.strftime('%Y');mesdirec = current_date.strftime('%m - %B %Y'); mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); mes = current_date.strftime('%B'); nombre='{{ $json.nombre }}'; pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-{mesdirec}.pdf')\""
      },
      "id": "ce456f39-04c4-4578-8d5f-778a49b6a0eb",
      "name": "Click35",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        2800
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.moveTo(1870,500); pyautogui.scroll(-500)\""
      },
      "id": "bf8f9229-2687-43f1-96b3-37c0b2b9d1b2",
      "name": "Click39",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2700,
        2140
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl'); time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
      },
      "id": "bb290e1f-43ca-4448-8614-a6a97e295cab",
      "name": "Save Screenshot58",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        40,
        7420
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Loop-Index"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -280,
        -120
      ],
      "id": "3b24300a-247a-43f5-a0a6-403e32e4cf61",
      "name": "Supabase15",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6bec7028-141e-4c88-91ff-254fd5d268bf",
              "leftValue": 5,
              "rightValue": "={{ $('Supabase7').item.json.valor }}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2280,
        580
      ],
      "id": "5396e867-73b0-4d60-9c98-d58723fa6d98",
      "name": "If1"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "keyValue": "Loop-Index"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2140,
        580
      ],
      "id": "7fa7a846-01f5-4d9d-926a-2bd49f85eb8c",
      "name": "Supabase7",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Loop-Index"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "valor",
              "fieldValue": "=-1"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1740,
        580
      ],
      "id": "91bd6f23-af11-4e12-b704-52c59908e937",
      "name": "Supabase8",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Loop-Index"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "valor",
              "fieldValue": "={{ $('Supabase7').item.json.valor +1}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2700,
        580
      ],
      "id": "a8689f9e-d8c2-4b6c-8351-4a2b7eab869b",
      "name": "Supabase16",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "CUITS Plantas"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1920,
        1040
      ],
      "id": "7cfe501f-c5b8-47ec-b2b2-68f297e855df",
      "name": "Supabase17",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los registros del nodo de entrada\nconst registros = $input.all();  // Esto devuelve un array con todos los items\n\n// Obtener el índice (valor) de la posición deseada, por ejemplo, de Supabase\nconst valor = $('Supabase18').first().json['valor'];  // Asegúrate de que 'valor' es un número\n\n// Inicializamos el array de salida\nlet output = [];\n\n// Verificamos que el valor esté dentro del rango de los datos disponibles\nif (valor >= 0 && valor < registros.length) {\n    // Accedemos al registro en la posición indicada por 'valor'\n    const item = registros[valor].json;  // Accedemos al item correspondiente\n    const nombre = item.Nombre;  // Accedemos a 'Nombre' dentro de cada item\n    const apellido = item.Apellido;  // Accedemos a 'Apellido' dentro de cada item\n\n    // Agregamos el nombre y apellido al array de salida\n    output.push({\n        nombre: nombre,\n        apellido: apellido\n    });\n} else {\n    // Si el índice está fuera de rango, agregamos un error\n    output.push({\n        error: \"Índice fuera de rango\"\n    });\n}\n\n// Retornamos el array con el resultado\nreturn output;\n\n// Retornamos el array de objetos como salida\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        1040
      ],
      "id": "53e1281e-4d5e-47c4-b699-f96a10d68008",
      "name": "Code5"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "CUITS Plantas"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1900,
        1700
      ],
      "id": "3735db7b-af53-41df-890e-9b9bf55c35ac",
      "name": "Supabase19",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los registros del nodo de entrada\nconst registros = $input.all();  // Esto devuelve un array con todos los items\n\n// Obtener el índice (valor) de la posición deseada, por ejemplo, de Supabase\nconst valor = $('Supabase20').first().json['valor'];  // Asegúrate de que 'valor' es un número\n\n// Inicializamos el array de salida\nlet output = [];\n\n// Verificamos que el valor esté dentro del rango de los datos disponibles\nif (valor >= 0 && valor < registros.length) {\n    // Accedemos al registro en la posición indicada por 'valor'\n    const item = registros[valor].json;  // Accedemos al item correspondiente\n    const nombre = item.CUIT;  // Accedemos a 'Nombre' dentro de cada item\n    const apellido = item.Apellido;  // Accedemos a 'Apellido' dentro de cada item\n\n    // Agregamos el nombre y apellido al array de salida\n    output.push({\n        nombre: nombre,\n        apellido: apellido\n    });\n} else {\n    // Si el índice está fuera de rango, agregamos un error\n    output.push({\n        error: \"Índice fuera de rango\"\n    });\n}\n\n// Retornamos el array con el resultado\nreturn output;\n\n// Retornamos el array de objetos como salida\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        1700
      ],
      "id": "2e05b967-0d0f-45c3-9fb2-13cedfdbc22f",
      "name": "Code6"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Loop-Index"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1740,
        1700
      ],
      "id": "3eac48d1-71e0-4eb6-9df1-3d65e0cea8a8",
      "name": "Supabase20",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Loop-Index"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1740,
        1040
      ],
      "id": "07386ce7-dbfd-4c8a-82a6-85c494a0caab",
      "name": "Supabase18",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "8gRagMKXvdHIE0xS",
          "mode": "list",
          "cachedResultName": "direc"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2220,
        1040
      ],
      "id": "80022acc-89c9-4cd8-919b-ad900e78bd41",
      "name": "direc"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "8gRagMKXvdHIE0xS",
          "mode": "list",
          "cachedResultName": "direc"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2200,
        1700
      ],
      "id": "56b39779-ca8c-4403-9732-fa5219016964",
      "name": "direc1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "8gRagMKXvdHIE0xS",
          "mode": "list",
          "cachedResultName": "direc"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2500,
        580
      ],
      "id": "c9a8d36d-d52e-44b8-83fe-b588ed494200",
      "name": "direc2"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "8gRagMKXvdHIE0xS",
          "mode": "list",
          "cachedResultName": "direc"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1740,
        2140
      ],
      "id": "7eb50f9a-487b-4a0d-9e71-6181a8e1bd87",
      "name": "direc3"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "8gRagMKXvdHIE0xS",
          "mode": "list",
          "cachedResultName": "direc"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1740,
        3020
      ],
      "id": "da036a92-adf2-4a28-9831-e1c91fce3e10",
      "name": "direc4"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "8gRagMKXvdHIE0xS",
          "mode": "list",
          "cachedResultName": "direc"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -40,
        -120
      ],
      "id": "e7173e1a-621a-480e-955b-3ba76359e1ed",
      "name": "direc5"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; import time; time.sleep(5); pyautogui.click(830,502)\""
      },
      "id": "3b95edb8-83c6-4dba-b04c-67b503a9ae04",
      "name": "Ingresa Secret1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        580,
        -280
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bd154629-c902-4d90-9b05-b13782b4f671",
              "name": "message",
              "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Usuario/Contraseña Incorrecto",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        360
      ],
      "id": "8eeed9a5-39fb-48a5-823c-d9c34fbd9ab4",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Errores"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Texto",
              "fieldValue": "={{ $('Supabase6').item.json.Texto }},{{ $json.message }}\n\n"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        580,
        360
      ],
      "id": "b7ec577a-5d41-4488-b323-371288622fbe",
      "name": "Supabase5",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "keyValue": "Errores"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        300,
        360
      ],
      "id": "1fad1e65-dd85-433f-a6cd-d09927d48652",
      "name": "Supabase6",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "keyValue": "Errores"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -780,
        200
      ],
      "id": "42df8627-aee8-4dbc-9b34-da0e4870df83",
      "name": "Supabase9",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Errores"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Texto"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1380,
        -80
      ],
      "id": "08b328b9-afb6-4d5f-abd4-dccfbe124769",
      "name": "Supabase2",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
      },
      "id": "262acf4d-ada2-48db-baf4-2df3942e2090",
      "name": "OCR Word1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        5760
      ],
      "notesInFlow": false,
      "onError": "continueRegularOutput",
      "notes": "Required with Parser"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;import time; timesleep(5); direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Denominacion-CNR-LS.png', grayscale=True, confidence=0.8))\""
      },
      "id": "cde49a23-c9f4-4c99-9287-881c1805c484",
      "name": "Locate On Screen17",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1060,
        4560
      ],
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(6);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "ac4a0fd8-afb3-4b7f-a8c7-46f4e113771e",
      "name": "Save Screenshot45",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        940,
        6340
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.7))\""
      },
      "id": "811d099b-f84b-4867-8d05-11d44ad4b5a1",
      "name": "Click70",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        6340
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(6);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "43439d30-dc0d-4f05-8edd-8c91060821b8",
      "name": "Save Screenshot46",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        940,
        6120
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.7))\""
      },
      "id": "c787779a-84de-4da0-baa3-8d8a5d13abda",
      "name": "Click69",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        6120
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(5);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
      },
      "id": "bea254cc-7602-4f94-9ce5-1b38977264ee",
      "name": "Save Screenshot47",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        800,
        7420
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.6))\""
      },
      "id": "f18dd8bf-35e3-452b-b759-2f1761c2ddbe",
      "name": "Click71",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        920,
        7420
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(5); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
      },
      "id": "005e93ef-e712-4109-a78d-66442be889e4",
      "name": "Save Screenshot21",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        4560
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
      },
      "id": "d7f9dfff-ae6a-40d0-a487-245689b21148",
      "name": "Save Screenshot61",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        7420
      ]
    },
    {
      "parameters": {
        "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://portalasegurado.papps.lasegunda.com.ar'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
      },
      "id": "5b773529-1832-454e-b1b7-9a45cc33da60",
      "name": "Close&Open",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -780,
        -380
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "UsuariosIndex"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "valor",
              "fieldValue": "={{ $('Supabase21').item.json.valor +1}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -160,
        -320
      ],
      "id": "c9389774-4bc2-4316-8f90-3f0d8438fdaf",
      "name": "Supabase10",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "UsuariosIndex"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -300,
        -320
      ],
      "id": "56b30c9d-6627-4061-8478-08099ae47036",
      "name": "Supabase21",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "UsuariosIndex"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "valor",
              "fieldValue": "0"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1260,
        -200
      ],
      "id": "ea3ddeea-0e42-4bfe-bd9f-705067cf5551",
      "name": "Supabase11",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "UsuariosIndex"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2160,
        2800
      ],
      "id": "906c1bbe-51be-429d-96ce-10bbf0481c57",
      "name": "Supabase22",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "n8n-backup",
  "repo_owner": "SimonTeralv",
  "repo_path": "",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-06-02T15:15:11.000Z",
  "versionId": "f301789b-8f4b-4708-b498-b12cfadd2e00"
}