{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "OpenBrowserCmd",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Save Screenshot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        []
      ]
    },
    "Save Screenshot": {
      "main": [
        [
          {
            "node": "Locate On Screen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen": {
      "main": [
        [
          {
            "node": "Coordinate Parser4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser4": {
      "main": [
        [
          {
            "node": "Click",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click": {
      "main": [
        [
          {
            "node": "Save Screenshot1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot1": {
      "main": [
        [
          {
            "node": "Locate On Screen1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen1": {
      "main": [
        [
          {
            "node": "Coordinate Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser": {
      "main": [
        [
          {
            "node": "Click1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click1": {
      "main": [
        [
          {
            "node": "Save Screenshot2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot2": {
      "main": [
        [
          {
            "node": "Locate On Screen2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen2": {
      "main": [
        [
          {
            "node": "Coordinate Parser1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser1": {
      "main": [
        [
          {
            "node": "Click2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click2": {
      "main": [
        [
          {
            "node": "Save Screenshot3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot3": {
      "main": [
        [
          {
            "node": "Locate On Screen3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen3": {
      "main": [
        [
          {
            "node": "Coordinate Parser2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser2": {
      "main": [
        [
          {
            "node": "Click3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click3": {
      "main": [
        [
          {
            "node": "Save Screenshot4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot4": {
      "main": [
        [
          {
            "node": "Locate On Screen4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen4": {
      "main": [
        [
          {
            "node": "Coordinate Parser3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser3": {
      "main": [
        [
          {
            "node": "Click4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click4": {
      "main": [
        [
          {
            "node": "Save Screenshot5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot5": {
      "main": [
        [
          {
            "node": "Locate On Screen5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen5": {
      "main": [
        [
          {
            "node": "Coordinate Parser5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser5": {
      "main": [
        [
          {
            "node": "Click5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click5": {
      "main": [
        [
          {
            "node": "Locate On Screen10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot7": {
      "main": [
        [
          {
            "node": "Locate On Screen7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen7": {
      "main": [
        [
          {
            "node": "Coordinate Parser7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser7": {
      "main": [
        [
          {
            "node": "Click10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click7": {
      "main": [
        [
          {
            "node": "Save Screenshot10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot8": {
      "main": [
        [
          {
            "node": "Locate On Screen8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen8": {
      "main": [
        [
          {
            "node": "Coordinate Parser8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser8": {
      "main": [
        [
          {
            "node": "Click7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click10": {
      "main": [
        [
          {
            "node": "Save Screenshot8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot10": {
      "main": [
        [
          {
            "node": "Locate On Screen9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen9": {
      "main": [
        [
          {
            "node": "Coordinate Parser12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser12": {
      "main": [
        [
          {
            "node": "Click11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click11": {
      "main": [
        [
          {
            "node": "Supabase3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Table - V1": {
      "main": [
        [
          {
            "node": "Divide html columns5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Divide html columns5": {
      "main": [
        [
          {
            "node": "Divide html columns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenBrowserCmd": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase3": {
      "main": [
        [
          {
            "node": "Get Table - V1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Divide html columns": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen10": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Save Screenshot7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Click5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        []
      ]
    },
    "Divide html columns2": {
      "main": [
        []
      ]
    },
    "Click12": {
      "main": [
        []
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "Save Screenshot6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot6": {
      "main": [
        [
          {
            "node": "Locate On Screen6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen6": {
      "main": [
        [
          {
            "node": "Coordinate Parser6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser6": {
      "main": [
        [
          {
            "node": "Click6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click6": {
      "main": [
        [
          {
            "node": "Save Screenshot9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot9": {
      "main": [
        [
          {
            "node": "Locate On Screen11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen11": {
      "main": [
        [
          {
            "node": "Coordinate Parser9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser9": {
      "main": [
        [
          {
            "node": "Click8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click8": {
      "main": [
        [
          {
            "node": "Save Screenshot11",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot11": {
      "main": [
        [
          {
            "node": "Locate On Screen12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen12": {
      "main": [
        [
          {
            "node": "Coordinate Parser10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser10": {
      "main": [
        [
          {
            "node": "Click9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click9": {
      "main": [
        [
          {
            "node": "Save Screenshot12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot12": {
      "main": [
        [
          {
            "node": "Locate On Screen13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen13": {
      "main": [
        [
          {
            "node": "Coordinate Parser11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser11": {
      "main": [
        [
          {
            "node": "Click13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click13": {
      "main": [
        [
          {
            "node": "Save Screenshot18",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot13": {
      "main": [
        [
          {
            "node": "Locate On Screen14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen14": {
      "main": [
        [
          {
            "node": "Coordinate Parser13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser13": {
      "main": [
        [
          {
            "node": "Click14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click14": {
      "main": [
        [
          {
            "node": "Save Screenshot14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot14": {
      "main": [
        [
          {
            "node": "Locate On Screen15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen15": {
      "main": [
        [
          {
            "node": "Coordinate Parser14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser14": {
      "main": [
        [
          {
            "node": "Click15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click15": {
      "main": [
        [
          {
            "node": "Locate On Screen19",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot17": {
      "main": [
        [
          {
            "node": "Locate On Screen18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen18": {
      "main": [
        [
          {
            "node": "Coordinate Parser17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser17": {
      "main": [
        [
          {
            "node": "Click18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click18": {
      "main": [
        [
          {
            "node": "Supabase4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Table - V": {
      "main": [
        [
          {
            "node": "Divide html columns6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Divide html columns6": {
      "main": [
        [
          {
            "node": "Divide html columns7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenBrowserCmd1": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase4": {
      "main": [
        [
          {
            "node": "Get Table - V",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Divide html columns1": {
      "main": [
        [
          {
            "node": "Divide html columns3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen19": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Save Screenshot17",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Click15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail1": {
      "main": [
        [
          {
            "node": "Click19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Divide html columns3": {
      "main": [
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot18": {
      "main": [
        [
          {
            "node": "Locate On Screen20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen20": {
      "main": [
        [
          {
            "node": "Coordinate Parser18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser18": {
      "main": [
        [
          {
            "node": "Click20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click20": {
      "main": [
        [
          {
            "node": "Save Screenshot19",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screenshot19": {
      "main": [
        [
          {
            "node": "Locate On Screen21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Locate On Screen21": {
      "main": [
        [
          {
            "node": "Coordinate Parser19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coordinate Parser19": {
      "main": [
        [
          {
            "node": "Click21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Click21": {
      "main": [
        [
          {
            "node": "Save Screenshot13",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save Screenshot19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        []
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Divide html columns7": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-26T14:15:41.724Z",
  "id": "nq1jw4QANuhy4EbZ",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Vencimientos-ControlDocumentario TEST V2",
  "nodes": [
    {
      "parameters": {},
      "id": "2d566db3-52f4-4161-b2ca-7c50ebe1f3e8",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -80,
        80
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Usuarios-Personal"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        440,
        80
      ],
      "id": "1aeb1d6f-558e-4050-a66c-d8495ecfbe12",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -40,
        260
      ],
      "id": "4197bfbb-d020-4612-af69-609438f738f2",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "f15f38eb-eb83-4089-a329-795f6d87c97b",
      "name": "Save Screenshot",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        80
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "8ba5b12d-1843-4b02-8f51-477ec221e272",
      "name": "Locate On Screen",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        80
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "4e9c58cc-2c54-43bc-a054-3a7c8940a05d",
      "name": "Coordinate Parser4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        80
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y }}); pyautogui.typewrite('30716401622'); pyautogui.typewrite(['escape'])\""
      },
      "id": "7df59b4e-174b-4003-8303-639232566224",
      "name": "Click",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        80
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Login\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        60
      ],
      "typeVersion": 1,
      "id": "906e2dcd-1842-45d8-be7f-f3675a726380",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "14700b31-5574-45ec-a7e3-f85e188e5008",
      "name": "Save Screenshot1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "a406dec8-d4f5-4ee8-b98b-f956137a9744",
      "name": "Locate On Screen1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        300
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "d4419a04-ba44-47de-ba51-026a2d575e9b",
      "name": "Coordinate Parser",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        300
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser').item.json.x}}, {{ $('Coordinate Parser').item.json.y }}); pyautogui.typewrite('TR33Ingresos*')\""
      },
      "id": "4147bff3-50ed-4860-93f5-483d47a6be9a",
      "name": "Click1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        300
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Login\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        280
      ],
      "typeVersion": 1,
      "id": "ad1f2314-e48b-4017-afb1-f36ee3ac061d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "42e0b965-1775-4a10-8b2c-238fcb4d40e3",
      "name": "Save Screenshot2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        520
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
      },
      "id": "efb52671-424a-4a17-825a-9d20ca083092",
      "name": "Locate On Screen2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        520
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "53c76d7f-39bf-4125-81ec-7bcc8fc89d2e",
      "name": "Coordinate Parser1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        520
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser1').item.json.x }}, {{ $('Coordinate Parser1').item.json.y }})\""
      },
      "id": "22edda5a-6b95-490d-a497-4f3a8230cc88",
      "name": "Click2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        520
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        500
      ],
      "typeVersion": 1,
      "id": "e383dd26-8ba5-4280-aa48-312b5226606c",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "306df418-6553-474f-9aae-856386c2505f",
      "name": "Save Screenshot3",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        740
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "92dc437a-d85a-4745-b0fb-a281d890c775",
      "name": "Locate On Screen3",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        740
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "8d323ec2-c667-4d8e-99bf-713013138383",
      "name": "Coordinate Parser2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        740
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser2').item.json.x }}, {{ $('Coordinate Parser2').item.json.y }})\""
      },
      "id": "806ea7e9-52f8-4f2f-b287-4bd8858ed838",
      "name": "Click3",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        740
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Seleccion\n**Rellenar**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        720
      ],
      "typeVersion": 1,
      "id": "f63e2225-28cf-4b58-b414-651a4caa9cb7",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "874662c5-515b-4b32-a639-7ddf2ed6d87d",
      "name": "Save Screenshot4",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        960
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "20b7b8f5-0e4d-4fcf-b297-f7e9b10097f8",
      "name": "Locate On Screen4",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        960
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "4adeb6be-71c9-4ed7-b659-6e6dda02917b",
      "name": "Coordinate Parser3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        960
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser3').item.json.x}}, {{ $('Coordinate Parser3').item.json.y }})\""
      },
      "id": "3245608d-1140-4ff3-baf9-326e3a4f220c",
      "name": "Click4",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        960
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Seleccion\n**Rellenar**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        940
      ],
      "typeVersion": 1,
      "id": "86add4b4-a57f-4fb7-800d-67621edc8a84",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "ecf1944e-81ec-46a5-86c0-87d4ff6e8a49",
      "name": "Save Screenshot5",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        1180
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Vencimientos-CD.png', grayscale=False, confidence=0.9))\"\n"
      },
      "id": "bd953eef-51ba-4b74-b334-b7e3ef6e8990",
      "name": "Locate On Screen5",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        1180
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "c964c6c6-6f06-4534-8a3f-d6606adff9fb",
      "name": "Coordinate Parser5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        1180
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser5').item.json.x}}, {{ $('Coordinate Parser5').item.json.y }})\""
      },
      "id": "ab26da97-ee12-46fe-bf06-0be4019f3e77",
      "name": "Click5",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1420,
        1180
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Seleccion\n**Rellenar**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        1160
      ],
      "typeVersion": 1,
      "id": "3e43340d-6e7c-4cf0-9431-d42045e16072",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "98984561-1f0e-4568-92a2-904c1b02c42a",
      "name": "Save Screenshot7",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        1400
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6))\"\n"
      },
      "id": "d7ff17fc-7b72-4871-9d46-57ed8f0f2bd4",
      "name": "Locate On Screen7",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1060,
        1400
      ],
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "352c4a79-df4d-4dab-996a-79ce34584250",
      "name": "Coordinate Parser7",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        1400
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser8').item.json.x }}, {{ $('Coordinate Parser8').item.json.y}})\""
      },
      "id": "4fe69654-1231-4d24-b8f3-29f6c128209f",
      "name": "Click7",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        1400
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## DropDown SJS\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        1380
      ],
      "typeVersion": 1,
      "id": "b2dc427a-97db-49da-a401-a9797f03b05c",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "ee263e43-e353-4ae1-bca0-f25c785d7d0e",
      "name": "Save Screenshot8",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1540,
        1400
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-SJS2-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "ffdfd6cd-0f78-4674-8f04-92adb92f9ee9",
      "name": "Locate On Screen8",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1700,
        1400
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "e7484298-0818-4222-a160-dffe15fc76a9",
      "name": "Coordinate Parser8",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1860,
        1400
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser7').item.json.x }}, {{ $('Coordinate Parser7').item.json.y }})\""
      },
      "id": "fc7a3c17-4e53-45a9-8a39-413cd8248764",
      "name": "Click10",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1380,
        1400
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "46285f03-eefd-48e2-85fa-d6c9273c170d",
      "name": "Save Screenshot10",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        1620
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "58796d4c-f0d7-43a7-86c1-61749bbfd4ce",
      "name": "Locate On Screen9",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        1620
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "5497a60b-d9e5-42ee-a4ef-5ac1a1459b21",
      "name": "Coordinate Parser12",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        1620
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser12').item.json.x }}, {{ $('Coordinate Parser12').item.json.y }})\""
      },
      "id": "2dcda6c0-6ea3-409f-b4bd-8a8cbef13ae1",
      "name": "Click11",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        1620
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Buscar\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        1600
      ],
      "typeVersion": 1,
      "id": "c0d13199-00b9-424a-9885-12162d0370d6",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## Buscar\n**Ingresa Nombre de Usuario**",
        "height": 140,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        1820
      ],
      "typeVersion": 1,
      "id": "0e5580b9-cc42-45b1-a69d-94af131962dc",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'ctl00_ContentPlaceHolderMain_tbVencimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
      },
      "id": "0ab03141-2410-42f5-836e-2e4d07bf00c5",
      "name": "Get Table - V1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1080,
        1840
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Función para calcular los días restantes hasta la fecha\nfunction calcularDiasRestantes(fechaStr) {\n  const [dia, mes, año] = fechaStr.split('/');  // Convertir la fecha a [día, mes, año]\n  const fecha = new Date(`${año}-${mes}-${dia}`);  // Crear el objeto Date (formato: YYYY-MM-DD)\n  const hoy = new Date();  // Fecha actual\n\n  // Calculamos la diferencia en milisegundos\n  const diferencia = fecha - hoy;\n  const diasRestantes = Math.floor(diferencia / (1000 * 60 * 60 * 24));\n\n  return diasRestantes;\n}\n\n// Mapear las posiciones a los encabezados correspondientes\nconst headers = [\n  \"DNI\", \"Nombre\", \"Estado\", \"DNI\", \"ExámenMédico\", \"PolizaAccPer\", \"PPolizaAccPe\", \"LicenciaCond\", \"IndDepSegSJS\", \"OCAsocPLSJS\", \"Incr-Aut-Mon\", \"IndGralSeg\", \"Anexo1BUNGE\", \"NotaSubCont.\"\n];\n\n// Establecer la salida como el array de objetos con la fecha comparada y días restantes\nreturn lines.map(line => {\n  // Procesamos la columna 'fila' de cada línea\n  const fila = line.fila;\n\n  // Arreglo para almacenar las fechas que estén a 7 días o menos\n  const fechasCercanas = [];\n\n  // Solo nos interesan las posiciones 5, 6 y 10 (fechas de los documentos)\n  const indicesFechas = [5, 6, 10];\n\n  // Recorremos las posiciones 5, 6 y 10 para verificar los días restantes\n  indicesFechas.forEach(index => {\n    const fecha = fila[index];\n\n    if (fecha !== 'n/a') {\n      const diasRestantes = calcularDiasRestantes(fecha);\n      if (diasRestantes <= 10 && diasRestantes >= 0) {\n        // El encabezado de la posición es el nombre del documento\n        const documento = headers[index];  // Obtenemos el nombre del encabezado correspondiente a la posición\n\n        fechasCercanas.push({\n          nombre: fila[1],  // Nombre de la persona en la posición 1\n          documento: documento,  // Nombre del encabezado (en vez de la fecha)\n          diasRestantes: diasRestantes  // Cuántos días faltan\n        });\n      }\n    }\n  });\n\n  // Si existen fechas cercanas (7 días o menos), devolvemos esa información como un objeto dentro de 'json'\n  if (fechasCercanas.length > 0) {\n    return { json: { fechasCercanas } };  // Aseguramos que 'json' sea un objeto\n  } else {\n    // Si no hay fechas cercanas, no devolvemos nada\n    return null;\n  }\n}).filter(line => line !== null);  // Filtramos las líneas que no contienen fechas cercanas"
      },
      "id": "d0ec2560-83ba-4321-8cc8-96ea0fbcec52",
      "name": "Divide html columns5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        1840
      ]
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
      },
      "id": "6c62804c-8bb9-4aea-90f2-52a6a4bc9512",
      "name": "OpenBrowserCmd",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        160,
        80
      ],
      "alwaysOutputData": false,
      "executeOnce": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Documentos"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Texto",
              "fieldValue": "="
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        900,
        1840
      ],
      "id": "9873a89f-a4b4-43d4-859f-03d3f755c304",
      "name": "Supabase3",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const documentTypeMap = {}; // This map will collect ALL names for each document type across ALL input items\n\nfor (const item of items) {\n  if (item.json && item.json.fechasCercanas) {\n    for (const fechaCercana of item.json.fechasCercanas) {\n      const documentType = fechaCercana.documento;\n      const name = fechaCercana.nombre;\n\n      if (documentType) {\n        if (!documentTypeMap[documentType]) {\n          documentTypeMap[documentType] = []; // Initialize array for this document type if not seen yet\n        }\n        if (name && !documentTypeMap[documentType].includes(name)) {\n          documentTypeMap[documentType].push(name); // Add name if not already present for this docType\n        }\n      }\n    }\n  }\n}\n\nconst output = [];\n// Now, create an output item for each unique document type found in the entire input\nfor (const docType in documentTypeMap) {\n  if (documentTypeMap.hasOwnProperty(docType)) {\n    const namesString = documentTypeMap[docType].join(', '); // Join all collected names for this docType\n    output.push({\n      json: {\n        query: `${docType}: ${namesString}` // Format as \"DocumentType: Name1, Name2, ...\"\n      }\n    });\n  }\n}\n\nreturn output;"
      },
      "id": "28287bbb-6c74-4cf2-866f-c6ea5d2ef7e1",
      "name": "Divide html columns",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        1840
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';import time; time.sleep(4); print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6) is not None)\""
      },
      "id": "04a98307-bc44-481b-8f09-291c6f07d02f",
      "name": "Locate On Screen10",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1860,
        1200
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6d032dad-66f7-4760-8421-7531ba564039",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "True",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2020,
        1200
      ],
      "id": "d0c9abca-8aef-4b78-8a97-80c682fb747b",
      "name": "If"
    },
    {
      "parameters": {
        "sendTo": "=simonteralv2@gmail.com",
        "subject": "BOT - Proximos Vencimientos - BUNGE",
        "emailType": "text",
        "message": "={{ $json.resumenFechas }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1720,
        1840
      ],
      "id": "4d4afd55-cd72-4fa3-b1f9-2c9d21a707d3",
      "name": "Gmail",
      "webhookId": "c19da1bf-dc16-4557-be89-71444c358f34",
      "credentials": {
        "gmailOAuth2": {
          "id": "NWtQUZYbGghGDkN1",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Combinar y reemplazar documentos\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Convertir en texto legible\nlet resumen = 'Fechas cercanas:\\n\\n';\n\nfor (const fecha of todasLasFechas) {\n  resumen += `👤 ${fecha.nombre}\\n📄 ${fecha.documento}\\n📅 En ${fecha.diasRestantes} días\\n\\n`;\n}\n\nreturn [\n  {\n    json: {\n      resumenFechas: resumen.trim()\n    }\n  }\n];"
      },
      "id": "23f30985-701a-48e2-81a2-946c5a425fa8",
      "name": "Divide html columns2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        1840
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
      },
      "id": "198893e8-4a16-43c4-9c99-932048be72c8",
      "name": "Click12",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        1840
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Usuarios-Personal"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2660,
        80
      ],
      "id": "1bc54d27-8758-4cc9-9801-84397c23ca14",
      "name": "Supabase1",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "986fbdef-2a95-41ed-9cbf-f74bd302cbad",
      "name": "Save Screenshot6",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3120,
        80
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "7252f37c-a0f1-44df-95be-5097a3f4042b",
      "name": "Locate On Screen6",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3300,
        80
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "15a3f169-c710-4ea4-a804-28d220e92e7a",
      "name": "Coordinate Parser6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        80
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser6').item.json.x }}, {{ $('Coordinate Parser6').item.json.y }}); pyautogui.typewrite('30716401622'); pyautogui.typewrite(['escape'])\""
      },
      "id": "149449e3-7dcc-4ece-bed5-36b0ab08e318",
      "name": "Click6",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4240,
        80
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Login\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        60
      ],
      "typeVersion": 1,
      "id": "39c4b917-c9e8-4093-93f3-48aae89c69bb",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "8e295614-2204-4f7d-b6d3-8d5b2e9ec0ce",
      "name": "Save Screenshot9",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3120,
        300
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields3').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "630d17e5-073c-4174-b73c-a4985a0acca4",
      "name": "Locate On Screen11",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3300,
        300
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "f8dc936d-9ff5-4e38-8346-8406890dbfd5",
      "name": "Coordinate Parser9",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        300
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser9').item.json.x}}, {{ $('Coordinate Parser9').item.json.y }}); pyautogui.typewrite('TR33Ingresos*')\""
      },
      "id": "16001d86-0b57-4fad-9431-b8f07c3b03f6",
      "name": "Click8",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4240,
        300
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Login\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        280
      ],
      "typeVersion": 1,
      "id": "665513a8-1c2e-431b-becd-f0eb4997e01b",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "69ae03fd-4ba0-4250-8e16-c3027a78b6b2",
      "name": "Save Screenshot11",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3120,
        520
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
      },
      "id": "3a509d35-c47a-41d1-a108-699297dc9454",
      "name": "Locate On Screen12",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3300,
        520
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "d2f9fce3-3854-4493-9de4-93cfd11f9d51",
      "name": "Coordinate Parser10",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        520
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser10').item.json.x }}, {{ $('Coordinate Parser10').item.json.y }})\""
      },
      "id": "75ba86aa-d907-4051-a9f2-ccf757977f79",
      "name": "Click9",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4240,
        520
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        500
      ],
      "typeVersion": 1,
      "id": "35cdfa85-7e27-439c-8542-ca8a205e217e",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "88a41b62-e1a2-4b0b-842a-f1691ebf942b",
      "name": "Save Screenshot12",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3120,
        740
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "268aef53-e88d-4c71-b8e6-402c0d8483d9",
      "name": "Locate On Screen13",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3300,
        740
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "e1df2c3a-8d63-4d1b-a562-154906640794",
      "name": "Coordinate Parser11",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        740
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser11').item.json.x }}, {{ $('Coordinate Parser11').item.json.y }})\""
      },
      "id": "c2e3ddc0-ea33-48b2-9c94-e00b78ea8ef6",
      "name": "Click13",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4240,
        740
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Seleccion\n**Rellenar**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        720
      ],
      "typeVersion": 1,
      "id": "64b83f6b-08fa-456e-b7ef-4ec35be19901",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "12da8ae3-818a-4d46-bfac-f6c0d189528e",
      "name": "Save Screenshot13",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3120,
        1180
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "1f377156-21da-4aef-b244-ccadbf96f5ae",
      "name": "Locate On Screen14",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3300,
        1180
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "8fd57f96-713b-41f5-9f97-10f09094e75c",
      "name": "Coordinate Parser13",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        1180
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser13').item.json.x}}, {{ $('Coordinate Parser13').item.json.y }})\""
      },
      "id": "d47c31d0-e856-401c-9d62-867f34c22251",
      "name": "Click14",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4240,
        1180
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Seleccion\n**Rellenar**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        1160
      ],
      "typeVersion": 1,
      "id": "7e3aa3ab-7613-4567-85ac-ccd44a9c2f55",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "f9edc9a9-0a23-44c1-9f90-7bc8f0da39d4",
      "name": "Save Screenshot14",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3120,
        1400
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Vencimientos-CD.png', grayscale=False, confidence=0.9))\"\n"
      },
      "id": "b84d91fb-d571-429e-8f4d-31bdc45cb7d6",
      "name": "Locate On Screen15",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3300,
        1400
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "9b0b2374-ec90-4952-8d32-6ba4ec541b0e",
      "name": "Coordinate Parser14",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        1400
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser14').item.json.x}}, {{ $('Coordinate Parser14').item.json.y }})\""
      },
      "id": "4758075c-2855-4092-b58f-6965d13327cd",
      "name": "Click15",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3640,
        1400
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Seleccion\n**Rellenar**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        1380
      ],
      "typeVersion": 1,
      "id": "dd692106-c3e3-42ee-a2de-e11b91221513",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "5dc67026-617b-4ac4-84c4-f0cc8c8fe082",
      "name": "Save Screenshot17",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3120,
        1640
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "836d0d9c-8f5e-4e10-adb4-d4abfe696277",
      "name": "Locate On Screen18",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3300,
        1640
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "f2f53aff-7bee-4ed1-a0b8-7748158f3b69",
      "name": "Coordinate Parser17",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        1640
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser17').item.json.x }}, {{ $('Coordinate Parser17').item.json.y }})\""
      },
      "id": "00a618d2-5a3f-4445-90dc-4e78376d2650",
      "name": "Click18",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4240,
        1640
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Buscar\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        1620
      ],
      "typeVersion": 1,
      "id": "c43b7b2c-8272-42ce-83b4-2ab29b1ac090",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "## Buscar\n**Ingresa Nombre de Usuario**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        1840
      ],
      "typeVersion": 1,
      "id": "3dc35d1e-70f8-4719-9fb0-aeaf36b61cb5",
      "name": "Sticky Note17"
    },
    {
      "parameters": {
        "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'ctl00_ContentPlaceHolderMain_tbVencimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
      },
      "id": "9ff28a45-4bf1-42be-9e4c-d097023547d6",
      "name": "Get Table - V",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3300,
        1860
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Función para calcular los días restantes hasta la fecha\nfunction calcularDiasRestantes(fechaStr) {\n  const [dia, mes, año] = fechaStr.split('/');  // Convertir la fecha a [día, mes, año]\n  const fecha = new Date(`${año}-${mes}-${dia}`);  // Crear el objeto Date (formato: YYYY-MM-DD)\n  const hoy = new Date();  // Fecha actual\n\n  // Calculamos la diferencia en milisegundos\n  const diferencia = fecha - hoy;\n  const diasRestantes = Math.floor(diferencia / (1000 * 60 * 60 * 24));\n\n  return diasRestantes;\n}\n\n// Mapear las posiciones a los encabezados correspondientes\nconst headers = [\n  \"DNI\", \"Nombre\", \"Estado\", \"DNI\", \"ExámenMédico\", \"PolizaAccPer\", \"PPolizaAccPe\", \"LicenciaCond\", \"IndDepSegSJS\", \"OCAsocPLSJS\", \"Incr-Aut-Mon\", \"IndGralSeg\", \"Anexo1BUNGE\", \"NotaSubCont.\"\n];\n\n// Establecer la salida como el array de objetos con la fecha comparada y días restantes\nreturn lines.map(line => {\n  // Procesamos la columna 'fila' de cada línea\n  const fila = line.fila;\n\n  // Arreglo para almacenar las fechas que estén a 7 días o menos\n  const fechasCercanas = [];\n\n  // Solo nos interesan las posiciones 5, 6 y 10 (fechas de los documentos)\n  const indicesFechas = [5, 6, 10];\n\n  // Recorremos las posiciones 5, 6 y 10 para verificar los días restantes\n  indicesFechas.forEach(index => {\n    const fecha = fila[index];\n\n    if (fecha !== 'n/a') {\n      const diasRestantes = calcularDiasRestantes(fecha);\n      if (diasRestantes <= 10 && diasRestantes >= 0) {\n        // El encabezado de la posición es el nombre del documento\n        const documento = headers[index];  // Obtenemos el nombre del encabezado correspondiente a la posición\n\n        fechasCercanas.push({\n          nombre: fila[1],  // Nombre de la persona en la posición 1\n          documento: documento,  // Nombre del encabezado (en vez de la fecha)\n          diasRestantes: diasRestantes  // Cuántos días faltan\n        });\n      }\n    }\n  });\n\n  // Si existen fechas cercanas (7 días o menos), devolvemos esa información como un objeto dentro de 'json'\n  if (fechasCercanas.length > 0) {\n    return { json: { fechasCercanas } };  // Aseguramos que 'json' sea un objeto\n  } else {\n    // Si no hay fechas cercanas, no devolvemos nada\n    return null;\n  }\n}).filter(line => line !== null);  // Filtramos las líneas que no contienen fechas cercanas"
      },
      "id": "14e9ff85-ca5e-45c1-bfb5-3d659fe51bd4",
      "name": "Divide html columns6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        1860
      ]
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
      },
      "id": "48f8a120-1669-4599-ab2e-1343a36a00c7",
      "name": "OpenBrowserCmd1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2380,
        80
      ],
      "alwaysOutputData": false,
      "executeOnce": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Documentos"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Texto",
              "fieldValue": "="
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3120,
        1860
      ],
      "id": "ae84c861-b887-46bd-82e5-cfabc96e8156",
      "name": "Supabase4",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Crear una única lista combinada de fechasCercanas\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Devolver un único item con json.fechasCercanas\nreturn [\n  {\n    json: {\n      fechasCercanas: todasLasFechas\n    }\n  }\n];"
      },
      "id": "27a74c09-d2f8-4c22-b19c-f978bdc641ad",
      "name": "Divide html columns1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3640,
        1720
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';import time; time.sleep(4); print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6) is not None)\""
      },
      "id": "cfa631b7-de93-4837-966a-cf20a7f4833d",
      "name": "Locate On Screen19",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4080,
        1420
      ],
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6d032dad-66f7-4760-8421-7531ba564039",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "True",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4240,
        1420
      ],
      "id": "5ba9cc7e-9029-44ae-ac60-6fe358472369",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
              "name": "direc",
              "value": "C:/Users/Uusario Nuevo Prueba",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2520,
        80
      ],
      "id": "f255eea0-048c-4136-9e40-7deb54feda2b",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "sendTo": "=simonteralv2@gmail.com",
        "subject": "BOT - Proximos Vencimientos - T6",
        "emailType": "text",
        "message": "={{ $json.resumenFechas }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3940,
        1860
      ],
      "id": "4f1a9aad-e8fd-4ae2-a63a-b4c050388b2f",
      "name": "Gmail1",
      "webhookId": "b8429562-37bd-422c-b53a-510b4f0f6489",
      "credentials": {
        "gmailOAuth2": {
          "id": "NWtQUZYbGghGDkN1",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Combinar y reemplazar documentos\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Convertir en texto legible\nlet resumen = 'Fechas cercanas:\\n\\n';\n\nfor (const fecha of todasLasFechas) {\n  resumen += `👤 ${fecha.nombre}\\n📄 ${fecha.documento}\\n📅 En ${fecha.diasRestantes} días\\n\\n`;\n}\n\nreturn [\n  {\n    json: {\n      resumenFechas: resumen.trim()\n    }\n  }\n];"
      },
      "id": "63bc940c-012d-478d-a799-ad74181bc3fb",
      "name": "Divide html columns3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3780,
        1860
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
      },
      "id": "561859bf-6a50-4301-af67-6721e0e2befa",
      "name": "Click19",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4080,
        1860
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
              "name": "direc",
              "value": "C:/Users/Uusario Nuevo Prueba",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        300,
        80
      ],
      "id": "4a2e294f-1faa-4883-b2b4-8b6677788827",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "cea8f321-8bd1-43f5-bbb8-89a1948bd0b1",
      "name": "Save Screenshot18",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3120,
        960
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-BUNGE-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "f03dae97-06c2-4839-8170-f7e98bbd7222",
      "name": "Locate On Screen20",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3260,
        960
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "b9b6f191-f630-4d55-acd1-25bbcff63911",
      "name": "Coordinate Parser18",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3420,
        960
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser18').item.json.x }}, {{ $('Coordinate Parser18').item.json.y }})\""
      },
      "id": "38f6a3c4-1a24-4d55-9b1f-bf9b97fcd0be",
      "name": "Click20",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3560,
        960
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## De Bunge a T6\n**Rellenar**",
        "height": 180,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2800,
        940
      ],
      "typeVersion": 1,
      "id": "6ce1e2a4-e3b5-4cdf-bafb-d04e430f287d",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
      },
      "id": "abea5ff1-1b2f-4002-9f86-46b7cd77dfc6",
      "name": "Save Screenshot19",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3760,
        960
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Terminal 6-CD.png', grayscale=True, confidence=0.8))\"\n"
      },
      "id": "651226d1-01a5-4a0a-8674-11e5c2605bf9",
      "name": "Locate On Screen21",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3900,
        960
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
      },
      "id": "ba92be8b-135c-4624-a581-18550afcf2d0",
      "name": "Coordinate Parser19",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4060,
        960
      ]
    },
    {
      "parameters": {
        "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser19').item.json.x }}, {{ $('Coordinate Parser19').item.json.y }})\""
      },
      "id": "bce6da1e-5923-4ac9-a668-56b0af42fcee",
      "name": "Click21",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4200,
        960
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                3
              ],
              "triggerAtHour": 7,
              "triggerAtMinute": null
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -40,
        -80
      ],
      "id": "f0423092-cd25-40a3-98bf-f03436a446bb",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "DbwBS0zefv26xaJX",
          "mode": "list",
          "cachedResultName": "GenerarControlDocumentario"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ $json.query }}"
          },
          "matchingColumns": [
            "query"
          ],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": true,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1560,
        2180
      ],
      "id": "c8005bcd-a43d-4006-bc1b-cfde0ea3d5f2",
      "name": "Execute Workflow",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const outputData = {};\n\nfor (const item of items) {\n  if (item.json && item.json.fechasCercanas) {\n    for (const fechaCercana of item.json.fechasCercanas) {\n      const documentType = fechaCercana.documento;\n      const name = fechaCercana.nombre;\n\n      if (documentType) {\n        if (!outputData[documentType]) {\n          outputData[documentType] = [];\n        }\n        if (name && !outputData[documentType].includes(name)) {\n          outputData[documentType].push(name);\n        }\n      }\n    }\n  }\n}\n\nreturn [{\n  json: outputData\n}];"
      },
      "id": "489707ad-300d-438a-99d9-422583304ef7",
      "name": "Divide html columns4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        1720
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1400,
        2060
      ],
      "id": "aed17669-1377-4805-98ee-d2f028ec4e79",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "const documentTypeMap = {}; // This map will collect ALL names for each document type across ALL input items\n\nfor (const item of items) {\n  if (item.json && item.json.fechasCercanas) {\n    for (const fechaCercana of item.json.fechasCercanas) {\n      const documentType = fechaCercana.documento;\n      const name = fechaCercana.nombre;\n\n      if (documentType) {\n        if (!documentTypeMap[documentType]) {\n          documentTypeMap[documentType] = []; // Initialize array for this document type if not seen yet\n        }\n        if (name && !documentTypeMap[documentType].includes(name)) {\n          documentTypeMap[documentType].push(name); // Add name if not already present for this docType\n        }\n      }\n    }\n  }\n}\n\nconst output = [];\n// Now, create an output item for each unique document type found in the entire input\nfor (const docType in documentTypeMap) {\n  if (documentTypeMap.hasOwnProperty(docType)) {\n    const namesString = documentTypeMap[docType].join(', '); // Join all collected names for this docType\n    output.push({\n      json: {\n        query: `${docType}: ${namesString}` // Format as \"DocumentType: Name1, Name2, ...\"\n      }\n    });\n  }\n}\n\nreturn output;"
      },
      "id": "0fd5ffa6-7550-48b1-bcee-39def076255f",
      "name": "Divide html columns7",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3620,
        1860
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "DbwBS0zefv26xaJX",
          "mode": "list",
          "cachedResultName": "GenerarControlDocumentario"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ $json.query }}"
          },
          "matchingColumns": [
            "query"
          ],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": true,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        3780,
        2200
      ],
      "id": "345c58b6-c914-41fe-964e-689a99355b0c",
      "name": "Execute Workflow1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3620,
        2080
      ],
      "id": "d24e3e0e-0ebe-4206-b722-21a493b029d4",
      "name": "Loop Over Items1"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-backup",
  "repo_owner": "SimonTeralv",
  "repo_path": "",
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Argentina/Buenos_Aires",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-05-27T19:51:05.000Z",
  "versionId": "0a630c7b-3dd3-4fb9-98dc-538b0e5d64da"
}