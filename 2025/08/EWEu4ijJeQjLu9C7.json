{
  "active": false,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Supabase7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Supabase7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Supabase5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase6": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase5": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase7": {
      "main": [
        [
          {
            "node": "n8n1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-20T17:18:32.002Z",
  "id": "EWEu4ijJeQjLu9C7",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "N8N-BackUp-Testing Export",
  "nodes": [
    {
      "parameters": {},
      "id": "432e21fe-fa52-4c77-9c73-8871e81af5f5",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -380,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "628c3517-6dd2-4342-b8f8-95c042c3a69c",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        140,
        100
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "1b1c708b-6f29-40db-bc6f-aac56cf14e80",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -380,
        180
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "680e2a74-8131-49c5-b744-82b4803caad7",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -860,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416,
        "width": 1413,
        "color": 7
      },
      "id": "1fe09e41-0b1f-4232-9787-344d43e6c326",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -440,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "=sKItisoN4WjUR0bh",
        "mode": "each",
        "options": {}
      },
      "id": "12465585-0472-4aa8-bd20-a8bab070e4ca",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        360,
        120
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Errores"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Texto",
              "fieldValue": "={{ $('Supabase6').item.json.Texto }},{{ $json.message }}\n\n"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        820,
        140
      ],
      "id": "c15e1b33-6d88-437f-88c6-5ee881e4b829",
      "name": "Supabase5",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bd154629-c902-4d90-9b05-b13782b4f671",
              "name": "message",
              "value": "=FailBackUp: {{ $('Loop Over Items').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        680,
        140
      ],
      "id": "6417a44e-4dd0-4f43-ba52-ded8f0978289",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "keyValue": "Errores"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        540,
        140
      ],
      "id": "4e9985df-58e1-4f95-90a3-a83d55c351cb",
      "name": "Supabase6",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "=simonteralv2@gmail.com",
        "subject": "BackUp-Workflows-N8N",
        "emailType": "text",
        "message": "= Backup has completed - workflows have been processed.✅\nErrores: {{ $json.Texto }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        680,
        -40
      ],
      "id": "24b12028-a148-4a27-8ff8-55f481b8f769",
      "name": "Mensaje",
      "webhookId": "c404ddac-28ff-4193-9daf-1220d9fc3cc2",
      "credentials": {
        "gmailOAuth2": {
          "id": "NWtQUZYbGghGDkN1",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "keep": "lastItems"
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        360,
        -40
      ],
      "id": "db2327f6-de46-415d-97d0-a105e0d07ac8",
      "name": "Limit"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Var-Control-Documentario",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "keyValue": "Errores"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        540,
        -40
      ],
      "id": "ed151ef5-afaa-4be1-b4c5-79254b9a2a3f",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Var-Control-Documentario",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "variable",
              "condition": "eq",
              "keyValue": "Errores"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Texto",
              "fieldValue": "=\n\n"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -200,
        100
      ],
      "id": "10a3d9fe-c31c-4b93-a291-f5b5a7082302",
      "name": "Supabase7",
      "credentials": {
        "supabaseApi": {
          "id": "ZvkTz1mTFoOcPh6G",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "b01a09ed-3c24-4708-91c4-95f0daa987df",
      "name": "n8n1",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -60,
        100
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "9InbP3eA3I6HvwbC",
          "name": "n8n account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "C:\\_resourses",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        620,
        520
      ],
      "id": "5660632e-d213-4b90-b8f7-5dee40981ae0",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "081c194d-54cb-418c-a501-f92b4bad45ae",
              "name": "url",
              "value": "={{ $json.download_url }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        360,
        380
      ],
      "id": "08c69fee-ea5d-41d3-b986-37396e531287",
      "name": "Edit Fields"
    }
  ],
  "pinData": {
    "n8n1": [
      {
        "json": {
          "createdAt": "2025-02-25T17:38:47.330Z",
          "updatedAt": "2025-04-30T16:12:56.000Z",
          "id": "0SVyV5xHgrRtzZnv",
          "name": "RPA Library",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, sys; x = {{ x pixel coordinate (ie. 100) }}; y = {{ y pixel coordinate (ie.200) }}; pyautogui.moveTo(x, y)\""
              },
              "id": "dd4177f6-2d69-4678-a160-6427d3afa1b6",
              "name": "Move Mouse",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -880,
                -200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.doubleClick({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "fb3d5a6c-0c0d-4166-831e-d5febeb8d7d5",
              "name": "Double Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -600,
                20
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.rightClick({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "35c19de4-fc06-41cb-9abb-931d1fe480a8",
              "name": "Right Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -600,
                160
              ]
            },
            {
              "parameters": {
                "command": "python -c \"import pyautogui, sys; pyautogui.typewrite(sys.argv[1])\" \"replace what you want typed here\""
              },
              "id": "fdd8aba6-ae21-443d-8801-2eba701e6590",
              "name": "Type",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -340,
                -120
              ]
            },
            {
              "parameters": {
                "command": "python -c \"import pyautogui, sys; pyautogui.press(sys.argv[1])\" \"replace this text with desired key (ie. enter)\"\n"
              },
              "id": "605a28ac-a7d1-4179-b3b7-c02e24687b9f",
              "name": "Press Key",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -340,
                20
              ]
            },
            {
              "parameters": {
                "content": "## Clicking\nMake sure the previous node outputs JSON of X and Y values",
                "height": 757,
                "width": 267
              },
              "id": "390d63b4-2c31-4f35-b16b-171884e400c6",
              "name": "Sticky Note",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -640,
                -260
              ]
            },
            {
              "parameters": {
                "content": "## Movement\n",
                "height": 557,
                "width": 267
              },
              "id": "5e45e3cd-8b6c-4355-a3e1-794f56f684c3",
              "name": "Sticky Note1",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -920,
                -260
              ]
            },
            {
              "parameters": {
                "content": "## Keyboard\nReplace text between the ''s with your desired text or string expression",
                "height": 757,
                "width": 267,
                "color": 5
              },
              "id": "5e4306d6-1788-4061-ba3c-fe1cdaae4dcd",
              "name": "Sticky Note2",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -360,
                -260
              ]
            },
            {
              "parameters": {
                "content": "## Screenshot",
                "height": 557,
                "width": 296.02659800115293,
                "color": 6
              },
              "id": "830a6acd-b395-4fdb-ae8b-015ff2b20c59",
              "name": "Sticky Note3",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -80,
                -260
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'{{insert file path of image to be found on screen (ie. C:\\Convaiy Screenshot\\MainScreen.png)}}', grayscale=False, confidence=0.85))\""
              },
              "id": "5e410e94-8055-4534-a36f-db4946eca6a6",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                240,
                -80
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "content": "## Utility/ Examples\n\nRead notes in node for use and additional instructions\n\n\n",
                "height": 1095,
                "width": 268,
                "color": 3
              },
              "id": "9937bcde-5876-4e91-b2e5-84a2d13aedf8",
              "name": "Sticky Note6",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                820,
                -260
              ]
            },
            {
              "parameters": {
                "content": "# Convaiy N8N RPA Library\n## How to Use\n\nTo use this library simply import the file into a N8n workflow and follow the included Setup instructions to get the necessary dependencies working on your local device. \n\nThe nodes will then be conveniently available on your workflow ready to copy and paste whenever needed. Each node contains a {{ double curly brace }} expression with information about what sort of data they should contain and examples of what it should look like. Make sure to remove or replace the braces when filling in with your own data.\n\nThe code is all readily available through each node for further troubleshooting and your future customization. \n\n## How It Works\nThis library includes a variety of RPA tools to automate your digital tasks. Most ways you would interact with a computer are able to be simulated by this library such as moving the cursor, clicking, and typing.\n\nThese input features are empowered by multiple visual understanding strategies.\nTo know where to click and move, the interface needs to be detected and mapped. This is accomplished by:\n-Locating Images within the screen\n    Use a pre-saved image to detect that image on a new screenshot. (ie. a picture of a button can be located on your current screen) \n\n-Local OCR (text detector) with coordinates\n     Run AI on your own computer to have it find the words and locations of the words on your screen.\n\n-AI LLM image analysis\n     Have AI point to the location on a screen just by text prompting. This feature is ever improving with frontier models' updates.\n\nThis visual understanding toolset allows for more dynamic automations that are more reliable and fluid.\n\n \n## Setup Instructions\n### Required Downloads\nPython (latest version: https://www.python.org/downloads/)\n\nAdd pip directory to PATH environmental variables (ask AI for assistance)\n\nPip install Pyautogui\nPip install Pillow\nPip install opencv-python\n### Optional Features\n\n* LLM Dependencies\nhttps://imagemagick.org/ to format screenshots to proper resolution\n\n* Local OCR Nodes\n\nPip install pytesseract\nInstall Tesseract (https://github.com/tesseract-ocr/tesseract?tab=readme-ov-file)\n(If node doesn't work after installation with installer try pip install pytesseract pillow opencv-python numpy to get all dependencies)\n* Keep n8n running in the background without a keeping a terminal open\n\nPM2 (https://blog.n8n.io/how-to-set-up-n8n-via-pm2/#how-to-run-n8n-with-pm2-on-windows)\n\n* Make the window console smaller so it dosen't block your screenshots\n\nControl Panel, System, Developer Settings, Default Terminal: Set to Windows Console Host.\n\nUsing the execute node within n8n copy and paste in and run 'for /L %i in (1,1,10) do (echo %i & ping -n 2 127.0.0.1 >nul)' This will bring up the console long enough for you to do the next step.\n\nright click, settings, move startup location to 2000,0), right click window frame, properties, layout, \n\n### Further Reading\nPyAutoGUI documentation\nhttps://pyautogui.readthedocs.io/en/latest/",
                "height": 1465,
                "width": 707,
                "color": 7
              },
              "id": "d8162d42-35a9-4f0f-8904-3eb632f9159b",
              "name": "Sticky Note5",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -1640,
                -260
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.hscroll({{scroll amount by click (ie. -10) [negative for left]}})\""
              },
              "id": "33fde1fe-bb03-4920-bf4d-f36f12bc3274",
              "name": "Horizontal Scroll",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -880,
                120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.scroll({{scroll amount by clicks (ie. -10) [negative for down]}})\""
              },
              "id": "92e53ca5-bd72-44e8-8a97-5594ca4aea8a",
              "name": "Vertical Scroll",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -880,
                -40
              ]
            },
            {
              "parameters": {
                "fileSelector": "C:/Users/Administrator/Screenshot/mainscreenshot.png",
                "options": {
                  "dataPropertyName": "data"
                }
              },
              "id": "0a40c97f-1594-4dc6-9fd1-bd68bfb77da4",
              "name": "Read File",
              "type": "n8n-nodes-base.readWriteFile",
              "typeVersion": 1,
              "position": [
                -40,
                -20
              ],
              "alwaysOutputData": false,
              "notesInFlow": true,
              "notes": "Turn files and images into binary that can be passed through n8n nodes and sent through other api's\n\nUse forwardslashes and save file in a high level folder outside of n8n\n"
            },
            {
              "parameters": {
                "command": "=start {{ your browser of choice Edge=msedge Chrome=chrome Firefox=firefox(ie. msedge) }} {{ the URL you would like the browser to open to (ie.https://www.linkedin.com/search) }}"
              },
              "id": "f9d23ab2-eec9-485f-b6b0-af551a80ec70",
              "name": "Open Browser To",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                880,
                -120
              ],
              "notesInFlow": true,
              "notes": "New Window start \"\" {{ $json['Web Browser'] }} --new-window {{ $json.URL }}\n"
            },
            {
              "parameters": {
                "command": "python -c \"import pyautogui, sys; pyautogui.hotkey('replace this text between with desired first key (ie. ctrl)', 'replace this text between with desired second key (ie. w)')"
              },
              "id": "c11abfff-63f2-49f0-8c58-978e15a4d127",
              "name": "Press Multikey",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -340,
                160
              ]
            },
            {
              "parameters": {
                "operation": "binaryToPropery",
                "options": {}
              },
              "id": "6ae8c515-8ea4-429e-9108-e539f6214c6b",
              "name": "Extract from File",
              "type": "n8n-nodes-base.extractFromFile",
              "typeVersion": 1,
              "position": [
                -400,
                580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\" "
              },
              "id": "c3dd89f3-3db8-4080-b73c-9fb6ecea97b8",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                20,
                580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'{{ your preffered file path to save the screenshot at (ie. C:\\Users\\Administrator\\.n8n\\Screenshots\\MainScreen.png) }}')\""
              },
              "id": "f0478f36-cc99-4c59-b9bc-c18f9352323a",
              "name": "Take Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -740,
                580
              ]
            },
            {
              "parameters": {
                "fileSelector": "={{ the updated file save path of your reformatted screenshot. make sure to use forward slashes and the file is outside of the n8n directory. ie. C:/Convaiy Screenshot/MainScreen.png }}",
                "options": {
                  "dataPropertyName": "data"
                }
              },
              "id": "7fd85c7b-2ea2-421b-9c7c-a0f12cf4afb5",
              "name": "Get Screenshot",
              "type": "n8n-nodes-base.readWriteFile",
              "typeVersion": 1,
              "position": [
                -400,
                740
              ],
              "alwaysOutputData": false,
              "notesInFlow": true,
              "notes": "Use forwardslashes and save file in a high level folder outside of n8n"
            },
            {
              "parameters": {
                "command": "=\"{{ image magick .exe file path (ie. C:\\Program Files\\ImageMagick-7.1.1-Q16-HDRI\\magick.exe) }}\" \"{{ image path of saved screenshot (ie C:\\Convaiy Screenshot\\MainScreen.png) }}\" -resize 1366x768 \"{{ desired output file path for formatted screenshot make. Make sure file is higher level than the n8n folder or else it will be restricted (ie. C:\\Convaiy Screenshot\\MainScreen.png) }}\"\n"
              },
              "id": "b3097e4c-fd51-4069-b81f-9a26c1cb147a",
              "name": "Format Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -580,
                580
              ]
            },
            {
              "parameters": {
                "content": "## Example of Using Anthropic LLM image analysis to find X and y coordinates of a given prompt.",
                "height": 480,
                "width": 1128
              },
              "id": "7efbdb22-d4c2-4998-bd05-a651e17cf165",
              "name": "Sticky Note8",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -920,
                520
              ]
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -900,
                580
              ],
              "id": "2856c65b-712c-4496-bdef-66eed8d972a6",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'{{ Insert folder path to save screen shot using back slashes (ie. C:\\Convaiy Screenshot\\MainScreen.png) }}')\""
              },
              "id": "659e8c0e-5cd0-4202-97f7-060ce97c574c",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -40,
                -180
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f89952b7-8009-4eb9-98e2-cba102ceca2e",
              "name": "Parse pixel coordinates",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                420,
                -80
              ],
              "notesInFlow": true,
              "notes": "Optional parser\n\nI've had errors with this code on multiple devices, so paste the code and input into gpt and have it update it to fix the error"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "the phrase you're looking for...",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "cadd2449-dde1-4a88-842a-ac006719cbd0",
              "name": "Find OCR Word Input",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                440,
                220
              ],
              "notesInFlow": false,
              "notes": "Optional parser that helps manage the output of local ocr"
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "1bd9beb4-d39d-45b7-a149-52b8ee2a38f1",
              "name": "OCR Word",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                620,
                220
              ],
              "notesInFlow": false,
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.anthropic.com/v1/messages",
                "authentication": "predefinedCredentialType",
                "nodeCredentialType": "anthropicApi",
                "sendHeaders": true,
                "headerParameters": {
                  "parameters": [
                    {
                      "name": "anthropic-version",
                      "value": "2023-06-01"
                    },
                    {
                      "name": "Content-Type",
                      "value": "application/json"
                    }
                  ]
                },
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"model\": \"claude-3-5-sonnet-20241022\",\n    \"max_tokens\": 1000,\n    \"temperature\": 0,\n    \"system\": \"You are an expert at locating information on the screen and providing the corresponding x and y coordinates. You only respond with the coordinates and nothing else.\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": [\n                \n                {\n                    \"type\": \"text\",\n                    \"text\": \"provide the (x,y) coordinates for the {{ text prompt for the model to search for (ie. Spotify Icon) }}\"\n                },\n                {\n                    \"type\": \"image\",\n                    \"source\": {\n                        \"type\": \"base64\",\n                        \"media_type\": \"image/png\",\n                        \"data\": \"{{ $('Extract from File').item.json.data }}\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n",
                "options": {}
              },
              "id": "7b61c740-b710-43c3-976c-fd9ed878b8e1",
              "name": "Anthropic Detection 3",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -260,
                580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\" "
              },
              "id": "c98e85be-1b81-4b26-b5cf-14fb8c486603",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -600,
                -140
              ]
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.anthropic.com/v1/messages",
                "authentication": "predefinedCredentialType",
                "nodeCredentialType": "anthropicApi",
                "sendHeaders": true,
                "headerParameters": {
                  "parameters": [
                    {
                      "name": "anthropic-version",
                      "value": "2023-06-01"
                    },
                    {
                      "name": "Content-Type",
                      "value": "application/json"
                    }
                  ]
                },
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"model\": \"claude-3-5-sonnet-20241022\",\n    \"max_tokens\": 1000,\n    \"temperature\": 0,\n    \"system\": \"You are an expert at locating information on the screen and providing the corresponding x and y coordinates. You only respond with the coordinates and nothing else.\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": [\n                \n                {\n                    \"type\": \"text\",\n                    \"text\": \"provide the (x,y) coordinates for the {{ text prompt for the model to search for (ie. Spotify Icon) }}\"\n                },\n                {\n                    \"type\": \"image\",\n                    \"source\": {\n                        \"type\": \"base64\",\n                        \"media_type\": \"image/png\",\n                        \"data\": \"{{ $('Extract from File').item.json.data }}\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n",
                "options": {}
              },
              "id": "0c6f981f-0017-401c-b708-50c2e8b1d79e",
              "name": "Anthropic Detection ",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                280,
                500
              ],
              "notes": "example prompt and api call of how to get the anthropic claude 3.5 model to find x and y coordinates of a screenshot"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.openai.com/v1/chat/completions",
                "authentication": "predefinedCredentialType",
                "nodeCredentialType": "openAiApi",
                "sendHeaders": true,
                "headerParameters": {
                  "parameters": [
                    {
                      "name": "Content-Type",
                      "value": "application/json"
                    }
                  ]
                },
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Extract Start, End, and Descriptions from the OCR results.Today's date for context of year {{ new Date().toISOString().slice(0, 10) }}.\" \n    },\n    {\n      \"role\": \"user\",\n      \"content\": {{ JSON.stringify($json.content) }}\n    }\n  ],\n  \"response_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"name\": \"events\",\n      \"description\": \"List of events with their details\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"events\": {\n            \"type\": \"array\",\n            \"description\": \"List of events with their details\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"Start\": {\n                  \"type\": \"string\",\n                  \"description\": \"Start date and time of event in this format yyyy-mm-dd hh:mm:ss\"\n                },\n                \"End\": {\n                  \"type\": \"string\",\n                  \"description\": \"End date and time of event in this format yyyy-mm-dd hh:mm:ss\"\n                },\n                \"Description\": {\n                  \"type\": \"string\",\n                  \"description\": \"Additional details of the specific event like but not limited to accepted, keyman, and location\"\n                }\n              },\n              \"required\": [\"Start\", \"End\", \"Description\"],\n              \"additionalProperties\": false\n            }\n          }\n        },\n        \"required\": [\"events\"],\n        \"additionalProperties\": false\n      }\n    }\n  }\n}\n",
                "options": {}
              },
              "id": "f2f9e481-dfa2-4b40-8b9b-f8589c6ea1fe",
              "name": "Open AI Structured Output Example",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                880,
                60
              ],
              "notes": "An example API call demonstrating how to use Open Ai's structured output function.\n\nUseful for parsing image analysis results"
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; pytesseract.pytesseract.tesseract_cmd = r'{{ tesseract.exe file path ie. C:\\Program Files\\Tesseract-OCR\\tesseract.exe }}'; image_path = r'{{ file path of image to be OCR'd ie. C:\\Users\\Administrator\\.n8n\\Screenshots\\MainScreen.png}}'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(2).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 11'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "0258de34-552f-48e0-85da-a423e1db2cf1",
              "name": "Local OCR Tesseract",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                260,
                220
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "resource": "image",
                "operation": "analyze",
                "modelId": {
                  "__rl": true,
                  "value": "gpt-4-1106-vision-preview",
                  "mode": "list",
                  "cachedResultName": "GPT-4-1106-VISION-PREVIEW"
                },
                "text": "You're provided a screenshot of a Calander with scheduled shifts for the upcoming month. Accurately return all the shifts listed. Make sure to include the Date, time range (usually provided in hham-hhpm format), location, and any labels such as keyman",
                "inputType": "base64",
                "options": {}
              },
              "id": "78f1808d-2718-441b-a2b5-6687ef4fccd8",
              "name": "Chat GPT Non-Structured output OCR example",
              "type": "@n8n/n8n-nodes-langchain.openAi",
              "typeVersion": 1.4,
              "position": [
                880,
                300
              ],
              "notes": "Example of how to prompt GPT Vision to OCR an image and provide semi-structured output"
            },
            {
              "parameters": {
                "content": "## Visual Understanding Strategies\nThese are three methods to programmatically detect and specify the location of certain elements on the screen.\n\nSimply, they are methods to find the X and Y coordinates for a specific item.\n\nThese are listed in order of reliablility but not capability. \n\n\n\n\n\n\n\n\n\n\n\n\n\nLocate on Screen uses pyautogui's library to find a needle in the haystack. The needle is the image you're looking for (ie. a cropped image of the Spotify logo) and the hay is the screenshot of the entire screen. It compares the pixel values of the given needle image across the hay image until it finds a match. Consistent but sensitive to change and requires you to screen shot and crop the needle image you're looking for.\n\n\n\n\n\n\n\n\n\n\n\n\n\nLocal OCR uses an opensource software called py Tesseract that uses Computer Vision to detect text. It can run locally on your device and be run multiple times quickly if it dosen't find what you're looking for on the first pass. More compute intense than locate on screen and only works with text which is Locate on Screen's weakness. Scans the entire screen for text then the parser find you're desired phrase and the pixel location of that text. \n\n\n\n\n\n\n\n\n\n\n\n\n\nConstantly updating and possibly obsolete by the time of your reading this. As of Q4 2024 LLM's like Anthropic, Gemini, and Molmo are gaining pointing capabilities. This means you can describe and element and the LLM will provide the pixel coordinates for its location on the screen. It's reliability is improving and it's flexibility is tremendous. An example workflow for Anthropic's pointing feature is provided below",
                "height": 1095.596502064548,
                "width": 592.1010909632478,
                "color": 2
              },
              "id": "0f0c892f-3d24-4620-9c8e-21cfa90b9dbf",
              "name": "Sticky Note4",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                220,
                -260
              ]
            },
            {
              "parameters": {
                "jsCode": "// Access the content array and get the first item's text (e.g., \"(929,800)\")\nconst input = $json.content[0].text;\n\n// Ensure input is processed as a string and remove parentheses\nconst cleanedInput = input.replace(/[()]/g, \"\");\nconst [x, y] = cleanedInput.split(',').map(value => parseInt(value.trim(), 10));\n\n// Calculate the scaling ratios\nconst scaleX = 1920 / 1366;\nconst scaleY = 1080 / 768;\n\n// Convert the x and y coordinates to the 1920x1080 scale\nconst originalX = Math.round(x * scaleX);\nconst originalY = Math.round(y * scaleY);\n\n// Return adjusted x and y as separate objects\nreturn [\n  {\n    json: {\n      x: originalX,\n      y: originalY\n    }\n  }\n];\n"
              },
              "id": "1aa72509-cfcc-47a4-8942-c9c4c0f1a850",
              "name": "Pixel Calculation",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -100,
                580
              ],
              "notes": "Make sure to replace the resolution value to the monitor size your using ie. 1920x1080"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ x value ie 100 }}, {{ y value ie. 200 }}); pyautogui.typewrite('{{ what you want typed }}')\""
              },
              "id": "88ba7620-ba2e-4707-877f-5922335f3c39",
              "name": "Click and Type",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -420,
                300
              ],
              "notesInFlow": true,
              "notes": "Use this if the type node is not registering"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math; reference_point = (960, 540); matches = list(pyautogui.locateAllOnScreen(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\Boton-Close.png')); closest_match = min(matches, key=lambda match: math.sqrt((pyautogui.center(match)[0] - reference_point[0])**2 + (pyautogui.center(match)[1] - reference_point[1])**2)); pyautogui.click(pyautogui.center(closest_match))\"\n"
              },
              "id": "6542b982-3047-4360-8f8e-f1ec4b384a27",
              "name": "Closest Close 'X'",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1140,
                -140
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "content": "## Modulo Close Tab\nEste modulo busca la X mas cercada a la mitad derecha de la pestaña que se quiere cerrar, necesita su imagen",
                "height": 277,
                "width": 387,
                "color": 4
              },
              "id": "101927f5-efd2-4ebb-a4f7-006cfd85686f",
              "name": "Sticky Note7",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                1100,
                -260
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from pypdf import PdfWriter; merger = PdfWriter(); merger.append(r'{{pdf route 1}}'); merger.append(r'{{pdf route 2}}');merger.write(r'{{pdf destination}}'); merger.close()\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1140,
                160
              ],
              "id": "ffd00537-d52d-4532-8a41-852d43ba0838",
              "name": "PDF Merging Tool"
            },
            {
              "parameters": {
                "content": "## PDF Merging Tool\nEste modulo une los diferentes pdf que el usuario ingrese y lo descarga en la dirección especificada",
                "height": 277,
                "width": 387,
                "color": 4
              },
              "id": "5a47157a-3bc0-412e-bdf9-7e5cf84ab071",
              "name": "Sticky Note9",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                1100,
                40
              ]
            },
            {
              "parameters": {
                "content": "## Get Table Tool\nEste modulo permite acceder a la informacion de una tabla html en una pagina web, si la misma requiere loggin se necesita crear una secion de google. Se agrega una version con una columna especifica.",
                "height": 437,
                "width": 427,
                "color": 4
              },
              "id": "7a14d9fd-e75f-4e4c-8e74-893cef607690",
              "name": "Sticky Note10",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                1100,
                340
              ]
            },
            {
              "parameters": {
                "content": "## Get Table Tool\nEste modulo permite dividir una tabla para trabajar con cada uno de sus celdas por separado. \nLa otra cuenta la cantidad de filas.",
                "height": 437,
                "width": 407,
                "color": 4
              },
              "id": "f8009463-ea25-4155-9c03-626d78d8fdfe",
              "name": "Sticky Note11",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                1520,
                340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab);driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [row.find_elements(By.TAG_NAME, 'td')[3].text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for row in rows if len(row.find_elements(By.TAG_NAME, 'td')) > 3 and row.find_elements(By.TAG_NAME, 'td')[3].text.strip()]; [print(json.dumps({'columna_4': item})) for item in data]\""
              },
              "id": "56a06eb5-d44b-4bf8-a0fc-87d253559a22",
              "name": "Get Column (Ej.3)",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1140,
                640
              ]
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  try {\n    const parsedLine = JSON.parse(line);\n    return parsedLine;  // Puedes procesar más si es necesario\n  } catch (e) {\n    return null;  // Manejo de error si una línea no es JSON válido\n  }\n}).filter(line => line !== null);  // Filtramos valores nulos si no se pudo parsear alguna línea\n\n// Establecer la salida como el número de items\nreturn [\n  {\n    json: {\n      itemCount: lines.length  // Devolvemos el número de objetos procesados\n    }\n  }\n];\n"
              },
              "id": "30025a46-3436-4f98-ae70-2b560d768338",
              "name": "ItemCount html columns",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1600,
                620
              ]
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Establecer la salida como el array de objetos\nreturn lines.map(line => {\n  return { json: line };  // Formateamos cada línea como un objeto JSON\n});"
              },
              "id": "942da866-f7ce-4397-8df0-0877bec899a3",
              "name": "Divide html columns",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1600,
                480
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
              },
              "id": "39d1be8d-8a87-430b-b73c-d66f13ff495f",
              "name": "Get Table - V1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1140,
                480
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; print(json.dumps(data, indent=2))\""
              },
              "id": "fc481bfe-ec4c-4f51-8c60-3263bd1a57e0",
              "name": "Get Table - V2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1340,
                480
              ]
            },
            {
              "parameters": {
                "command": "=start \"\" \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --remote-debugging-port=1313 --user-data-dir=\"C:\\Users\\simon\\.n8n\\chromeprofile\" https://controldocumentario.com/Login.aspx"
              },
              "id": "c509791a-2502-46c0-b626-9adaa75a5826",
              "name": "OpenBrowserCmd",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1540,
                -140
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "content": "## Modulo Open Browser Sesion \nEste modulo abre una pestaña de google de una sesion especifica para pasar Logins",
                "height": 277,
                "width": 387,
                "color": 4
              },
              "id": "78a9aae2-6df2-4cb2-b1c4-f1aaba0717c6",
              "name": "Sticky Note12",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                1500,
                -260
              ]
            },
            {
              "parameters": {
                "content": "## Get Table Tool\nEste modulo permite dividir una tabla para trabajar con cada uno de sus celdas por separado. \nLa otra cuenta la cantidad de filas.",
                "height": 437,
                "width": 407,
                "color": 4
              },
              "id": "bd640178-7ad9-4797-bbe7-f85889ed7e85",
              "name": "Sticky Note13",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                1900,
                -260
              ]
            }
          ],
          "connections": {
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Parse pixel coordinates",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Extract from File": {
              "main": [
                [
                  {
                    "node": "Anthropic Detection 3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Take Screenshot2": {
              "main": [
                [
                  {
                    "node": "Format Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Screenshot": {
              "main": [
                [
                  {
                    "node": "Extract from File",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Format Screenshot": {
              "main": [
                [
                  {
                    "node": "Get Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Take Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Find OCR Word Input": {
              "main": [
                [
                  {
                    "node": "OCR Word",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Anthropic Detection 3": {
              "main": [
                [
                  {
                    "node": "Pixel Calculation",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract": {
              "main": [
                [
                  {
                    "node": "Find OCR Word Input",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Pixel Calculation": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "c09b5424-3de2-4a9a-a8b0-300197c9bd26",
          "triggerCount": 0,
          "tags": [
            {
              "createdAt": "2025-02-25T13:53:03.729Z",
              "updatedAt": "2025-02-25T13:53:03.729Z",
              "id": "9fssgBnptdZHZ04W",
              "name": "updated library"
            },
            {
              "createdAt": "2025-02-25T13:53:03.740Z",
              "updatedAt": "2025-02-25T13:53:03.740Z",
              "id": "f0G6tZbPfSP7GNtT",
              "name": "Testing"
            }
          ]
        }
      },
      {
        "json": {
          "createdAt": "2025-07-14T13:03:07.924Z",
          "updatedAt": "2025-07-14T13:46:29.000Z",
          "id": "17N00iFuCAFeCF37",
          "name": "Sincronización-Sheets-Supabase",
          "active": true,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -1340,
                -400
              ],
              "id": "1ee429d2-fa01-4acc-9b8a-63f23c22a163",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -900,
                -280
              ],
              "id": "b9fbb8e1-8cd7-446a-8e4b-490560a81e29",
              "name": "Loop Over Items"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "PruebaSincronizacionUsuarios",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "Nombre en portales",
                      "keyValue": "={{ $json['NOMBRE EN PORTALES'] }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -680,
                -280
              ],
              "id": "0041dd9d-4957-4825-98b9-4dd4e53f17ca",
              "name": "Supabase",
              "alwaysOutputData": true,
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "documentId": {
                  "__rl": true,
                  "value": "https://docs.google.com/spreadsheets/d/1ejt9pbirVSipWiIABlhbup_za3_P8rdMEoJlFV-VEqs/edit?gid=0#gid=0",
                  "mode": "url"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "Hoja 1",
                  "mode": "name"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleSheets",
              "typeVersion": 4.5,
              "position": [
                -1120,
                -280
              ],
              "id": "a43cceeb-8e0f-4184-aee4-3b85e172814c",
              "name": "Google Sheets",
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "fVogXXZQhTIUJMyk",
                  "name": "Google Sheets account"
                }
              }
            },
            {
              "parameters": {
                "tableId": "PruebaSincronizacionUsuarios",
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Nombre en portales",
                      "fieldValue": "={{ $('Loop Over Items').item.json['NOMBRE EN PORTALES'] }}"
                    },
                    {
                      "fieldId": "La Segunda",
                      "fieldValue": "={{ $('Loop Over Items').item.json['LA SEGUNDA (ADM)'] }}"
                    },
                    {
                      "fieldId": "OLS-Secret",
                      "fieldValue": "={{ $('Loop Over Items').item.json.PASS }}"
                    },
                    {
                      "fieldId": "CUIL",
                      "fieldValue": "={{ $('Loop Over Items').item.json.CUIL }}"
                    },
                    {
                      "fieldId": "ClaveFiscal",
                      "fieldValue": "={{ $('Loop Over Items').item.json['CLAVE FISCAL'] }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -40,
                -280
              ],
              "id": "5f6c87c6-4c97-402f-a907-4db08e59723a",
              "name": "Supabase1",
              "alwaysOutputData": false,
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "PruebaSincronizacionUsuarios",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "Nombre en portales",
                      "condition": "eq",
                      "keyValue": "={{ $('Loop Over Items').item.json['NOMBRE EN PORTALES'] }}"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Nombre en portales",
                      "fieldValue": "={{ $('Loop Over Items').item.json['NOMBRE EN PORTALES'] }}"
                    },
                    {
                      "fieldId": "La Segunda",
                      "fieldValue": "={{ $('Loop Over Items').item.json['LA SEGUNDA (ADM)'] }}"
                    },
                    {
                      "fieldId": "OLS-Secret",
                      "fieldValue": "={{ $('Loop Over Items').item.json.PASS }}"
                    },
                    {
                      "fieldId": "CUIL",
                      "fieldValue": "={{ $('Loop Over Items').item.json.CUIL }}"
                    },
                    {
                      "fieldId": "ClaveFiscal",
                      "fieldValue": "={{ $('Loop Over Items').item.json['CLAVE FISCAL'] }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -200,
                -280
              ],
              "id": "d58dbc09-af43-4e69-bd0b-a72c2d1745e4",
              "name": "Supabase2",
              "alwaysOutputData": false,
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "77cc0d01-86be-46ce-a13d-1ea19620c416",
                      "leftValue": "={{ $('Supabase').item.json['Nombre en portales'] }}",
                      "rightValue": "={{ $('Loop Over Items').item.json['NOMBRE EN PORTALES'] }}",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    },
                    {
                      "id": "8e952d4b-d412-4902-b371-1a2512d7591d",
                      "leftValue": "={{ $('Supabase').item.json['La Segunda'] }}",
                      "rightValue": "={{ $('Loop Over Items').item.json['LA SEGUNDA (ADM)'] }}",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    },
                    {
                      "id": "0f46be1f-fcb3-4ce8-8949-51fa689145ec",
                      "leftValue": "={{ $('Supabase').item.json['OLS-Secret'] }}",
                      "rightValue": "={{ $('Loop Over Items').item.json.PASS }}",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    },
                    {
                      "id": "b99e99f8-5d3a-40e4-9e01-db61a6bb476e",
                      "leftValue": "={{ $('Supabase').item.json.CUIL }}",
                      "rightValue": "={{ $('Loop Over Items').item.json.CUIL }}",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    },
                    {
                      "id": "537ff66e-3fea-459a-98a8-8cad9037e832",
                      "leftValue": "={{ $('Supabase').item.json.ClaveFiscal }}",
                      "rightValue": "={{ $('Loop Over Items').item.json['CLAVE FISCAL'] }}",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {
                  "ignoreCase": false
                }
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -360,
                -280
              ],
              "id": "03f1d09a-761f-40c2-8d08-2a2105c68f44",
              "name": "If",
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "77cc0d01-86be-46ce-a13d-1ea19620c416",
                      "leftValue": "={{ $('Supabase').item.json['Nombre en portales'] }}",
                      "rightValue": "={{ $('Loop Over Items').item.json['NOMBRE EN PORTALES'] }}",
                      "operator": {
                        "type": "string",
                        "operation": "exists",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {
                  "ignoreCase": false
                }
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -540,
                -280
              ],
              "id": "d1e14c3d-04bd-4582-ba7c-ac906aaf7b2a",
              "name": "If1",
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "pollTimes": {
                  "item": [
                    {
                      "mode": "everyMinute"
                    }
                  ]
                },
                "documentId": {
                  "__rl": true,
                  "value": "https://docs.google.com/spreadsheets/d/1DJfD4FwW540qXmTvlYxnzZfyjIVMKl-kez3cNnrZaXg/edit?gid=0#gid=0",
                  "mode": "url"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "gid=0",
                  "mode": "list",
                  "cachedResultName": "ALTAS",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1DJfD4FwW540qXmTvlYxnzZfyjIVMKl-kez3cNnrZaXg/edit#gid=0"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleSheetsTrigger",
              "typeVersion": 1,
              "position": [
                -1340,
                -160
              ],
              "id": "73f3f9d5-ac79-4ae8-a45f-b47f98788612",
              "name": "Google Sheets Trigger1",
              "credentials": {
                "googleSheetsTriggerOAuth2Api": {
                  "id": "btUedw3LgjvUsSFh",
                  "name": "Google Sheets Trigger account"
                }
              }
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Google Sheets",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [],
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Sheets": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Sheets Trigger1": {
              "main": [
                [
                  {
                    "node": "Google Sheets",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Google Sheets Trigger1": {
              "documentId": "1DJfD4FwW540qXmTvlYxnzZfyjIVMKl-kez3cNnrZaXg",
              "sheetId": 0,
              "lastRevision": 2392,
              "lastRevisionLink": "https://docs.google.com/spreadsheets/export?id=1DJfD4FwW540qXmTvlYxnzZfyjIVMKl-kez3cNnrZaXg&revision=2392&exportFormat=xlsx"
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "66acf2f2-a30f-4710-ae1f-e7245024b326",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-04-08T13:10:03.438Z",
          "updatedAt": "2025-05-08T19:47:17.000Z",
          "id": "1aJKQtkbFifzy717",
          "name": "File exist",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -2280,
                1120
              ],
              "id": "02b42a13-d537-4e67-a9ef-3e94b87d1d5a",
              "name": "Input"
            },
            {
              "parameters": {
                "batchSize": "=1",
                "options": {}
              },
              "id": "27133fea-792e-4f34-88d9-0fe95d32749a",
              "name": "Loop Over Items1",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -1680,
                1120
              ]
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -1240,
                1240
              ],
              "id": "a2ee6050-9e9e-43e7-9b29-de9226adcdc7",
              "name": "If1"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();from pypdf import PdfWriter; merger = PdfWriter();apellido = '{{ $('Loop Over Items1').item.json.Apellido }}';nombre = '{{ $('Loop Over Items1').item.json.Nombre }}';mes = current_date.strftime('%m - %B %Y');merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\Polisa\\\\CopiaPolisa-'+nombre+' '+apellido+'-'+current_date.strftime('%B')+'.pdf'); merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\Polisa\\\\PolisaOriginal-'+nombre+' '+apellido+'-'+current_date.strftime('%B')+'.pdf'); merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-BUNGE ARGENTINA S.A '+nombre+' '+apellido+'-marzo.pdf'); merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-GENERACION LITORAL S.A '+nombre+' '+apellido+'-marzo.pdf'); merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-PROMAIZ S.A '+nombre+' '+apellido+'-marzo.pdf');merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-STYROPEK S.A '+nombre+' '+apellido+'-marzo.pdf');merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-T6 INDUSTRIAL S.A '+nombre+' '+apellido+'-marzo.pdf');merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-TERMINAL 6 S.A '+nombre+' '+apellido+'-marzo.pdf');merger.write(r'C:/Users/simon/Desktop/'+mes+'/Control Documentario/Polisa acc. personales/Polisa acc. personales-'+nombre+' '+apellido+'-'+current_date.strftime('%B')+'.pdf'); merger.close()\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -780,
                1240
              ],
              "id": "47456d7b-5bf3-4823-9311-e323b1a525df",
              "name": "Fin.3"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -1240,
                1520
              ],
              "id": "95a04744-c0f5-4d57-8d31-88ac81fc31eb",
              "name": "If2"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now(); mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\"\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1380,
                1520
              ],
              "id": "c8012d38-b7eb-49cb-ad03-90cfd0caa2a4",
              "name": "CheckIfExist3"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();apellido = '{{ $('Loop Over Items1').item.json.Apellido }}';nombre = '{{ $('Loop Over Items1').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaLS-{nombre}-{mesdirec}.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaOriginalLS-{nombre}-{mesdirec}.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1080,
                1240
              ],
              "id": "67d310e0-15c4-44c2-a436-fe3aea5b61b1",
              "name": "CheckIfExist4"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items1').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaLS-{nombre}-{mesdirec}.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaOriginalLS-{nombre}-{mesdirec}.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1080,
                1520
              ],
              "id": "9ec87850-843e-4324-a7be-cd39157f0587",
              "name": "CheckIfExist5"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -940,
                1240
              ],
              "id": "8c0568ae-1fcb-4ef3-887f-e9c46410a041",
              "name": "If3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();from pypdf import PdfWriter; merger = PdfWriter();apellido = '{{ $('Loop Over Items1').item.json.Apellido }}';nombre = '{{ $('Loop Over Items1').item.json.Nombre }}';mes = current_date.strftime('%m - %B %Y');merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\Polisa\\\\CopiaPolisa-'+nombre+' '+apellido+'-'+current_date.strftime('%B')+'.pdf'); merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\Polisa\\\\PolisaOriginal-'+nombre+' '+apellido+'-'+current_date.strftime('%B')+'.pdf'); merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-BUNGE ARGENTINA S.A '+nombre+' '+apellido+'-marzo.pdf'); merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-GENERACION LITORAL S.A '+nombre+' '+apellido+'-marzo.pdf'); merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-PROMAIZ S.A '+nombre+' '+apellido+'-marzo.pdf');merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-STYROPEK S.A '+nombre+' '+apellido+'-marzo.pdf');merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-T6 INDUSTRIAL S.A '+nombre+' '+apellido+'-marzo.pdf');merger.append(r'C:\\\\Users\\\\simon\\\\Desktop\\\\'+current_date.strftime('%m - %B %Y')+'\\\\Descargas\\\\LaSegunda\\\\CNR\\\\CNR-TERMINAL 6 S.A '+nombre+' '+apellido+'-marzo.pdf');merger.write(r'C:/Users/simon/Desktop/'+mes+'/Control Documentario/Polisa acc. personales/Polisa acc. personales-'+nombre+' '+apellido+'-'+current_date.strftime('%B')+'.pdf'); merger.close()\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -780,
                1520
              ],
              "id": "f90a9736-50bd-44af-962e-e85a8fd0ced3",
              "name": "Fin.4"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -940,
                1520
              ],
              "id": "3ef89cfc-9571-4adf-a3d3-6dc295b70bbe",
              "name": "If4"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; msg = 'El usuario {{ $('Loop Over Items1').item.json['Nombre']}} no tiene CNR'; print(msg)\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1080,
                1680
              ],
              "id": "6f18989b-8ce0-4a03-96f8-d66c946f840d",
              "name": "Execute Command2"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.alert('El usuario {{ $('Loop Over Items1').item.json['Nombre']}} no tiene alguna Poliza')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -780,
                1680
              ],
              "id": "d11e6048-e371-44df-85b1-d1495fab9958",
              "name": "Execute Command3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.alert('El usuario {{ $('Supabase1').item.json['Nombre']}} no tiene alguna Poliza')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -780,
                1380
              ],
              "id": "06ffbbfb-d65d-47a2-9ffa-dc328e892402",
              "name": "Execute Command4"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase3').item.json.Texto }},{{ $json.stdout }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -500,
                1780
              ],
              "id": "1fcf7d36-5523-4907-9f43-6dd73064e7c1",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1500,
                1240
              ],
              "id": "4ed8deab-d4a2-4325-9239-e1eb4f9c2ad1",
              "name": "Supabase3",
              "alwaysOutputData": true,
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();apellido = '{{ $('Loop Over Items1').item.json.Apellido }}';nombre = '{{ $('Loop Over Items1').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-BUNGE ARGENTINA S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-GENERACION LITORAL S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-PROMAIZ S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-STYROPEK S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-T6 INDUSTRIAL S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-TERMINAL 6 S.A.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\"\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1380,
                1240
              ],
              "id": "ec549566-aae2-4a95-a00a-76f0f2fbf674",
              "name": "CheckIfExist"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1940,
                1260
              ],
              "id": "2142bbed-d84c-482d-92f7-8564333931cd",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -2280,
                1260
              ],
              "id": "3e0a780a-5aa8-451c-b95c-059aec833131",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -780,
                1100
              ],
              "id": "fc336efd-b64e-4d0a-bf2d-d357d6f68851",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "=,"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -2100,
                1260
              ],
              "id": "0665e70b-be13-43dc-8ded-dd78e9f728da",
              "name": "Supabase5",
              "alwaysOutputData": true,
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            }
          ],
          "connections": {
            "Input": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items1": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "CheckIfExist4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "CheckIfExist3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If2": {
              "main": [
                [
                  {
                    "node": "CheckIfExist5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist3": {
              "main": [
                [
                  {
                    "node": "If2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist4": {
              "main": [
                [
                  {
                    "node": "If3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist5": {
              "main": [
                [
                  {
                    "node": "If4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If3": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If4": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command2": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command3": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command4": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "CheckIfExist",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "87fd5289-374b-4d28-ae40-58626cd53941",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-03-12T17:28:49.489Z",
          "updatedAt": "2025-05-23T19:54:42.000Z",
          "id": "1exRVcsRvWQQAKsQ",
          "name": "N8N-Merges-ControlDocumentario",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -1120,
                1620
              ],
              "id": "a6f5571f-27cd-4601-890c-7adb33eb19f2",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "batchSize": "=1",
                "options": {}
              },
              "id": "2e7112eb-c57f-49fb-b058-887595994e81",
              "name": "Loop Over Items1",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -620,
                1040
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -780,
                1040
              ],
              "id": "bad14cd6-ca15-4567-8ad3-d31c13f4f6ec",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "content": "## Merge LA SEGUNDA\nUne los pdfs en la forma\nque nos piden las plantas:\n* Polisa Original\n* Copia de Polisa\n* Todos los CNRs\n* Pago polisa acc personales",
                "height": 800,
                "width": 2040,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -1280,
                1020
              ],
              "typeVersion": 1,
              "id": "affbdad1-117a-4520-acf9-fd2f0004b2c3",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -180,
                1160
              ],
              "id": "75db01de-4cbc-4f40-9f11-a2334e07d6d7",
              "name": "If1"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items1').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-BUNGE ARGENTINA S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-GENERACION LITORAL S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-PROMAIZ S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-STYROPEK S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-T6 INDUSTRIAL S.A.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-TERMINAL 6 S.A.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\"\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -320,
                1160
              ],
              "id": "8184cf52-0491-403b-b014-75465b2f4708",
              "name": "CheckIfExist2"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -180,
                1440
              ],
              "id": "ded58bdd-4c35-4183-8e07-ad6c9feebc70",
              "name": "If2"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items1').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\"\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -320,
                1440
              ],
              "id": "69a6f7cf-a918-4dd0-b5c8-81899011c58f",
              "name": "CheckIfExist3"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items1').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaLS-{nombre}-{mesdirec}.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaOriginal-{nombre}-{mesdirec}.pdf', 'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Pago poliza acc personales\\Pago poliza acc personales-{nombre}-{mesdirec}.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -20,
                1160
              ],
              "id": "93232e22-7526-46bc-8456-c5f625f50483",
              "name": "CheckIfExist4"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items1').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaLS-{nombre}-{mesdirec}.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaOriginal-{nombre}-{mesdirec}.pdf','G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Pago poliza acc personales\\Pago poliza acc personales-{nombre}-{mesdirec}.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -20,
                1440
              ],
              "id": "4c17b853-ce87-45d9-8ff7-366a3d531a3b",
              "name": "CheckIfExist5"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                120,
                1160
              ],
              "id": "3ed9b5fb-c476-41c6-aa57-60ba48bcc382",
              "name": "If3"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                120,
                1440
              ],
              "id": "0a190b3a-15d5-436f-a4c5-49d41a01d32c",
              "name": "If4"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.alert('El usuario {{ $('Supabase1').item.json['Nombre']}}  no tiene CNR'); import json; print(json.dumps({'message': '{{ $('Supabase1').item.json['Nombre']}} no tiene CNR'}))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -20,
                1600
              ],
              "id": "66c75b8a-d546-4218-931a-9efe1eac2afe",
              "name": "Execute Command2"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.alert('El usuario {{ $('Supabase1').item.json['Nombre']}} no tiene alguna Poliza')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                1600
              ],
              "id": "449c80fa-f6b4-4b7e-baae-83161c4bad29",
              "name": "Execute Command3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.alert('El usuario {{ $('Supabase1').item.json['Nombre']}} no tiene alguna Poliza')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                1300
              ],
              "id": "ce6151a4-5ff1-4149-a7b2-d2fdebbfa07d",
              "name": "Execute Command4"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.alert('{{Errores}}')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                580,
                1040
              ],
              "id": "f0ba9912-15f4-4543-904e-58398b150c13",
              "name": "Execute Command"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -900,
                1040
              ],
              "id": "2418d392-0f9d-468c-af90-db3f26ff06ce",
              "name": "Supabase2",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase3').item.json.Texto }},{{ JSON.parse($json.stdout).message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                580,
                1600
              ],
              "id": "b4d4542a-8dd7-4b11-bc40-64dd93d3130b",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -440,
                1160
              ],
              "id": "0ec688df-8018-4500-9f38-6fc5fb4fb271",
              "name": "Supabase3",
              "alwaysOutputData": true,
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"from pypdf import PdfWriter; merger = PdfWriter();import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items1').item.json.Nombre }}';mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-BUNGE ARGENTINA S.A.pdf'); merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-GENERACION LITORAL S.A.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-PROMAIZ S.A.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-STYROPEK S.A.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-T6 INDUSTRIAL S.A.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-TERMINAL 6 S.A.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaLS-{nombre}-{mesdirec}.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaOriginal-{nombre}-{mesdirec}.pdf');merger.append('G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Pago poliza acc personales\\Pago poliza acc personales-{nombre}-{mesdirec}.pdf');merger.write(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Merge La Segunda\\Poliza acc personales-{nombre}-{mesdirec}-TEST.pdf'); merger.close()\"\n\n\n\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                1160
              ],
              "id": "d1ef3875-5a7a-40d9-8a16-21e5278de668",
              "name": "PDF Merging Tool1"
            },
            {
              "parameters": {
                "command": "=python -c \"from pypdf import PdfWriter; merger = PdfWriter();import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items1').item.json.Nombre }}';mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaLS-{nombre}-{mesdirec}.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaOriginal-{nombre}-{mesdirec}.pdf');merger.append('G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Pago poliza acc personales\\Pago poliza acc personales-{nombre}-{mesdirec}.pdf');merger.write(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\LA SEGUNDA\\Merge La Segunda\\Poliza acc personales-{nombre}-{mesdirec}-TEST.pdf'); merger.close()\"\n\n\n\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                1460
              ],
              "id": "ea6a4b84-f227-425c-89d5-0f4142203a05",
              "name": "PDF Merging Tool2"
            },
            {
              "parameters": {
                "batchSize": "=1",
                "options": {}
              },
              "id": "6ca9723a-8473-4e84-bc49-efb5f690c917",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -300,
                1940
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -460,
                1940
              ],
              "id": "b8d653d7-532b-4b96-982a-0d9fa68999ba",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "content": "## Merge ARCA\nUne los pdfs en la forma\nque nos piden las plantas:\n* Insc Aut Monot\n* Estado de Cuenta\n* Pago Monotributo",
                "height": 800,
                "width": 2040,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -1260,
                1920
              ],
              "typeVersion": 1,
              "id": "9cf3b08a-c322-4f1b-9b75-1482948ee65e",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                160,
                2060
              ],
              "id": "c77c1c82-fd8b-4c8d-adc3-124be3b60bf2",
              "name": "If"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Inscripcion Autonomo Monotributo\\Inscripcion Autonomo Monotributo-{nombre}-{mesdirec}.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Estado de Cuenta\\EstadoCuenta-ARCA-{nombre}-{mesdirec}.pdf',fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Pago Monotributo\\Pago Monotributo - {nombre}.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\"\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                20,
                2060
              ],
              "id": "c36f5021-00f4-4a88-8c0b-2486534f08eb",
              "name": "CheckIfExist"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "Todos los archivos existen.",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                140,
                2340
              ],
              "id": "1a28c469-c8d8-4a53-a33c-e7d025288803",
              "name": "If5"
            },
            {
              "parameters": {
                "command": "=python -c \"import os;import locale;from datetime import datetime;from dateutil.relativedelta import relativedelta;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize());nombre = '{{ $('Loop Over Items').item.json.Nombre }}'; mes=current_date.strftime('%B'); mesdirecpasado = (current_date - relativedelta(months=1)).strftime('%m - %B %Y');mesdirecpasado = mesdirecpasado.replace(mesdirecpasado.split(' - ')[1], mesdirecpasado.split(' - ')[1].capitalize()); archivos = [fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Inscripcion Autonomo Monotributo\\Inscripcion Autonomo Monotributo-{nombre}-{mesdirec}.pdf', fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Estado de Cuenta\\EstadoCuenta-ARCA-{nombre}-{mesdirec}.pdf',fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirecpasado}\\ARCA\\Pago Monotributo\\Pago Monotributo - {nombre}.pdf']; print('Todos los archivos existen.' if all(os.path.exists(f) for f in archivos) else 'Al menos un archivo no existe.')\"\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                0,
                2340
              ],
              "id": "e9c0d9fc-510f-40f8-a94f-331213266a8e",
              "name": "CheckIfExist6"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.alert('{{ $('Supabase').item.json['Nombre']}}  no tiene algún documento p Monotributo y pago')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                2540
              ],
              "id": "96f5d2ae-0620-48bf-b18c-16bac4c2c87c",
              "name": "Execute Command5"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.alert('{{Errores}}')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                580,
                1940
              ],
              "id": "928c5491-0e9d-4689-8573-9264b0122e45",
              "name": "Execute Command1"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -580,
                1940
              ],
              "id": "125f5a06-65f0-44de-b5f2-ad486cd8ec95",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase7').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                600,
                2540
              ],
              "id": "d84b93b5-d80c-4389-93be-d8cb4025346c",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -120,
                2060
              ],
              "id": "31585552-4b1d-4097-98ad-36afb014b56d",
              "name": "Supabase7",
              "alwaysOutputData": true,
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"from pypdf import PdfWriter; merger = PdfWriter();import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();nombre = '{{ $('Loop Over Items').item.json.Nombre }}';mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Inscripcion Autonomo Monotributo\\Inscripcion Autonomo Monotributo-{nombre}-{mesdirec}.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Estado de Cuenta\\EstadoCuenta-ARCA-{nombre}-{mesdirec}.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Pago Monotributo\\Pago Monotributo - {nombre}.pdf');merger.write(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Merge ARCA\\Monotributo y Pago-{nombre}-{mesdirec}-TEST.pdf'); merger.close()\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                420,
                2060
              ],
              "id": "13418344-8675-4a2c-a3f0-eeee3bb0efd9",
              "name": "PDF Merging Tool3"
            },
            {
              "parameters": {
                "command": "=python -c \"from pypdf import PdfWriter; merger = PdfWriter();import os;import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now(); mesdirecpasado = (current_date - relativedelta(months=1)).strftime('%m - %B %Y');mesdirecpasado = mesdirecpasado.replace(mesdirecpasado.split(' - ')[1], mesdirecpasado.split(' - ')[1].capitalize());nombre = '{{ $('Loop Over Items').item.json.Nombre }}';mes=current_date.strftime('%B'); mesdirec=current_date.strftime('%m - %B %Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Inscripcion Autonomo Monotributo\\Inscripcion Autonomo Monotributo-{nombre}-{mesdirec}.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Estado de Cuenta\\EstadoCuenta-ARCA-{nombre}-{mesdirec}.pdf');merger.append(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirecpasado}\\ARCA\\Pago Monotributo\\Pago Monotributo - {nombre}.pdf');merger.write(fr'G:\\.shortcut-targets-by-id\\1sZgSJL9I6E0GB6QzaugDq_JoUz5E7Mae\\09 - Documentos Ingreso\\{mesdirec}\\ARCA\\Merge ARCA\\Monotributo y Pago-{nombre}-{mesdirec}.pdf')-TEST; merger.close()\"\n\n\n"
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                420,
                2340
              ],
              "id": "8f06a762-5a7b-4352-9b52-bcc68f654d7b",
              "name": "PDF Merging Tool4"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "097e697f-a8a9-4c0b-ac75-295163acb3c4",
                      "name": "message",
                      "value": "={{ $('Supabase').item.json['Nombre']}}  no tiene algún documento",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                460,
                2540
              ],
              "id": "115bbdf0-b739-4485-9b13-b51cf902994a",
              "name": "Edit Fields"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                []
              ]
            },
            "Loop Over Items1": {
              "main": [
                [
                  {
                    "node": "Execute Command",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "CheckIfExist4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "CheckIfExist3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist2": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist3": {
              "main": [
                [
                  {
                    "node": "If2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If2": {
              "main": [
                [
                  {
                    "node": "CheckIfExist5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist4": {
              "main": [
                [
                  {
                    "node": "If3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If3": {
              "main": [
                [
                  {
                    "node": "PDF Merging Tool1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If4": {
              "main": [
                [
                  {
                    "node": "PDF Merging Tool2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist5": {
              "main": [
                [
                  {
                    "node": "If4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command4": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command2": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command3": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "CheckIfExist2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "PDF Merging Tool1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "PDF Merging Tool2": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Execute Command1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "PDF Merging Tool3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "CheckIfExist6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If5": {
              "main": [
                [
                  {
                    "node": "PDF Merging Tool4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CheckIfExist6": {
              "main": [
                [
                  {
                    "node": "If5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command5": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase7": {
              "main": [
                [
                  {
                    "node": "CheckIfExist",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "PDF Merging Tool3": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "PDF Merging Tool4": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "4fd23e2a-39ed-44ac-976d-27ba6e900ecc",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-05-09T16:08:08.400Z",
          "updatedAt": "2025-05-09T16:08:25.000Z",
          "id": "8gRagMKXvdHIE0xS",
          "name": "direc",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -280,
                0
              ],
              "id": "aa352813-2987-4781-a815-560da8cb366a",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -100,
                0
              ],
              "id": "7f44d733-0b93-43f0-9bfd-0f2ef0c507b4",
              "name": "Edit Fields3"
            }
          ],
          "connections": {
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "a4cb1ca3-c5b0-4e46-a6fa-d8b893587508",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-05-05T13:19:53.451Z",
          "updatedAt": "2025-08-01T11:39:34.000Z",
          "id": "BEt1snPCGQrvKA4o",
          "name": "CreacionCarpetas",
          "active": true,
          "nodes": [
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "field": "months",
                      "triggerAtHour": 1,
                      "triggerAtMinute": 30
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                -840,
                -160
              ],
              "id": "be274157-d6d1-495c-ba1e-d902be9c23e0",
              "name": "Schedule Trigger"
            },
            {
              "parameters": {
                "command": "=python -c \"import os; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now(); from datetime import datetime; mesdirec = current_date.strftime('%m - %B %Y'); stdout = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); mes = current_date.strftime('%B'); print(fr'{stdout}')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -20,
                -80
              ],
              "id": "800a68f7-e221-40e7-a7e6-581050e1096c",
              "name": "Execute Command"
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -840,
                20
              ],
              "id": "55dc19c1-cc45-4a18-a9bf-121211a3a5bb",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "={{ $json.stdout }}",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "1LORseO6Wjzhpq8cHF75YJVhIGc2NKrcw",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                140,
                -80
              ],
              "id": "001f2388-62d4-4acb-8958-2bd2b537363d",
              "name": "Google Drive",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=ARCA",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                380,
                -360
              ],
              "id": "85b0d135-23c2-435d-adf1-212444352e0f",
              "name": "Google Drive1",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=LA SEGUNDA",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                380,
                240
              ],
              "id": "6fd0e106-60b6-46ab-9e0b-eebfeabca99c",
              "name": "Google Drive2",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=Pago Monotributo",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                620,
                -620
              ],
              "id": "b2fb70c3-c5e9-44c1-84c9-5514223e08de",
              "name": "Google Drive3",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=Inscripcion Autonomo Monotributo",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                620,
                -460
              ],
              "id": "bed2cb0b-d15b-4b5c-b1f5-105efc4a23a9",
              "name": "Google Drive4",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=Estado de Cuenta",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                620,
                -300
              ],
              "id": "065c09f5-c24d-47ba-bef4-6001f248c5dc",
              "name": "Google Drive5",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=Merge ARCA",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                620,
                -140
              ],
              "id": "15e2dba9-b2e9-4fa2-b6ed-486f270feeb0",
              "name": "Google Drive6",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=CNR",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                620,
                20
              ],
              "id": "5c20ebec-3bcf-4d1e-92ca-6f5f31dab55c",
              "name": "Google Drive7",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=Poliza",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                620,
                180
              ],
              "id": "7051d200-3cd4-419d-9263-ba0814ceec4e",
              "name": "Google Drive8",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=Pago poliza acc personales",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                620,
                340
              ],
              "id": "928694f8-38f2-4a6f-b21e-d869da3ff7be",
              "name": "Google Drive9",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=Merge La Segunda",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                620,
                500
              ],
              "id": "840d1a7f-c65f-43cb-828d-49f890f4ccc5",
              "name": "Google Drive10",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import locale; from datetime import datetime; locale.setlocale(locale.LC_TIME, 'es_ES.UTF-8'); anio = datetime.now().strftime('%Y'); print(f'{anio}')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -640,
                -80
              ],
              "id": "5e66ae9b-8e91-47a1-9042-de9cbfd76b63",
              "name": "Execute Command1"
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "queryString": "={{ $json.stdout }}",
                "limit": 1,
                "filter": {},
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                -480,
                -80
              ],
              "id": "4b58bba3-a9db-4dca-b06a-62e3fbab2d19",
              "name": "Google Drive11",
              "alwaysOutputData": true,
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "folder",
                "name": "=Año {{ $('Execute Command1').item.json.stdout }}",
                "driveId": {
                  "__rl": true,
                  "value": "=",
                  "mode": "id"
                },
                "folderId": {
                  "__rl": true,
                  "value": "1a1zOitMYUE3_2FrKggj3qxQ_0B92izXx",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                -180,
                -80
              ],
              "id": "ff6881e6-b8dd-414c-bfc0-72a6d45e631b",
              "name": "Google Drive13",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "70ac0c36-387a-40f7-93e0-579de029ebe9",
                      "leftValue": "={{ $json.name }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "exists",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -340,
                -80
              ],
              "id": "4021ade4-c07e-42a4-9692-cab1b07a6807",
              "name": "If"
            }
          ],
          "connections": {
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "Execute Command1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Execute Command1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command": {
              "main": [
                [
                  {
                    "node": "Google Drive",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive": {
              "main": [
                [
                  {
                    "node": "Google Drive1",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Google Drive2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive1": {
              "main": [
                [
                  {
                    "node": "Google Drive3",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Google Drive4",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Google Drive5",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Google Drive6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive2": {
              "main": [
                [
                  {
                    "node": "Google Drive7",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Google Drive8",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Google Drive9",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Google Drive10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command1": {
              "main": [
                [
                  {
                    "node": "Google Drive11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive11": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Google Drive13": {
              "main": [
                [
                  {
                    "node": "Execute Command",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Execute Command",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Google Drive13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "c665e0cd-98f8-4a6a-a17c-3d972e42a7bb",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-04-08T18:52:53.912Z",
          "updatedAt": "2025-05-27T20:12:04.000Z",
          "id": "DbwBS0zefv26xaJX",
          "name": "GenerarControlDocumentario",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Start-Pixel"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "=470"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                4580,
                1540
              ],
              "id": "44e4256a-d232-4322-8076-0fd7215a31f8",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "=0"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                4740,
                1540
              ],
              "id": "08715455-5491-473d-810b-e27c29e7fb50",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Loop-Index"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                4940,
                1540
              ],
              "id": "04427495-617d-46bd-836d-d046f8a15228",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6bec7028-141e-4c88-91ff-254fd5d268bf",
                      "leftValue": "={{ $('Divide html columns7').item.json.itemCount }}",
                      "rightValue": "={{ $('Supabase6').item.json.valor }}",
                      "operator": {
                        "type": "number",
                        "operation": "gt"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                5080,
                1540
              ],
              "id": "734d032f-33f5-4bc3-85fb-55a1f1dde5a5",
              "name": "If2"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                5080,
                60
              ],
              "id": "6f9e192c-dec8-400e-be3a-25210a670085",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"errores\": []\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                4940,
                60
              ],
              "id": "3f96b64c-f8ba-4526-ac4e-457f3604e7dd",
              "name": "Edit Fields1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "2e744784-3d24-4441-a10e-bebc035b4850",
              "name": "Save Screenshot5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                60
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "a2c80f09-6708-4bde-880a-39e5696b5a09",
              "name": "Locate On Screen5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                60
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c1c63a8b-3b64-45d2-9170-30a850d3a6ee",
              "name": "Coordinate Parser5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                60
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser5').item.json.x }}, {{ $('Coordinate Parser5').item.json.y }}); pyautogui.typewrite('30716401622')\""
              },
              "id": "51090bb2-9011-4257-8f04-60bbdf98cb20",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                60
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                40
              ],
              "typeVersion": 1,
              "id": "9ef1ed13-c01f-421d-a72f-baf25137c83d",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "48ca4c22-f839-43be-b545-32aeb93871b2",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                280
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "4c6654e9-81fe-4942-846d-64828a82c858",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                280
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "de2dd4b5-9b7e-4283-8e6f-299702736f00",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                280
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser13').item.json.x}}, {{ $('Coordinate Parser13').item.json.y }}); pyautogui.typewrite('TR33Ingresos*')\""
              },
              "id": "24cfdb7a-a2da-46eb-8a23-2cdc61adea6a",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                280
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                260
              ],
              "typeVersion": 1,
              "id": "11ed22cc-35d2-4db6-af07-6f6a5e1875d0",
              "name": "Sticky Note4"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "e1cf82cd-2eab-42e9-86ff-6c9d6474e276",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                500
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "d12ec101-158e-48fa-94ac-4109bb2204a9",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                500
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b9c33925-fb04-46e0-8849-ad660e2a9759",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                500
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser14').item.json.x }}, {{ $('Coordinate Parser14').item.json.y }})\""
              },
              "id": "ca2264ee-aa9d-4300-a8ba-287246666188",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                500
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                480
              ],
              "typeVersion": 1,
              "id": "618291d5-2a8c-4633-a4bc-a4d7e8429093",
              "name": "Sticky Note14"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "905ae19f-ac7a-40b7-9f7f-7a26ef03fca6",
              "name": "Save Screenshot15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                720
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "c4fd56a8-995e-4801-b007-b91a2fe8b4cd",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                720
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c06e7666-c7b6-4906-b8e3-f470272f91f9",
              "name": "Coordinate Parser15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                720
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser15').item.json.x }}, {{ $('Coordinate Parser15').item.json.y }})\""
              },
              "id": "0cf0d77e-c9e1-40c9-bdf3-7940edbbad52",
              "name": "Click16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                720
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                700
              ],
              "typeVersion": 1,
              "id": "c7aeee71-c58e-4aa9-8888-3860f4e9791d",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "f5633422-7200-422f-8223-b6cf9b0bd29c",
              "name": "Save Screenshot16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                940
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "7e9aa685-d281-4b38-815b-d1489d6fe800",
              "name": "Locate On Screen17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                940
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "6d18b4e5-a51d-4abf-b474-13f8d2bf19fa",
              "name": "Coordinate Parser16",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                940
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser16').item.json.x}}, {{ $('Coordinate Parser16').item.json.y }})\""
              },
              "id": "70b09e51-cc77-4986-a1f4-ef838222a8bb",
              "name": "Click17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                940
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                920
              ],
              "typeVersion": 1,
              "id": "3c20bd8e-927a-489b-80df-185e477e0df8",
              "name": "Sticky Note18"
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
              },
              "id": "6dafbbe5-a5de-484b-8c54-40615791d958",
              "name": "OpenBrowserCmd1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4800,
                60
              ],
              "alwaysOutputData": false,
              "executeOnce": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "95701b56-f892-47a7-861c-7a16603a8171",
              "name": "Save Screenshot21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                1160
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AreaTrabajo-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "fb3d4759-5e06-49f5-809c-72966f210ef0",
              "name": "Locate On Screen18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                1160
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b78fc1d5-76db-4455-964e-1ce75ac8e6c5",
              "name": "Coordinate Parser17",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                1160
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser17').item.json.x }}, {{ $('Coordinate Parser17').item.json.y -10}})\""
              },
              "id": "911f8b69-5983-47c9-9bd5-9f4c9ac7ad2e",
              "name": "Click18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6040,
                1160
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                1140
              ],
              "typeVersion": 1,
              "id": "b5af0e95-9d78-47b6-a637-298b672141f4",
              "name": "Sticky Note19"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "d3e82dfe-0905-4333-b805-dac797e4a4e4",
              "name": "Save Screenshot22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                1660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Generar-CD.png', grayscale=True, confidence=0.9))\""
              },
              "id": "f0a7f0bf-b372-45d6-842a-7ae2dbd8df19",
              "name": "Locate On Screen19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                1660
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "199fcb40-e209-443a-86d5-8060ac91055f",
              "name": "Coordinate Parser18",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                1660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser18').item.json.x }}, {{ $('Coordinate Parser18').item.json.y }})\""
              },
              "id": "5d5bbeb6-60e8-4ad3-8bb3-b01afa4ecebb",
              "name": "Click19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                1660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                1640
              ],
              "typeVersion": 1,
              "id": "4660209a-1cac-4ff3-b17b-f2653bc33ad2",
              "name": "Sticky Note20"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(8); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "735ec18c-bc8e-48ff-b9a0-1c84bb4f2194",
              "name": "Save Screenshot23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                1880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Generar-Requerimientos-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "bb7914e5-6e06-4d92-90b3-0587d19e87cf",
              "name": "Locate On Screen20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                1880
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "00bc682d-17cc-4bf0-a709-b28789d9462c",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                1880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser19').item.json.x }}, {{ $('Coordinate Parser19').item.json.y }})\""
              },
              "id": "ed5ef556-0194-42db-baf8-f87124a1df9a",
              "name": "Click20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                1880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                1860
              ],
              "typeVersion": 1,
              "id": "8e7f4a78-7f36-4894-ba0a-ad0cd091d05d",
              "name": "Sticky Note21"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(4);pyautogui.click(675, {{ $json.foundPhrase.words[0].y +410}})\""
              },
              "id": "8fbf8d47-81d6-4a84-8539-1e5d4ace01a1",
              "name": "Click21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                2760
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                2740
              ],
              "typeVersion": 1,
              "id": "c941d296-1c57-4b80-ba7a-d39f7a7ad827",
              "name": "Sticky Note22"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(5); img = pyautogui.screenshot(region=(650,405, 550, 300)); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png')\""
              },
              "id": "d7f5fda9-b6fe-4d59-ba53-8b2df325d3b6",
              "name": "Save Screenshot24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6040,
                2760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import time; time.sleep(3);import pyautogui; pyautogui.moveTo(1028, 500); pyautogui.scroll(-265)\""
              },
              "id": "d2c050c8-3c9b-4167-a9cc-24d75cbfb4b0",
              "name": "Save Screenshot25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5960,
                2560
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "={{ $('Loop Over Items1').item.json.nombre }}",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "698807ee-cb59-43b6-be57-77dc788c0ea5",
              "name": "Find OCR Word Input1",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                6280,
                2760
              ],
              "notesInFlow": false,
              "notes": "Optional parser that helps manage the output of local ocr"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8068259a-d72b-4dbd-8755-6e57d798f2e2",
              "name": "Save Screenshot26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                2100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Generar-Personal-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "3a3ba71d-ce53-4fd3-969c-fb71f1dbf524",
              "name": "Locate On Screen21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                2100
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "33c8576f-6ec8-43ee-a9ce-c33023526ca0",
              "name": "Coordinate Parser20",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                2100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser20').item.json.x }}, {{ $('Coordinate Parser20').item.json.y }})\""
              },
              "id": "871d8e40-8e09-4df3-85f8-9265a492a676",
              "name": "Click22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                2100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                2080
              ],
              "typeVersion": 1,
              "id": "9cb4164b-4a95-40d8-9673-fb46201e459e",
              "name": "Sticky Note23"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "4c08755e-b6d6-4245-ba16-599dad8b7fe5",
              "name": "Save Screenshot27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                2320
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Generar-Sobres-CD.png', grayscale=True, confidence=0.6))\""
              },
              "id": "c38ba3f2-574e-42b9-9619-49a4f55af42f",
              "name": "Locate On Screen22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                2320
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "36597e1c-2559-44e7-af42-f66d45989c4a",
              "name": "Coordinate Parser21",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                2320
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser21').item.json.x }}, {{ $('Coordinate Parser21').item.json.y }})\""
              },
              "id": "5452d32b-3adf-42d1-8191-88e5670763bf",
              "name": "Click23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                2320
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                2300
              ],
              "typeVersion": 1,
              "id": "9c56ecf4-e67c-4e85-a9cf-c9d9b2aa003c",
              "name": "Sticky Note24"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "5fc75cf1-7558-4087-baca-6ccf85a49225",
              "name": "Save Screenshot28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                2540
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Generar-{{$('Loop Over Items3').first().json.documento}}-CD.png', grayscale=True, confidence=0.7))\""
              },
              "id": "2ec47acb-6d37-4b94-ad27-712d53fb9bd0",
              "name": "Locate On Screen23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                2540
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d95b357e-5172-415b-9257-0017c961ca81",
              "name": "Coordinate Parser22",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                6420,
                2540
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser22').item.json.x }}, {{ $('Coordinate Parser22').item.json.y }})\""
              },
              "id": "5e722d03-6915-43d5-b6ca-7e8c6328e812",
              "name": "Click24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                2540
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                2520
              ],
              "typeVersion": 1,
              "id": "d8f0ced4-d221-4461-b4fc-a527bdc65be3",
              "name": "Sticky Note25"
            },
            {
              "parameters": {
                "command": "=python -c \"import time; time.sleep(3);import pyautogui; pyautogui.moveTo(650,410,); pyautogui.scroll(-265)\""
              },
              "id": "5ca35038-4d37-4399-a490-1a2373acb6a6",
              "name": "Save Screenshot29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                2760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image =ImageEnhance.Contrast(image).enhance(0.5).filter(ImageFilter.SHARPEN);img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 3'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 30]; print(json.dumps(results, indent=2));image.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png')"
              },
              "id": "0dd4d180-196a-4b82-b972-661eada23bb3",
              "name": "Local OCR4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6160,
                2760
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "options": {
                  "reset": false
                }
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                5820,
                2760
              ],
              "id": "4ace944e-7c4c-49cd-b1af-b779d7cd7fa8",
              "name": "Loop Over Items1"
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"query\": \"delpino nicolas abel, ppolizaaccpe, 20\\ndonaire pablo ruben, ppolizaaccpe, 12\\nferreyra julian andres, ppolizaaccpe, 18\"\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                5540,
                1380
              ],
              "id": "eaf98969-d5dc-4850-89d5-8da7f97ed727",
              "name": "Edit Fields4",
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const raw = $('Input').first().json.query // accedemos al campo \"query\"\nconst lines = raw.split('\\n'); // separamos por líneas\n\nconst result = lines.map(line => {\n  const [nombre, documento, valor] = line.split(',').map(e => e.trim());\n\n  return {\n    json: {\n      nombre,\n      documento,\n      valor: parseInt(valor)\n    }\n  };\n});\n\nreturn result;"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5700,
                1380
              ],
              "id": "f7ad166f-cbc4-470d-8ca5-eb64a01a8d2c",
              "name": "Code"
            },
            {
              "parameters": {
                "jsCode": "const grouped = {};\n\nfor (const item of items) {\n  const { documento } = item.json;\n\n  if (!grouped[documento]) {\n    grouped[documento] = [];\n  }\n\n  grouped[documento].push({\n    nombre: item.json.nombre,\n    valor: item.json.valor\n  });\n}\n\nreturn Object.entries(grouped).map(([documento, personas]) => {\n  return {\n    json: {\n      documento,\n      personas\n    }\n  };\n});"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5860,
                1380
              ],
              "id": "5585459b-41c1-489b-93d1-bd0afbadf32a",
              "name": "Code4"
            },
            {
              "parameters": {
                "options": {
                  "reset": true
                }
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                6040,
                1400
              ],
              "id": "f5e68808-33d3-41a4-9f31-20dfaeaec6bb",
              "name": "Loop Over Items3"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                1360
              ],
              "typeVersion": 1,
              "id": "64a8f718-bedf-499a-9169-058c41a121eb",
              "name": "Sticky Note26"
            },
            {
              "parameters": {
                "jsCode": "// Aquí usamos la variable directamente (documento contiene el array)\nconst documento = $('Loop Over Items3').item.json.personas;\n\n// Recorremos el array y extraemos solo los nombres\nreturn documento.map(p => ({\n  json: {\n    nombre: p.nombre\n  }\n}));\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5660,
                2760
              ],
              "id": "22768321-7639-4c6e-871e-5243a0bcc4c8",
              "name": "Code6"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "c5fd1e1b-c301-41da-af1b-86c4b9c67a2c",
              "name": "Save Screenshot30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5540,
                2980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\OutTest.png', grayscale=True, confidence=0.8))\""
              },
              "id": "3befa2ac-f783-4559-a6b4-0973ea905562",
              "name": "Locate On Screen24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                2980
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "dd09ce1d-2b4f-4455-ab41-55d4a4532b33",
              "name": "Coordinate Parser23",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                2980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser23').item.json.x }}, {{ $('Coordinate Parser23').item.json.y }}); time.sleep(2);pyautogui.click({{ $('Coordinate Parser23').item.json.x }}, {{ $('Coordinate Parser23').item.json.y }})\""
              },
              "id": "0ed32946-6334-452f-b98f-cba35e239ace",
              "name": "Click25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6660,
                2980
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                5220,
                2960
              ],
              "typeVersion": 1,
              "id": "f442dc47-6e1a-44d8-8cb0-2e21490f2fdd",
              "name": "Sticky Note27"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "86ec24c0-2e3e-4afe-9701-4696b1958629",
                      "leftValue": "={{ $json.foundPhrase.error }}",
                      "rightValue": "Error",
                      "operator": {
                        "type": "string",
                        "operation": "exists",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                6520,
                2760
              ],
              "id": "29ab8865-31a3-41c1-9b2e-bc6b06c4be31",
              "name": "If3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(3).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 3'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "546f1c88-37e8-4122-9766-3160c833cf66",
              "name": "Local OCR5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6140,
                3200
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(5); img = pyautogui.screenshot(region=(650,405, 550, 300)); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png')\""
              },
              "id": "7015fb9a-53af-4559-b1fe-1da709738f44",
              "name": "Save Screenshot31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5780,
                3680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; pytesseract.pytesseract.tesseract_cmd = r'C:\\\\Program Files\\\\Tesseract-OCR\\\\tesseract.exe'; image_path = r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ControlDocumentario\\\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(10).filter(ImageFilter.SHARPEN); img_np = np.array(image); img_np = cv2.GaussianBlur(img_np, (1,1), 0); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 6'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "9db5d9b5-33e2-41b8-81ff-8296598ef7a5",
              "name": "Local OCR6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6000,
                3680
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2); print(pyautogui.locateOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6) is not None)\"\n"
              },
              "id": "3626dcc7-adeb-4b5d-942d-a5a4bf34cb64",
              "name": "Locate On Screen25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6500,
                1160
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1de11e8e-1b46-4798-b4fe-c0d9c0f2bac0",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                6660,
                1160
              ],
              "id": "b8df188e-3405-4f4d-a5b5-33995b8fb1ad",
              "name": "If4"
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image =ImageEnhance.Contrast(image).enhance(10).filter(ImageFilter.SHARPEN);img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 3'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 30]; print(json.dumps(results, indent=2))\""
              },
              "id": "5b4f9dd4-7233-4f3c-8f36-f0d58f800681",
              "name": "Local OCR7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6160,
                2920
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "jsCode": "function findCloseWords(data, searchWords, maxDistance = 100, minMatches = 2) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(() => []);\n\n  // Buscar coincidencias de cada palabra\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (normalizeText(item.text).includes(searchWord)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Filtrar solo combinaciones con al menos `minMatches` palabras encontradas\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    const used = combo.filter(item => item !== undefined && item !== null);\n    const matchCount = used.length;\n\n    if (matchCount >= minMatches) {\n      const totalDistance = calculateTotalDistance(used);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (matchCount - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = used;\n      }\n    }\n  });\n\n  return bestMatch;\n}"
              },
              "id": "fd587f6f-aa27-4483-8f85-d50643830ccd",
              "name": "OCR Word",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                6400,
                2920
              ],
              "notesInFlow": false,
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "jsCode": "// Normalize text for case-insensitive matching\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Total distance of a group of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i - 1].x, words[i - 1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Cartesian product helper\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) =>\n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Main function to find best match\nfunction findCloseWords(data, searchWords, maxDistance = 100, minMatches = 2) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(() => []);\n\n  // Find partial matches\n  data.forEach(item => {\n    const normText = normalizeText(item.text);\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (normText.includes(searchWord)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    const usedItems = combo.filter(i => i); // remove undefined/null\n    const uniqueTexts = new Set(usedItems.map(i => i.text.toLowerCase()));\n    const matchCount = uniqueTexts.size;\n\n    if (matchCount >= minMatches) {\n      const totalDistance = calculateTotalDistance(usedItems);\n      if (totalDistance <= maxDistance * (matchCount - 1) && totalDistance < minTotalDistance) {\n        minTotalDistance = totalDistance;\n        bestMatch = usedItems;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// --- Main Execution --- //\n\nconst input = $input.all()[0].json;\nconst searchPhrase = input['Find Phrase'];\nconst maxDistance = 300;\nlet parsedData, result;\n\ntry {\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(/\\s+/);\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance, 2);\n\n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Could not find at least 2 words from \"${searchPhrase}\" close enough.` };\n  }\n} catch (error) {\n  result = {\n    error: 'Failed to parse OCR results or find phrase',\n    details: error.message\n  };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "b162bcad-c997-40d7-b70f-2ddcf92cf0fb",
              "name": "OCR Word3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                6400,
                2760
              ],
              "notesInFlow": false,
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tbRecursos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; print(json.dumps(data, indent=2))\""
              },
              "id": "4411e9fe-d95a-487b-8aeb-633a5856f44a",
              "name": "Get Table - V",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5780,
                3500
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(4); table = driver.find_element(By.ID, 'tbRecursos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
              },
              "id": "cd95b0df-4870-4706-aa28-03eae49c6c1b",
              "name": "Get Table - V3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5980,
                3500
              ]
            },
            {
              "parameters": {},
              "id": "d547a79c-ea8c-47e8-9f0b-3882c837855b",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -2740,
                80
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -2260,
                240
              ],
              "id": "6d9679ae-241a-4320-a20a-a115315d54c5",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "b0397314-a001-4cf6-b5a4-4e5718ceac22",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                240
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f20df9c1-2f81-47c1-842a-7f4402231145",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                240
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "07372383-4f8c-4bc5-99da-66b9dc96a3b5",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                240
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y }}); pyautogui.typewrite('30716401622'); time.sleep(1); pyautogui.typewrite(['escape'])\""
              },
              "id": "1eab85fd-fb30-4c32-b1b0-0e41b36f1201",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                220
              ],
              "typeVersion": 1,
              "id": "ccc95023-7afb-4b84-9956-c9f2b7a90c84",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "50f4d103-81e8-4cae-9866-2f3febb27595",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "08620abd-69ac-43b5-b08c-1d5b98c3e1bf",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                460
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3d45f3f3-fe45-47cb-819c-9a8ea4a423d7",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser').item.json.x}}, {{ $('Coordinate Parser').item.json.y }}); pyautogui.typewrite('TR33Ingresos*')\""
              },
              "id": "2f548627-a89c-4a26-bcf4-b68037a38510",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                440
              ],
              "typeVersion": 1,
              "id": "df38fd22-5459-42c8-88c4-639d7c1b36b5",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "73f263a7-7556-49a6-9a38-2ee62a237ea3",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "a98a5169-8f87-4056-b9c5-20df82f9ead9",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                680
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "45157399-13e8-4c6e-b5d2-edf545f4fc6a",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser1').item.json.x }}, {{ $('Coordinate Parser1').item.json.y }})\""
              },
              "id": "a19b856f-f18a-4432-9fc8-feabd0a48515",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                660
              ],
              "typeVersion": 1,
              "id": "a3b582e7-b235-4ada-a3e8-c40407fa6b7f",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "735df227-4f90-4ea6-877e-5a9eeb03d5e4",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "adfbc648-0d8b-4bca-b34f-7e36ab6c72a5",
              "name": "Locate On Screen3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                900
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "eefa5550-b885-4bfe-bbb7-1350fa53d125",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser2').item.json.x }}, {{ $('Coordinate Parser2').item.json.y }})\""
              },
              "id": "301e4d6d-0f82-4492-8607-80afd464c426",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Aceptar\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                880
              ],
              "typeVersion": 1,
              "id": "13d9e129-79e1-4a99-bd19-2052fd770d17",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "5a86742e-33b5-4796-81ae-eca1f251e166",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                1120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "fc989775-8f0b-40cd-bf1e-6f02193620ec",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                1120
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2abd1615-03a2-4cdd-a732-2b7159b2275e",
              "name": "Coordinate Parser3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                1120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser3').item.json.x}}, {{ $('Coordinate Parser3').item.json.y }})\""
              },
              "id": "7ed82066-7921-42db-a60b-e7b841ea4ef2",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                1120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                1100
              ],
              "typeVersion": 1,
              "id": "0705af3a-db9b-4343-a51c-b0c1831bb6c7",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
              },
              "id": "968ac5b1-0a18-459c-b6ce-2f3509474d8e",
              "name": "OpenBrowserCmd",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -2540,
                240
              ],
              "alwaysOutputData": false,
              "executeOnce": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "b11c08e7-d6f1-4240-8053-8d61c9771cd4",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                1340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AreaTrabajo-CD.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "23eccd16-8a76-4e84-8d80-24686688e270",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                1340
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "671c0876-8b28-416d-bf33-d2e93d7bec60",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                1340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser6').item.json.x }}, {{ $('Coordinate Parser6').item.json.y -10}})\""
              },
              "id": "cc89447a-6842-43ff-9a23-41d47aca8d50",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1280,
                1340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                1320
              ],
              "typeVersion": 1,
              "id": "397ddd82-c397-4b10-97ef-7894f6924cf6",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "700e6827-63d8-4adb-8080-555d87af2275",
              "name": "Save Screenshot7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                1560
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Generar-CD.png', grayscale=True, confidence=0.9))\""
              },
              "id": "0db32c07-5cf7-4c6f-9826-5cb1140c1c89",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                1560
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "431fbbf6-afe0-4e98-b16b-9088c13e1103",
              "name": "Coordinate Parser7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                1560
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser7').item.json.x }}, {{ $('Coordinate Parser7').item.json.y }})\""
              },
              "id": "d71f31cb-0b1a-47b3-a16a-cc10ea31756a",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                1560
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Generar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                1540
              ],
              "typeVersion": 1,
              "id": "f2c529d3-3ccb-4bad-a4e1-15bd19c7bae5",
              "name": "Sticky Note6"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(8); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "0c45f935-c3aa-44d2-b037-3a7319ebe941",
              "name": "Save Screenshot8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                1780
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Generar-Requerimientos-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "906e2c8f-292c-455a-9fc9-e55356e6f82f",
              "name": "Locate On Screen8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                1780
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "92e625c3-5d93-422e-84eb-2d5a6e5b2bf8",
              "name": "Coordinate Parser8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                1780
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser8').item.json.x }}, {{ $('Coordinate Parser8').item.json.y }})\""
              },
              "id": "a170359f-ccd2-4b0f-8b1c-9813e5206945",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                1780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Generar requerimientos\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                1760
              ],
              "typeVersion": 1,
              "id": "5e46d113-7e19-462d-8959-69fd4db0e5a5",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "inputSource": "jsonExample",
                "jsonExample": "{\n\"query\": \n\"cespedes esteban, inscripcion autonomo, 15\\ndonaire pablo ruben, inscripcion autonomo, 15\\ncunningham martin, inscripcion autonomo, 15\\ndelpino nicolas abel, inscripcion autonomo, 15\\nferreyra amilcar, inscripcion autonomo, 15\\nferreyra julian andres, inscripcion autonomo, 15\\nmarcelo gamalero, inscripcion autonomo, 15\\nmassa agustin, inscripcion autonomo, 15\\ncespedes esteban, pago poliza acc. personales, 17\\ndonaire pablo ruben, pago poliza acc. personales, 6\\ncunningham martin, pago poliza acc. personales, 14\\ndelpino nicolas abel, pago poliza acc. personales, 14\\nferreyra amilcar, pago poliza acc. personales, 14\\nferreyra julian andres, pago poliza acc. personales, 12\\nmarcelo gamalero, pago poliza acc. personales, 15\\nmassa agustin, pago poliza acc. personales, 17\"\n}"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -2740,
                240
              ],
              "id": "88ea1817-0a36-4a66-b7bb-8cc9467280e0",
              "name": "Input"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(4);pyautogui.click(675, {{ $json.y +410}})\""
              },
              "id": "afd6de4c-de39-48e0-9872-1ce68f2b4884",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                2660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                2640
              ],
              "typeVersion": 1,
              "id": "24182813-8eb7-4df2-ba25-240bcd6e4f75",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(5); direc = '{{$('Edit Fields').item.json.direc}}';img = pyautogui.screenshot(region=(650,405, 550, 300)); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png')\""
              },
              "id": "e60eb47d-6864-4a4c-9af4-060684e0fb02",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1360,
                2660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import time; time.sleep(3);import pyautogui; pyautogui.moveTo(1028, 500); pyautogui.scroll(-265)\""
              },
              "id": "4372fb77-a103-47d1-8435-e47311be526d",
              "name": "Save Screenshot18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1120,
                2460
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "={{ $('Loop Over Items').item.json.name }}",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "b44344a2-decd-47b2-9e2c-a72897f7baa7",
              "name": "Find OCR Word Input",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -1120,
                2660
              ],
              "notesInFlow": false,
              "notes": "Optional parser that helps manage the output of local ocr"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "55bba2cf-1bcc-4a91-9d48-8ba0d72b4e22",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                2000
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Generar-Personal-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "92812a9f-8233-4ec3-a301-f0571ebeb64e",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                2000
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "bc39fcfe-7f20-4823-a8c7-e85a931187d8",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                2000
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser9').item.json.x }}, {{ $('Coordinate Parser9').item.json.y }})\""
              },
              "id": "1295ac4c-ef17-4e2b-bd10-ce38edf33a72",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                2000
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion \"Personal\"\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                1980
              ],
              "typeVersion": 1,
              "id": "275ed06f-cf04-4a32-a9cd-d6d6eea7ae77",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "189f4579-a8f0-4b34-977e-88389efa100e",
              "name": "Save Screenshot10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                2220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Generar-Sobres-CD.png', grayscale=True, confidence=0.6))\""
              },
              "id": "c6c5b174-4fbb-491d-b763-5a7da992bc14",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                2220
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "88f082f3-3836-45f2-842a-2b782ecc9e5e",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                2220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser10').item.json.x }}, {{ $('Coordinate Parser10').item.json.y }})\""
              },
              "id": "7ac92ed3-2a07-40d2-b9c3-5b07e2c0f0da",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                2220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion \"Sobres\"\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                2200
              ],
              "typeVersion": 1,
              "id": "2522064a-c851-4270-8757-628381aa9eb1",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "7aafc297-c6ab-4d84-840e-40843b548cf1",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                2440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Generar-{{$json.fileName}}-CD.png', grayscale=True, confidence=0.7))\""
              },
              "id": "a239e757-efb0-40e2-9a6a-9d0e6c7cb087",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1360,
                2440
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d164d965-5338-4640-bed9-48c8d35a8459",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -920,
                2440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser11').item.json.x }}, {{ $('Coordinate Parser11').item.json.y }})\""
              },
              "id": "50ea4297-6418-4c3b-81e5-8f183ce57158",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                2440
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Imagen Generar c/ Loop\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                2420
              ],
              "typeVersion": 1,
              "id": "eb09826a-e4c0-4458-b427-e6d3a7611c28",
              "name": "Sticky Note11"
            },
            {
              "parameters": {
                "command": "=python -c \"import time; time.sleep(3);import pyautogui; pyautogui.moveTo(650,410,); pyautogui.scroll(-265)\""
              },
              "id": "9c60ac63-9645-452a-866a-fd548b771832",
              "name": "Save Screenshot19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1940,
                2660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json;direc = '{{$('Edit Fields').item.json.direc}}'; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image =ImageEnhance.Contrast(image).enhance(0.5).filter(ImageFilter.SHARPEN);img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 3'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 30]; print(json.dumps(results, indent=2));image.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png')"
              },
              "id": "4fad2379-f4ef-469e-9784-0c2356e88e7f",
              "name": "Local OCR",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1240,
                2660
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -1520,
                2660
              ],
              "id": "6d4a6232-cbe6-44b2-b507-7e994aaf8c3d",
              "name": "Loop Over Items"
            },
            {
              "parameters": {
                "jsCode": "const personas = $('Loop Over Items2').item.json.personas;\n\nreturn personas.map(p => ({\n  json: { nombre: p.nombre }\n}));"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1820,
                2660
              ],
              "id": "c81abbd5-db26-49bc-8206-fa1c3975309d",
              "name": "Code5",
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "d4707b4d-7bf3-4ad5-acac-386b0c18baa0",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1800,
                2880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\OutTest.png', grayscale=True, confidence=0.8))\""
              },
              "id": "317b7d1c-7722-4449-ad5f-496a303179d6",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -1620,
                2880
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "82e1e97f-de60-4c74-88c6-d14d74e9741e",
              "name": "Coordinate Parser12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1460,
                2880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser12').item.json.x }}, {{ $('Coordinate Parser12').item.json.y }}); time.sleep(2);pyautogui.click({{ $('Coordinate Parser12').item.json.x }}, {{ $('Coordinate Parser12').item.json.y }})\""
              },
              "id": "2830ef76-9f9e-458c-84ae-fb6c8225a877",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -680,
                2880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -2120,
                2860
              ],
              "typeVersion": 1,
              "id": "6a45baa5-5f9a-4f85-a01c-4cb3655b854c",
              "name": "Sticky Note13"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "86ec24c0-2e3e-4afe-9701-4696b1958629",
                      "leftValue": "={{ $json.foundPhrase.error }}",
                      "rightValue": "Error",
                      "operator": {
                        "type": "string",
                        "operation": "exists",
                        "singleValue": true
                      }
                    },
                    {
                      "id": "3ba3e9fc-c962-473f-82ec-700499107644",
                      "leftValue": "={{ $json.status }}",
                      "rightValue": "Pendiente",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "or"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -880,
                2660
              ],
              "id": "3fb5cba5-f601-49a6-bd98-d9eb4641a65c",
              "name": "If"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6) is not None)\"\n"
              },
              "id": "3699e546-f635-40cc-83e0-4044c34107f0",
              "name": "Locate On Screen16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -840,
                1340
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1de11e8e-1b46-4798-b4fe-c0d9c0f2bac0",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -680,
                1340
              ],
              "id": "06396ecd-cf23-4167-a00b-525b32101676",
              "name": "If1"
            },
            {
              "parameters": {
                "jsCode": "const findPhrase = items[0].json[\"Find Phrase\"];\n\nlet stdoutRaw = items[0].json[\"stdout\"];\nlet stdout;\n\nif (typeof stdoutRaw === 'string') {\n  try {\n    stdout = JSON.parse(stdoutRaw);\n  } catch (e) {\n    throw new Error('No se pudo parsear stdout como JSON array');\n  }\n} else if (Array.isArray(stdoutRaw)) {\n  stdout = stdoutRaw;\n} else {\n  throw new Error('stdout no es un array ni string JSON válido');\n}\n\n// Levenshtein\nfunction levenshtein(a, b) {\n  const matrix = [];\n  for (let i = 0; i <= b.length; i++) matrix[i] = [i];\n  for (let j = 0; j <= a.length; j++) matrix[0][j] = j;\n  for (let i = 1; i <= b.length; i++) {\n    for (let j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1).toLowerCase() === a.charAt(j - 1).toLowerCase()) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j] + 1\n        );\n      }\n    }\n  }\n  return matrix[b.length][a.length];\n}\n\n// Similitud\nfunction similarity(s1, s2) {\n  if (!s1 || !s2) return 0;\n  const normalize = str => str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n  const longer = s1.length > s2.length ? normalize(s1) : normalize(s2);\n  const shorter = s1.length > s2.length ? normalize(s2) : normalize(s1);\n  const longerLength = longer.length;\n  if (longerLength === 0) return 1.0;\n  const distance = levenshtein(longer, shorter);\n  return (longerLength - distance) / longerLength;\n}\n\n// Lista de variantes explícitas de \"Pendiente\"\nconst knownVariants = [\"pendiente\", \"oendiente\", \"pendiemte\", \"pendinte\"];\n\n// Detección de estado\nfunction isPending(text) {\n  const normalize = str => str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n  const words = text.split(/\\s+/).map(normalize);\n  for (const word of words) {\n    if (knownVariants.includes(word)) return true;\n    if (similarity(word, \"pendiente\") >= 0.6) return true;\n  }\n  return false;\n}\n\n// Procesamiento principal\nconst results = stdout.map(item => {\n  const score = similarity(findPhrase, item.text);\n  const status = isPending(item.text) ? \"Pendiente\" : \"Ubicación detectada\";\n  return {\n    ...item,\n    similarityScore: score,\n    status\n  };\n});\n\nresults.sort((a, b) => b.similarityScore - a.similarityScore);\n\nreturn results.slice(0, 3).map(r => ({ json: r }));"
              },
              "id": "d45bb616-1359-4034-b942-09bc854f1943",
              "name": "OCR Word1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1000,
                2660
              ],
              "notesInFlow": false,
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "jsCode": "const currentOuterIndex = $('Loop Over Items2').context.currentIndex;\n\n// Obtener el valor anterior desde el contexto\nconst previousIndex = $data.get('previousIndex') ?? -1;\n\nconst item = $input.item;\n\n// Comparar e indicar si debe hacer reset\nif (currentOuterIndex !== previousIndex) {\n  item.json.resetLoop = true;\n  $data.set('previousIndex', currentOuterIndex); // actualizar para la próxima vuelta\n} else {\n  item.json.resetLoop = false;\n}\n\nreturn [item];"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -2060,
                2660
              ],
              "id": "b3b13177-8b3e-4ffd-a012-da18f2ee7b77",
              "name": "Code7",
              "disabled": true
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -2400,
                240
              ],
              "id": "41baee7d-ce4a-41f6-bb20-d6a426c40a55",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "jsCode": "// Para el nombre del archivo\nconst inputQuery = $('Input').item.json.query;\nconst parts = inputQuery.split(': ');\nconst fileName = parts[0];\n\nreturn [{\n  json: {\n    fileName: fileName\n  }\n}];"
              },
              "id": "d1ea8170-ed01-4e50-b515-bea362060180",
              "name": "Coordinate Parser24",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1600,
                2440
              ]
            },
            {
              "parameters": {
                "jsCode": "const inputQuery = $('Input').item.json.query;\nconst parts = inputQuery.split(': ');\nconst namesString = parts[1];\nconst namesArray = namesString.split(', ');\n\nconst outputItems = [];\nfor (const name of namesArray) {\n  outputItems.push({\n    json: {\n      name: name,\n    },\n  });\n}\n\nreturn outputItems;"
              },
              "id": "7df00120-67b2-4735-9ab0-b499a3610692",
              "name": "Coordinate Parser25",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1700,
                2660
              ]
            },
            {
              "parameters": {
                "jsCode": "const findPhrase = items[0].json[\"Find Phrase\"];\n\nlet stdoutRaw = items[0].json[\"stdout\"];\nlet stdout;\n\nif (typeof stdoutRaw === 'string') {\n  try {\n    stdout = JSON.parse(stdoutRaw);\n  } catch (e) {\n    throw new Error('No se pudo parsear stdout como JSON array');\n  }\n} else if (Array.isArray(stdoutRaw)) {\n  stdout = stdoutRaw;\n} else {\n  throw new Error('stdout no es un array ni string JSON válido');\n}\n\nfunction levenshtein(a, b) {\n  const matrix = [];\n\n  for (let i = 0; i <= b.length; i++) {\n    matrix[i] = [i];\n  }\n  for (let j = 0; j <= a.length; j++) {\n    matrix[0][j] = j;\n  }\n\n  for (let i = 1; i <= b.length; i++) {\n    for (let j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1).toUpperCase() === a.charAt(j - 1).toUpperCase()) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j] + 1\n        );\n      }\n    }\n  }\n\n  return matrix[b.length][a.length];\n}\n\nfunction similarity(s1, s2) {\n  if (!s1 || !s2) return 0;\n  const longer = s1.length > s2.length ? s1 : s2;\n  const shorter = s1.length > s2.length ? s2 : s1;\n  const longerLength = longer.length;\n  if (longerLength === 0) return 1.0;\n\n  const distance = levenshtein(longer, shorter);\n  return (longerLength - distance) / longerLength;\n}\n\nconst results = stdout.map(item => {\n  const score = similarity(findPhrase, item.text);\n  return {\n    ...item,\n    similarityScore: score\n  };\n});\n\nresults.sort((a, b) => b.similarityScore - a.similarityScore);\n\nreturn results.slice(0, 3).map(r => ({ json: r }));"
              },
              "id": "b46c1300-b192-491f-9c84-96a5846a95b1",
              "name": "OCR Funcional",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -1000,
                2800
              ],
              "notesInFlow": false,
              "notes": "Required with Parser"
            }
          ],
          "connections": {
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "If2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields1": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot5": {
              "main": [
                [
                  {
                    "node": "Locate On Screen5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser5": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot15": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser15": {
              "main": [
                [
                  {
                    "node": "Click16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click16": {
              "main": [
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot16": {
              "main": [
                [
                  {
                    "node": "Locate On Screen17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen17": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser16": {
              "main": [
                [
                  {
                    "node": "Click17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click17": {
              "main": [
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd1": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot21": {
              "main": [
                [
                  {
                    "node": "Locate On Screen18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen18": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser17": {
              "main": [
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click18": {
              "main": [
                [
                  {
                    "node": "Locate On Screen25",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot22": {
              "main": [
                [
                  {
                    "node": "Locate On Screen19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen19": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser18": {
              "main": [
                [
                  {
                    "node": "Click19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click19": {
              "main": [
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot23": {
              "main": [
                [
                  {
                    "node": "Locate On Screen20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen20": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click20": {
              "main": [
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click21": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot24": {
              "main": [
                [
                  {
                    "node": "Local OCR4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot25": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Find OCR Word Input1": {
              "main": [
                [
                  {
                    "node": "OCR Word3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot26": {
              "main": [
                [
                  {
                    "node": "Locate On Screen21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen21": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser20": {
              "main": [
                [
                  {
                    "node": "Click22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click22": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot27": {
              "main": [
                [
                  {
                    "node": "Locate On Screen22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen22": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser21": {
              "main": [
                [
                  {
                    "node": "Click23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click23": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot28": {
              "main": [
                [
                  {
                    "node": "Locate On Screen23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen23": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser22",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser22": {
              "main": [
                [
                  {
                    "node": "Click24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click24": {
              "main": [
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot29": {
              "main": [
                [
                  {
                    "node": "Code6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR4": {
              "main": [
                [
                  {
                    "node": "Find OCR Word Input1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot30",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields4": {
              "main": [
                [
                  {
                    "node": "Code",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code": {
              "main": [
                [
                  {
                    "node": "Code4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code4": {
              "main": [
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items3": {
              "main": [
                [],
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code6": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot30": {
              "main": [
                [
                  {
                    "node": "Locate On Screen24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen24": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser23": {
              "main": [
                [
                  {
                    "node": "Click25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click25": {
              "main": [
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If3": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot31": {
              "main": [
                [
                  {
                    "node": "Local OCR6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen25": {
              "main": [
                [
                  {
                    "node": "If4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If4": {
              "main": [
                [
                  {
                    "node": "Edit Fields4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Word3": {
              "main": [
                [
                  {
                    "node": "If3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Locate On Screen3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser3": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot7": {
              "main": [
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser7": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot8": {
              "main": [
                [
                  {
                    "node": "Locate On Screen8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser8": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Input": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [],
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Local OCR",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot18": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Find OCR Word Input": {
              "main": [
                [
                  {
                    "node": "OCR Word1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Code7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot19": {
              "main": [
                [
                  {
                    "node": "Code5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR": {
              "main": [
                [
                  {
                    "node": "Find OCR Word Input",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser12": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen16": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Word1": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code7": {
              "main": [
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser24": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser25": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "648c9cd2-c831-4ea0-89bb-bb73c8a53c7f",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-20T17:18:32.002Z",
          "updatedAt": "2025-08-20T17:18:32.002Z",
          "id": "EWEu4ijJeQjLu9C7",
          "name": "N8N-BackUp-Testing Export",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "432e21fe-fa52-4c77-9c73-8871e81af5f5",
              "name": "On clicking 'execute'",
              "type": "n8n-nodes-base.manualTrigger",
              "position": [
                -380,
                0
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "628c3517-6dd2-4342-b8f8-95c042c3a69c",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "position": [
                140,
                100
              ],
              "typeVersion": 3
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {}
                  ]
                }
              },
              "id": "1b1c708b-6f29-40db-bc6f-aac56cf14e80",
              "name": "Schedule Trigger",
              "type": "n8n-nodes-base.scheduleTrigger",
              "position": [
                -380,
                180
              ],
              "typeVersion": 1.2
            },
            {
              "parameters": {
                "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
                "height": 417,
                "width": 385,
                "color": 4
              },
              "id": "680e2a74-8131-49c5-b744-82b4803caad7",
              "name": "Sticky Note1",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -860,
                -80
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "## Main workflow loop",
                "height": 416,
                "width": 1413,
                "color": 7
              },
              "id": "1fe09e41-0b1f-4232-9787-344d43e6c326",
              "name": "Sticky Note2",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -440,
                -80
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "workflowId": "=sKItisoN4WjUR0bh",
                "mode": "each",
                "options": {}
              },
              "id": "12465585-0472-4aa8-bd20-a8bab070e4ca",
              "name": "Execute Workflow",
              "type": "n8n-nodes-base.executeWorkflow",
              "position": [
                360,
                120
              ],
              "typeVersion": 1,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase6').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                820,
                140
              ],
              "id": "c15e1b33-6d88-437f-88c6-5ee881e4b829",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=FailBackUp: {{ $('Loop Over Items').item.json.id }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                680,
                140
              ],
              "id": "6417a44e-4dd0-4f43-ba52-ded8f0978289",
              "name": "Edit Fields3"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                540,
                140
              ],
              "id": "4e9985df-58e1-4f95-90a3-a83d55c351cb",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com",
                "subject": "BackUp-Workflows-N8N",
                "emailType": "text",
                "message": "= Backup has completed - workflows have been processed.✅\nErrores: {{ $json.Texto }}",
                "options": {},
                "path": "c404ddac-28ff-4193-9daf-1220d9fc3cc2"
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                680,
                -40
              ],
              "id": "24b12028-a148-4a27-8ff8-55f481b8f769",
              "name": "Mensaje",
              "webhookId": "c404ddac-28ff-4193-9daf-1220d9fc3cc2",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "keep": "lastItems"
              },
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                360,
                -40
              ],
              "id": "db2327f6-de46-415d-97d0-a105e0d07ac8",
              "name": "Limit"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                540,
                -40
              ],
              "id": "ed151ef5-afaa-4be1-b4c5-79254b9a2a3f",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "=\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -200,
                100
              ],
              "id": "10a3d9fe-c31c-4b93-a291-f5b5a7082302",
              "name": "Supabase7",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "filters": {},
                "requestOptions": {}
              },
              "id": "b01a09ed-3c24-4708-91c4-95f0daa987df",
              "name": "n8n1",
              "type": "n8n-nodes-base.n8n",
              "position": [
                -60,
                100
              ],
              "typeVersion": 1,
              "credentials": {
                "n8nApi": {
                  "id": "9InbP3eA3I6HvwbC",
                  "name": "n8n account 2"
                }
              }
            }
          ],
          "connections": {
            "On clicking 'execute'": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Limit",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Workflow",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Workflow": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields3": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Mensaje",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase7": {
              "main": [
                [
                  {
                    "node": "n8n1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "n8n1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "c733b1b7-d246-4588-a499-3b96d772b97e",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-19T13:41:08.674Z",
          "updatedAt": "2025-08-19T16:15:59.000Z",
          "id": "GuvzZ9UnxJAbLD1s",
          "name": "Cambios de estado-Proyectos-Odoo",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "resource": "custom",
                "customResource": "=x_historial_de_estados",
                "operation": "getAll",
                "options": {
                  "fieldsList": [
                    "x_name",
                    "x_studio_log_estadoanterior",
                    "x_studio_log_estadonuevo",
                    "x_studio_log_fecha_y_hora",
                    "x_studio_log_registro_relacionado",
                    "x_studio_log_ubicacionfinal"
                  ]
                },
                "filterRequest": {
                  "filter": [
                    {
                      "fieldName": "x_studio_log_fecha_y_hora",
                      "operator": "greaterOrEqual",
                      "value": "={{ $now.endOf('day').setZone('UTC').toFormat(\"yyyy-MM-dd'T'HH:mm:ss\") }}"
                    },
                    {
                      "fieldName": "x_studio_log_fecha_y_hora",
                      "operator": "lesserOrEqual",
                      "value": "={{ $now.startOf('day').setZone('UTC').toFormat(\"yyyy-MM-dd'T'HH:mm:ss\") }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.odoo",
              "typeVersion": 1,
              "position": [
                -40,
                160
              ],
              "id": "6f6f33f0-edd1-4823-b2d1-c60d0b9736aa",
              "name": "Odoo",
              "credentials": {
                "odooApi": {
                  "id": "ooGIuWHb1pyZFMBG",
                  "name": "Odoo account"
                }
              }
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                120,
                160
              ],
              "id": "43983fe1-c8dd-47f8-9fac-f3cbf254c1dc",
              "name": "Loop Over Items"
            },
            {
              "parameters": {
                "operation": "append",
                "documentId": {
                  "__rl": true,
                  "value": "https://docs.google.com/spreadsheets/d/1ixgdZmCh789cknygDjPpyrB8sRmnmJyUoXs0YNR-SBE/edit?gid=0#gid=0",
                  "mode": "url"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "Hoja 1",
                  "mode": "name"
                },
                "columns": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "id": "={{ $json.id }}",
                    "Name": "={{ $json.x_name }}",
                    "x_studio_log_estadoanterior": "={{ $json.x_studio_log_estadoanterior }}",
                    "x_studio_log_estadonuevo": "={{ $json.x_studio_log_estadonuevo }}",
                    "x_studio_log_fecha_y_hora": "={{ $json.x_studio_log_fecha_y_hora }}",
                    "x_studio_log_registro_relacionado": "=",
                    "x_studio_log_ubicacionfinal": "="
                  },
                  "matchingColumns": [
                    "id"
                  ],
                  "schema": [
                    {
                      "id": "Name",
                      "displayName": "Name",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "Origen",
                      "displayName": "Origen",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "Destino",
                      "displayName": "Destino",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "Timestamp",
                      "displayName": "Timestamp",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "id",
                      "displayName": "id",
                      "required": false,
                      "defaultMatch": true,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "x_name",
                      "displayName": "x_name",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "x_studio_log_estadoanterior",
                      "displayName": "x_studio_log_estadoanterior",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "x_studio_log_estadonuevo",
                      "displayName": "x_studio_log_estadonuevo",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "x_studio_log_fecha_y_hora",
                      "displayName": "x_studio_log_fecha_y_hora",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "x_studio_log_registro_relacionado",
                      "displayName": "x_studio_log_registro_relacionado",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "x_studio_log_ubicacionfinal",
                      "displayName": "x_studio_log_ubicacionfinal",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "row_number",
                      "displayName": "row_number",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "readOnly": true,
                      "removed": true
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleSheets",
              "typeVersion": 4.5,
              "position": [
                300,
                260
              ],
              "id": "4383cffa-94dd-433a-b9e2-45863eb5dd23",
              "name": "Google Sheets",
              "alwaysOutputData": true,
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "fVogXXZQhTIUJMyk",
                  "name": "Google Sheets account"
                }
              }
            },
            {
              "parameters": {
                "resource": "custom",
                "customResource": "=x_historial_de_estados",
                "operation": "getAll",
                "options": {
                  "fieldsList": [
                    "x_name",
                    "x_studio_log_estadoanterior",
                    "x_studio_log_estadonuevo",
                    "x_studio_log_fecha_y_hora",
                    "x_studio_log_registro_relacionado",
                    "x_studio_log_ubicacionfinal"
                  ]
                },
                "filterRequest": {
                  "filter": [
                    {
                      "fieldName": "x_studio_log_fecha_y_hora",
                      "operator": "greaterOrEqual",
                      "value": "={{ $now.endOf('day').setZone('UTC').toFormat(\"yyyy-MM-dd'T'HH:mm:ss\") }}"
                    },
                    {
                      "fieldName": "x_studio_log_fecha_y_hora",
                      "operator": "lesserOrEqual",
                      "value": "={{ $now.startOf('day').setZone('UTC').toFormat(\"yyyy-MM-dd'T'HH:mm:ss\") }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.odoo",
              "typeVersion": 1,
              "position": [
                -40,
                320
              ],
              "id": "86cb967c-a307-456a-8353-3d8e11ad0b48",
              "name": "Odoo3",
              "credentials": {
                "odooApi": {
                  "id": "ooGIuWHb1pyZFMBG",
                  "name": "Odoo account"
                }
              }
            },
            {
              "parameters": {
                "content": "## Cambios de Estado del día\nChequea los cambios de estados\nde los productos y carga en sheets \nlos que sean de hoy",
                "height": 420,
                "width": 1120,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -660,
                60
              ],
              "id": "aea941c0-ed30-4b20-879a-86820d4a7f78",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "aada2151-665c-465f-b422-a2ca55180ffe",
                      "name": "yesterday",
                      "value": "2025-08-17T02:59:59",
                      "type": "string"
                    },
                    {
                      "id": "3cb275d2-c59c-441e-a9a6-4749cf9a617d",
                      "name": "Comienzo del día",
                      "value": "={{ $now.endOf('day').setZone('UTC').toFormat(\"yyyy-MM-dd'T'HH:mm:ss\") }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -180,
                160
              ],
              "id": "508dbb0e-0921-4bd5-a930-79d06e44262e",
              "name": "Opcional, FiltroPersonalizado"
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -340,
                160
              ],
              "id": "8eba8c02-efeb-414c-be55-01986c12f199",
              "name": "Test"
            },
            {
              "parameters": {
                "resource": "custom",
                "operation": "getAll",
                "options": {}
              },
              "type": "n8n-nodes-base.odoo",
              "typeVersion": 1,
              "position": [
                -160,
                -100
              ],
              "id": "654c48a7-19cf-49b9-89a0-daec7eca8242",
              "name": "Odoo1",
              "credentials": {
                "odooApi": {
                  "id": "ooGIuWHb1pyZFMBG",
                  "name": "Odoo account"
                }
              }
            }
          ],
          "connections": {
            "Odoo": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [],
                [
                  {
                    "node": "Google Sheets",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Sheets": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Opcional, FiltroPersonalizado": {
              "main": [
                [
                  {
                    "node": "Odoo",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Test": {
              "main": [
                [
                  {
                    "node": "Opcional, FiltroPersonalizado",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "2b0ac56b-4aad-48ea-9a2b-87a71e9985c4",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-02-25T15:19:31.231Z",
          "updatedAt": "2025-02-25T15:28:21.000Z",
          "id": "H3RFGADo3fmarsRD",
          "name": "Challenge Original File",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "f00a2297-8631-4d11-962c-852d802b40aa",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -1220,
                160
              ]
            },
            {
              "parameters": {
                "command": "=start {{ $json['Web Browser'] }} {{ $json.URL }}"
              },
              "id": "9e7036a0-ee11-458d-875c-f018bce7cf2b",
              "name": "Open Browser To1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -900,
                180
              ],
              "notesInFlow": true
            },
            {
              "parameters": {
                "operation": "html",
                "options": {}
              },
              "id": "58801b29-afee-42d9-b869-b6439a7cad38",
              "name": "Extract from File",
              "type": "n8n-nodes-base.extractFromFile",
              "typeVersion": 1,
              "position": [
                -220,
                200
              ]
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "91f68523-b40a-48d5-a98e-0d74c93d4e91",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                0,
                0
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
                      "name": "Web Browser",
                      "value": "msedge",
                      "type": "string"
                    },
                    {
                      "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
                      "name": "URL",
                      "value": "https://rpachallenge.com/",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "b0007bcb-2a8d-44b3-bdb8-cacb45f5d08c",
              "name": "Open to Browser",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -1080,
                160
              ],
              "notesInFlow": false,
              "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
            },
            {
              "parameters": {
                "url": "https://rpachallenge.com/assets/downloadFiles/challenge.xlsx",
                "options": {
                  "response": {
                    "response": {
                      "responseFormat": "file"
                    }
                  }
                }
              },
              "id": "d69f14d7-b6ca-4706-8943-1eb9c5a16f69",
              "name": "Get RPA Data",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -340,
                180
              ]
            },
            {
              "parameters": {
                "content": "## Email",
                "height": 343.0861018728989,
                "width": 1082.1595090310907
              },
              "id": "0be3c0e2-e67d-4519-95dc-9f7410bff0e4",
              "name": "Sticky Note8",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                320,
                100
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "93d1f823-82c5-4a47-9adc-49615815f1fe",
              "name": "OCR Find Email & Parse",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                760,
                520
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "e9ff54a7-b831-4287-895f-94f6894dbc3f",
              "name": "Add Values to coordinates",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                900,
                520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['First Name'] }}')\""
              },
              "id": "30d4e130-b13e-4d0d-b9d8-4ca495bb4e74",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1060,
                540
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## First Name\n",
                "height": 343.0861018728989,
                "width": 1077.5774118855604
              },
              "id": "99e91bb6-f5c0-4c18-85ba-e05678c3690d",
              "name": "Sticky Note9",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                320,
                460
              ]
            },
            {
              "parameters": {
                "content": "## Last Name\n\n",
                "height": 343.0861018728989,
                "width": 1087.8026955349853
              },
              "id": "dd4d005f-b9cd-458a-ab9b-f6276ed10202",
              "name": "Sticky Note10",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                320,
                820
              ]
            },
            {
              "parameters": {
                "content": "## Company Name\n",
                "height": 343.0861018728989,
                "width": 1078.4475887120027
              },
              "id": "3d543c30-8d95-4dc3-9d1e-2525d6101f9a",
              "name": "Sticky Note11",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                320,
                1160
              ]
            },
            {
              "parameters": {
                "content": "## Phone Number\n",
                "height": 343.0861018728989,
                "width": 1083.573208068673
              },
              "id": "9a8b1a13-8e4d-488a-8f13-aedb3b3f6f73",
              "name": "Sticky Note12",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                320,
                1500
              ]
            },
            {
              "parameters": {
                "content": "## Role In Company",
                "height": 343.0861018728989,
                "width": 1081.4584643355167
              },
              "id": "969d4f02-1e77-4b59-8c0b-e878eb488143",
              "name": "Sticky Note13",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                320,
                1860
              ]
            },
            {
              "parameters": {
                "content": "## Address",
                "height": 343.0861018728989,
                "width": 1072.999489402891
              },
              "id": "a0df173a-335a-473e-a29b-0007d121fbb6",
              "name": "Sticky Note14",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                320,
                2280
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "First Name",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "129fc727-61c4-45e9-a05a-ce28aac37420",
              "name": "Edit Fields",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                600,
                540
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\Users\\Dell\\.n8n\\Screenshots\\MainScreen.png')\""
              },
              "id": "4c1cbdd3-ccac-414f-ba06-192c10ffff12",
              "name": "Take Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                40,
                180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = r'C:\\Users\\Dell\\.n8n\\Screenshots\\MainScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(2).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 11'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "9e0a106b-d4bb-45c1-98f3-c0ffc70bd34f",
              "name": "OCR10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                160,
                180
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "a859d5ab-8c98-4d8f-a4c8-e2d8a6d03eae",
              "name": "OCR Find Email & Parse7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                720,
                220
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "d4bcb544-3f4a-4994-9aac-d32be8c346f0",
              "name": "Add Values to coordinates7",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                880,
                220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json.Email }}')\""
              },
              "id": "b4d94c2b-053a-4017-9ad3-eca4786a24e0",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1040,
                220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Email",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "71fc7af4-6276-474b-b806-25d61c4a1460",
              "name": "Edit Fields1",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                580,
                220
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "91b0afa6-6f1b-4142-9b92-35e8bbf154d7",
              "name": "OCR Find Email & Parse1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                740,
                960
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "eb56a52d-87ef-4ac9-9870-8b9977a70df1",
              "name": "Add Values to coordinates1",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                880,
                960
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Last Name",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "84e07826-2e3f-45cc-9b12-a571088b8b4a",
              "name": "Edit Fields2",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                600,
                960
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "25613b65-8925-4e4a-97a1-88c231f72a8d",
              "name": "OCR Find Email & Parse2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                760,
                1300
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "96fb4ed9-596f-4701-9839-e5adbe09fd2b",
              "name": "Add Values to coordinates2",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                900,
                1300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['Company Name'] }}')\""
              },
              "id": "9e5e4c74-442a-474b-8079-cb7b37efb8ce",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Company Name",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "679ac4ed-0213-47fa-8d00-dc4e72c50d5f",
              "name": "Edit Fields3",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                620,
                1300
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "e6a72066-667a-46af-b8f4-62458d4eb891",
              "name": "OCR Find Email & Parse3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                740,
                1680
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "1f8aabc3-9ccb-41b0-ad4a-0b622c99e1fe",
              "name": "Add Values to coordinates3",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                880,
                1700
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['Phone Number'] }}')\""
              },
              "id": "34401df2-fead-4ceb-9062-b3e4aa087999",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Phone Number",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "c3607e72-7f3c-4b6e-9d76-b4d9bb297754",
              "name": "Edit Fields4",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                600,
                1680
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "565198af-7ee2-4f8e-987f-a2d8fa50ac96",
              "name": "OCR Find Email & Parse4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                740,
                2060
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "c7e06ea4-1589-455a-9314-052852eee1af",
              "name": "Add Values to coordinates4",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                880,
                2060
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['Role in Company'] }}')\""
              },
              "id": "82294e2c-3f9d-4972-b87d-7b936aabdd8a",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1060,
                2060
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Role In Company",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "e3e8ce1e-578c-48b7-bd45-3ac291d950d6",
              "name": "Edit Fields5",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                600,
                2060
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "667e792e-5419-4b11-b92c-cfe4de460b65",
              "name": "OCR Find Email & Parse5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                740,
                2460
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "71079bcf-927d-4f1b-a578-19231452a542",
              "name": "Add Values to coordinates5",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                880,
                2480
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json.Address }}')\""
              },
              "id": "a47af6cf-55df-4ef8-8018-4401267d2c36",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1060,
                2460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Address",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "0b8a124e-a93e-4cc2-ae67-8f07208f0108",
              "name": "Edit Fields6",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                600,
                2460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Dell\\.n8n\\Screenshots\\submit button.PNG', grayscale=False, confidence=0.85))\" #Make sure Pillow is installed Use r prefix so backslash is used as character"
              },
              "id": "6f549d3a-5df7-4889-96a6-254c7423b662",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1460,
                2460
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\" "
              },
              "id": "f4f51cd3-153e-4637-bf0a-9d6aaf224eef",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1860,
                2460
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d03e91cb-6a1f-455d-a696-ad5fe889a731",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1680,
                2460
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ebc22405-64e2-4eca-9016-d9ab75b274fd",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -560,
                180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Dell\\.n8n\\Screenshots\\Start button.PNG', grayscale=False, confidence=0.85))\" #Make sure Pillow is installed Use r prefix so backslash is used as character"
              },
              "id": "9373f1f1-75cc-40ad-a648-45113eb05675",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -700,
                180
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\" "
              },
              "id": "88e1be26-0a9d-485b-8dea-4fb883aed636",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -380,
                260
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['Last Name '] }}')\""
              },
              "id": "a1f0b7a2-ec94-4ceb-aa06-05301175c859",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1060,
                960
              ],
              "onError": "continueErrorOutput"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Open to Browser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open Browser To1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Extract from File": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open to Browser": {
              "main": [
                [
                  {
                    "node": "Open Browser To1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get RPA Data": {
              "main": [
                [
                  {
                    "node": "Extract from File",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Edit Fields2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Take Screenshot11": {
              "main": [
                [
                  {
                    "node": "OCR10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR10": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse7": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates7": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields1": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse1": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates1": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields2": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse2": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates2": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Edit Fields4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields3": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse3": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates3": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Edit Fields5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields4": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse4": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates4": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Edit Fields6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields5": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse5": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates5": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields6": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Get RPA Data",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "68881ffc-9921-4e95-91bf-744af1ac3168",
          "triggerCount": 0,
          "tags": [
            {
              "createdAt": "2025-02-25T13:53:03.729Z",
              "updatedAt": "2025-02-25T13:53:03.729Z",
              "id": "9fssgBnptdZHZ04W",
              "name": "updated library"
            },
            {
              "createdAt": "2025-02-25T13:53:03.740Z",
              "updatedAt": "2025-02-25T13:53:03.740Z",
              "id": "f0G6tZbPfSP7GNtT",
              "name": "Testing"
            }
          ]
        }
      },
      {
        "json": {
          "createdAt": "2025-03-05T19:14:50.676Z",
          "updatedAt": "2025-06-02T15:15:11.000Z",
          "id": "JQaUFfHy4jVE74HE",
          "name": "N8N-LS-CNRyLD",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "efba742b-f4de-4fee-a863-f5c13ddaea2c",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -1540,
                -160
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
                      "name": "Web Browser",
                      "value": "chrome",
                      "type": "string"
                    },
                    {
                      "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
                      "name": "URL",
                      "value": "https://portalasegurado.papps.lasegunda.com.ar",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "d4d38334-ca8d-4347-893f-1545e084a8cf",
              "name": "Open to Browser",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -780,
                -240
              ],
              "notesInFlow": false,
              "disabled": true,
              "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
            },
            {
              "parameters": {
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://portalasegurado.papps.lasegunda.com.ar'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "c12a94c5-3749-4760-8899-8495e0034119",
              "name": "Open Browser To",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -560,
                -240
              ],
              "notesInFlow": true,
              "notes": "New Window start \"\" {{ $json['Web Browser'] }} --new-window {{ $json.URL }}\n"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(3);from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\Ls\\WorkingScreen.png')\""
              },
              "id": "a0b31034-cb9c-4a9e-859a-ebb73a0508bb",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                -120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc='{{$('direc5').item.json.direc}}';import time; time.sleep(3);print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Usuario-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "a0964775-f24d-4247-b90a-a002148fba8c",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                -120
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "342eb218-f3bb-46aa-97f3-b0cb04880b61",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                -120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x -130}}, {{ $('Coordinate Parser4').item.json.y +20}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
              },
              "id": "aa42dba2-fd10-45aa-b0cc-1bad74422040",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                -120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Contrasena-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "894fc4dd-0527-4cdc-a012-07574d6b2925",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                100
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ab554ea8-1aae-49dc-aed3-eab6754eb1be",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                300,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }},{{ $json.y }})\""
              },
              "id": "e1fa7ef1-5473-4631-bfba-88ba546bdee7",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Secreto y presiona\nIngresar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                80
              ],
              "typeVersion": 1,
              "id": "7d43955e-d942-45e6-a715-199a7cec1346",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "4f07cf59-674a-4360-96c8-a6a4cc0b94f7",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -780,
                -80
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1000,
                -80
              ],
              "id": "15102cd8-b6ab-45ad-a0ea-05935e573a50",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $('Supabase').item.json['Usuario AR'] }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    },
                    {
                      "id": "64cfe917-6ae9-4347-8ac4-af0952f5a7eb",
                      "leftValue": "={{ $('Supabase').item.json['Secret AR'] }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -560,
                -60
              ],
              "id": "18c8fbce-953d-4bbf-bac5-3941d02ec46a",
              "name": "If"
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -1540,
                20
              ],
              "id": "28109f89-3537-4b14-b58c-eb78922af434",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                -140
              ],
              "typeVersion": 1,
              "id": "e391b6ec-3463-4064-bfb9-d0f67adbabc7",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "content": "## Usuario/Clave Incorrecto\n**En caso de que el usuario\no la contrasena no funcionen\nlo suma a la lista de errores**",
                "height": 220,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                300
              ],
              "typeVersion": 1,
              "id": "cb50c8ff-fb3d-4f24-a01f-da81ecb11778",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Usuario-Contrasena-Incorrecto.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "bb6ede80-dff3-41aa-b526-f594e4b394ae",
              "name": "Click28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                360
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';pyautogui.doubleClick({{ $json.x -120}},{{ $json.y +15}} ); pyautogui.typewrite(r'{{ $('Supabase').item.json['Secret LS']}}')\""
              },
              "id": "2ea8d43c-ca1f-4d3c-8ef3-3512ec3507ba",
              "name": "Ingresa Secret",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Ingresar-LS.png', grayscale=True, confidence=0.6))\""
              },
              "id": "1f21d992-e1fa-468f-92f1-271769915232",
              "name": "Locate INICIAR",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                800,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ea52ebb0-a762-41e0-b4fa-5f76027ab7cf",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc ='{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Bien-Asegurado-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "725bb93d-87a0-47ea-9b1a-1bce133d7f98",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                600
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "adfe6d1b-3db8-4a6a-a6e0-a3d7a42a5833",
              "name": "Coordinate Parser15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                100,
                820
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Deslizo hacia abajo\n**Busca el Dropdown\nBien asegurado\ny lo presiona** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                560
              ],
              "typeVersion": 1,
              "id": "3d5de099-e966-4c25-b93b-fae10cbd72f6",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "3cb29bdb-56e5-4824-91bc-2a5464fdd96a",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                820
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;direc = '{{$('direc5').item.json.direc}}';img = ImageGrab.grab();img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "73dba00c-6dc6-48c2-8b3d-967ce8cd9154",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                600
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y +30}})\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                820
              ],
              "id": "cd635ac0-7fdd-4ec6-b95e-8cac4870b4a2",
              "name": "Execute Command2",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d844ce80-4822-4c62-a7b4-80b84086096e",
              "name": "Coordinate Parser16",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                860,
                820
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2); pyautogui.scroll(-500)\""
              },
              "id": "9530ed5e-f874-4b95-aec9-be1ca82bc970",
              "name": "Scroll",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                600
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "content": "## Seleccion Dropdown\n**Selecciona colectivo 24hs** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                780
              ],
              "typeVersion": 1,
              "id": "c443d806-738a-46fa-b1b9-f257bf04660d",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "66c0fd59-34d8-4df7-ad18-8473127ce468",
              "name": "Coordinate Parser17",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                320,
                1020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "ebedb15c-8336-4d39-8b3a-c67af9153a03",
              "name": "Click24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1020
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Tipo-Documento-LS.png', grayscale=True, confidence=0.7))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1020
              ],
              "id": "fc063491-6b0f-4c7f-aa7c-ab2129993f19",
              "name": "Execute Command3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "d083c0b8-f14c-4ebc-979a-0a38f31962b6",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                500,
                1020
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "829b91bb-a870-494c-b154-f754b640e280",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                1020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Segundo Dropdown\n**Selecciona tipo\ny copia polisa** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1000
              ],
              "typeVersion": 1,
              "id": "44c1075b-07f7-48f9-9cd9-7158758cb894",
              "name": "Sticky Note18"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Certificado-LS.png', grayscale=True, confidence=0.8))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                660,
                1020
              ],
              "id": "926a0267-d5a7-4e6f-a9cd-f37adfdf5945",
              "name": "Execute Command4",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4800431a-b13b-4f69-a742-f6ff7f2652b1",
              "name": "Coordinate Parser20",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                1240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "71723918-fb85-4c4f-82e1-6d03b27887ec",
              "name": "Click25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Imprimir-LS.png', grayscale=True, confidence=0.8))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1240
              ],
              "id": "2b30fc77-49d3-4679-857f-6d4b9204a609",
              "name": "Execute Command5",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Boton Imprimir\n**Presiona Imprimir** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1220
              ],
              "typeVersion": 1,
              "id": "4dd7b187-0526-469c-96dd-ba371e80a00b",
              "name": "Sticky Note19"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Polisadegrupos-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "d601b24f-6c2a-4f42-acf3-af6ead184667",
              "name": "Locate On Screen5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                680,
                820
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Colectivo24hs-LS.png', grayscale=True, confidence=0.6))\""
              },
              "id": "98c88a7f-f0e6-40fc-9a48-feafc3929ed8",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                820
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\"\n"
              },
              "id": "0bdb19fa-f9a5-4c79-8bc7-5a3896f6585d",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc='{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Usuario-LS-2.png', grayscale=True, confidence=0.6))\""
              },
              "id": "22b9e52e-f82c-458d-9e95-f4ae7b4eb147",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                1680
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4ef3bfd3-2e32-44bc-8222-6a449a7f0de4",
              "name": "Coordinate Parser5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                1680
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.doubleClick({{ $('Coordinate Parser5').item.json.x -130}}, {{ $('Coordinate Parser5').item.json.y +20}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
              },
              "id": "43ba261f-5a28-4d3c-920c-2f43bc18257c",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1660
              ],
              "typeVersion": 1,
              "id": "59bab0c3-bf27-43df-b16b-2f7cae2bb66b",
              "name": "Sticky Note37"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Contrasena2-LS.png', grayscale=True, confidence=0.6))\""
              },
              "id": "320b270d-d2b8-4c99-afec-af82966258f6",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                1900
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3e2d649c-bde8-4b58-a628-cfb66e07155e",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                440,
                1900
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }},{{ $json.y }})\""
              },
              "id": "20a0ad69-900c-40bc-885d-7c8fc619796c",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Secreto y presiona\nIngresar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1880
              ],
              "typeVersion": 1,
              "id": "0121a8d6-68be-4008-b088-445a9afca92b",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }},{{ $json.y }} ); pyautogui.typewrite(r'{{ $('Supabase').item.json['Secret LS']}}', interval = 1)\""
              },
              "id": "3e7574c2-f17a-4c95-858e-ccccf612727f",
              "name": "Ingresa Secret2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                620,
                1900
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Ingresar-LS.png', grayscale=True, confidence=0.6))\""
              },
              "id": "958f8908-9ce2-4023-9629-aaae9ea7fa6d",
              "name": "Locate INICIAR2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                800,
                1900
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "72fc164a-9b5d-4f82-bf9c-81bc82725a59",
              "name": "Coordinate Parser7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                1900
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "3bdca9e8-a1b9-4358-86ca-8b8ea474be58",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
              },
              "id": "6fccd26e-dff3-4756-8fe3-e3887348383a",
              "name": "Save Screenshot30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                2120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\LibreDeuda-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "486141e5-34f9-4c5b-b7e6-fd5aa1f854fd",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                440,
                2120
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ad4548cb-6309-4b57-b8bf-b60dd684cd35",
              "name": "Coordinate Parser37",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                2120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "f8af7f46-9548-4fbd-bef4-a710ed5e7344",
              "name": "Click49",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Libre Deuda\n**Busca y presiona el \nbotón de LD**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2100
              ],
              "typeVersion": 1,
              "id": "03d66fef-c347-4f57-ac59-34a56c603af6",
              "name": "Sticky Note38"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
              },
              "id": "c3c28873-f238-47bf-8568-39976bfaa8a8",
              "name": "Save Screenshot31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                2340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Imprimir-LibreDeuda-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "9cd878c0-4e3b-40d4-beb5-32b3f50bafb8",
              "name": "Locate On Screen18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                2340
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a5bbd633-3073-41cd-8725-38a354c5a254",
              "name": "Coordinate Parser38",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                2340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "87c8ea3d-7dd9-43cf-9646-8fd03a4f9f62",
              "name": "Click50",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Libre Deuda\n**Busca y presiona el \nbotón de LD**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2320
              ],
              "typeVersion": 1,
              "id": "c15d57b6-a712-44ef-8efe-d8d12a4533ff",
              "name": "Sticky Note39"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
              },
              "id": "6114e38b-1a1b-473b-beb2-c3e07254fc4b",
              "name": "Save Screenshot32",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                2580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Descargar2-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "2396dcf6-d8a9-40c9-9ed3-c9e377ac9459",
              "name": "Locate On Screen23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                2580
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "45d8c7fe-d9a8-4757-9af9-f71fd426df41",
              "name": "Coordinate Parser39",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                2580
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "f0373353-c5dd-4765-99d1-754c269aa2b3",
              "name": "Click51",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2580
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Descarga\n**Busca y presiona el \nbotón de descarga**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2540
              ],
              "typeVersion": 1,
              "id": "63312357-0143-4962-bb17-bae3206598a1",
              "name": "Sticky Note40"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
              },
              "id": "915182f8-aaa5-4416-9969-030985d29a8e",
              "name": "Save Screenshot33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                2780
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Barra-Guardar-Nombre-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "977fb7ac-a7d0-49b0-88b8-efb2b1a5a99c",
              "name": "Locate On Screen24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                2780
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "857d588f-8be5-4253-b788-e9f759628f3d",
              "name": "Coordinate Parser40",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                2780
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();mesdirec = current_date.strftime('%m - %B %Y'); year=mesdirec = current_date.strftime('%Y');mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); nombre = '{{ $('Loop Over Items').item.json.Nombre }}'; pyautogui.doubleClick({{ $('Coordinate Parser40').item.json.x +50}}, {{ $('Coordinate Parser40').item.json.y }}); pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\LA SEGUNDA\\Pago poliza acc personales\\Pago poliza acc. personales-{nombre}-{mesdirec}.pdf')\""
              },
              "id": "ddf328d7-1ae2-49fc-932d-770149b99435",
              "name": "Click52",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2760
              ],
              "typeVersion": 1,
              "id": "a198a61a-8163-4238-b017-f794c0037704",
              "name": "Sticky Note41"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "47e13db9-c274-4a18-80b6-4da7c640b351",
              "name": "Save Screenshot34",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3000
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f0788fed-286f-4712-a340-f5ea53a3f204",
              "name": "Locate On Screen25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                3000
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1baad369-4e9e-406b-9081-f5bce7ade965",
              "name": "Coordinate Parser41",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3000
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser41').item.json.x }}, {{ $('Coordinate Parser41').item.json.y }})\""
              },
              "id": "7be7209d-c895-42cb-b8f9-929f6203a165",
              "name": "Click53",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3000
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2980
              ],
              "typeVersion": 1,
              "id": "8cff37da-cb34-413f-8a21-169f2afda929",
              "name": "Sticky Note42"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
              },
              "id": "b2871f42-074f-4575-9788-7654ffba5726",
              "name": "Save Screenshot35",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3220
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7a6053ca-8c6d-4b10-9648-76a61212db8d",
              "name": "Coordinate Parser42",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3220
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser42').item.json.x }}, {{ $('Coordinate Parser42').item.json.y }})\""
              },
              "id": "efc6127b-9afd-4eee-978d-0ea326fcd918",
              "name": "Click54",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3200
              ],
              "typeVersion": 1,
              "id": "dd2586c8-cb9e-4f7c-a649-244697ddfec4",
              "name": "Sticky Note43"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "a5c08ad4-8d70-4ee3-aefe-56a08c95d094",
              "name": "Click55",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                3220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab();direc='{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "397cd733-2be0-4afc-b1e0-4224f4596b2f",
              "name": "Save Screenshot36",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3440
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e86baebc-73fe-4a29-8a8b-3185c7f2b6bb",
              "name": "Coordinate Parser43",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3440
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser43').item.json.x }}, {{ $('Coordinate Parser43').item.json.y }})\""
              },
              "id": "c79e618c-3b4e-4a88-a28e-abfd126f0ec7",
              "name": "Click56",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3440
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## En caso de Loop\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3420
              ],
              "typeVersion": 1,
              "id": "72da157f-b56d-4252-88e5-20a9a159b920",
              "name": "Sticky Note44"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\""
              },
              "id": "8849161f-acc7-4ff7-a8b7-497ad6c87f1d",
              "name": "Click57",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                3440
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cierrre\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3640
              ],
              "typeVersion": 1,
              "id": "54ffd579-74b7-44e3-9b58-6ed6bcb99239",
              "name": "Sticky Note45"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "3a2297d2-dc86-4e4f-987a-bf1224597960",
              "name": "Save Screenshot37",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\ImpresionCotizacion-CNR-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "54665da8-254c-4853-bd34-822ac3fca14c",
              "name": "Locate On Screen26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                3660
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7b48ca9b-f671-46f2-9cb1-70f724738e9b",
              "name": "Coordinate Parser44",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3660
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser44').item.json.x +380}}, {{ $('Coordinate Parser44').item.json.y }})\""
              },
              "id": "dab16f50-81d2-44a7-a4b7-5b5e768d1426",
              "name": "Click58",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cierrre\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3860
              ],
              "typeVersion": 1,
              "id": "1ca32952-0ce8-40f0-b90d-53ea1ba5006c",
              "name": "Sticky Note46"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "bcc36443-b004-4404-91a6-bbbe681e3b92",
              "name": "Save Screenshot38",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\PCerrar-CNR-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "166c9411-d36b-40f1-9605-e6f20b3bdd04",
              "name": "Locate On Screen27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                3880
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "6b8f8fa7-817f-4b87-8fda-903bb8000f81",
              "name": "Coordinate Parser45",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3880
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser45').item.json.x +180}}, {{ $('Coordinate Parser45').item.json.y -30}})\""
              },
              "id": "57c776ac-9757-41bc-9255-7aa9b51d1640",
              "name": "Click59",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "2e401afd-2a1e-4501-a187-d0893553d636",
              "name": "Save Screenshot5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                4340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-CNR-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "17bf2693-a638-493f-885c-3f224580c76c",
              "name": "Locate On Screen3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                4340
              ],
              "retryOnFail": true,
              "alwaysOutputData": false,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "00431c8f-8f3e-460e-bb4a-7c0da1d1c29a",
              "name": "Coordinate Parser8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                4340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.doubleClick({{ $('Coordinate Parser8').item.json.x}}, {{ $('Coordinate Parser8').item.json.y}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
              },
              "id": "7506a6f6-ff13-4ba6-b2fd-4c9ecff91a98",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## CNR\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4320
              ],
              "typeVersion": 1,
              "id": "706f05a8-bbf9-4f70-8c8b-1f2c98b39f26",
              "name": "Sticky Note47"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "59808d0e-45d9-43e5-8650-29564d15ddb6",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                4560
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-AgregarSubrogante.png', grayscale=True, confidence=0.8))\""
              },
              "id": "6ceb6e97-145f-42f9-a328-3ffd8617ee10",
              "name": "Locate On Screen8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                4560
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "01d2a622-a1d0-4c26-b5b7-72c00ec1debd",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                4560
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.doubleClick({{ $('Coordinate Parser9').item.json.x}}, {{ $('Coordinate Parser9').item.json.y}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
              },
              "id": "f54b351f-5271-42f9-9406-4a7054056721",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                640,
                4560
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Agregar Subrogante\n**Rellenar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4540
              ],
              "typeVersion": 1,
              "id": "3caa8a3c-23cb-41ee-b9f3-0179fa9f8fe2",
              "name": "Sticky Note48"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc='{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "a8cbc3e9-7346-43e1-954e-108da243dbc3",
              "name": "Save Screenshot7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                4780
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Denominacion-CNR-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "71248223-5dad-4ae4-8d85-02f927cab84b",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                4780
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "666fa879-e5cd-499c-80a3-cbe4815c34f3",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                4780
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;pyautogui.doubleClick({{ $('Coordinate Parser10').item.json.x}}, {{ $('Coordinate Parser10').item.json.y}});  pyautogui.typewrite('{{ $('Supabase1').item.json['Nombre']}}')\""
              },
              "id": "2a8a1774-7ecc-4391-87ee-599ff3c8e87e",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Denominacion\n**Rellenar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4760
              ],
              "typeVersion": 1,
              "id": "7beccc96-5d27-4390-866a-55dc61ed0f26",
              "name": "Sticky Note49"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "CUITS Plantas"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                100,
                4120
              ],
              "id": "41869aac-afb8-446f-b437-024f430657d6",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                280,
                4120
              ],
              "id": "232a409b-d34d-4c75-872e-910c40ef58a2",
              "name": "Loop Over Items1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "bed940fe-1950-4fbc-ae24-638e6a3e8643",
              "name": "Save Screenshot8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                5000
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\CUIT-CNR-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "e2d9d390-7a73-4c5d-9255-cc9f87293601",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                5000
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2d6cc825-7e74-4b61-b6e4-f1368cc1331d",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                5000
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser11').item.json.x}}, {{ $('Coordinate Parser11').item.json.y}})\""
              },
              "id": "5c07587c-166c-41a0-8b6b-a931b8bf1b10",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                5000
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## CUIT\n**Rellenar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4980
              ],
              "typeVersion": 1,
              "id": "80172bd8-409f-4367-89fa-e4f9f176ade3",
              "name": "Sticky Note50"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(0); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "918ec724-5a36-437d-9553-1d60469c095d",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                5220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\NroDocumento-CNR-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "18c3f32e-cfe4-4d34-a9b8-0c5bb7009cc1",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                5220
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "653d7f85-ea87-4d4a-afca-7f1484a451cb",
              "name": "Coordinate Parser12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                5220
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser12').item.json.x}}, {{ $('Coordinate Parser12').item.json.y}}); pyautogui.typewrite('{{ $('Supabase1').item.json['CUIT']}}')\""
              },
              "id": "f31fdf73-fb22-4ca4-a111-a98d0b7631e6",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                5220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Nro Documento\n**Rellenar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                5200
              ],
              "typeVersion": 1,
              "id": "1de0eacc-650d-48bb-b37f-895a312b5646",
              "name": "Sticky Note51"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(0); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "c9e57b65-da52-4393-bbcd-12dec5b5ee95",
              "name": "Save Screenshot10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                5440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\\\.n8n\\\\Screenshots\\\\LS\\\\Aceptar-CNR-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "c702808a-817e-4573-9687-2d29e6da8a17",
              "name": "Locate On Screen28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                5440
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f5a4e2ed-a434-4377-89a8-2cb2a3d0dafa",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                5440
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser13').item.json.x}}, {{ $('Coordinate Parser13').item.json.y}})\""
              },
              "id": "6619b02b-c88c-4919-b732-faef61040476",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                5440
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Aceptar\n**Rellenar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                5420
              ],
              "typeVersion": 1,
              "id": "a83e2fc8-6222-4928-a004-0a4b264ac460",
              "name": "Sticky Note52"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "eea98495-cb92-46dc-9ec7-f637c22a4bc3",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                6100
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "5e000dc7-d4b6-4b9e-9a36-608112758933",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                540,
                6100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.doubleClick({{ $('Coordinate Parser14').item.json.x}}, {{ $('Coordinate Parser14').item.json.y}})\""
              },
              "id": "60e3c49e-2465-4aa0-98c2-0790b24b6d22",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                6100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Imprimir Clausula\n**Rellenar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                6080
              ],
              "typeVersion": 1,
              "id": "23f104d0-0abf-4ccc-b85e-6b4c987b712b",
              "name": "Sticky Note53"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(6);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "ac0dbf2e-4ef9-404b-ad1a-15edf86c6b76",
              "name": "Save Screenshot39",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                6320
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c7d42ba5-9fa9-4721-bf35-ef13ded73251",
              "name": "Coordinate Parser46",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                520,
                6340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "75ed882c-4525-44ca-82eb-7dffa374139f",
              "name": "Click60",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                740,
                6340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Descarga\n**Busca y presiona el \nbotón de descarga**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                6300
              ],
              "typeVersion": 1,
              "id": "4f00bd13-cdf4-4739-bd39-81040328fde9",
              "name": "Sticky Note54"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "a6d33666-6e5e-4500-bd9a-acc888001113",
              "name": "Save Screenshot40",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                6540
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc='{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Barra-Guardar-Nombre-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "d24a3a45-c90d-49be-b875-501aaacddc22",
              "name": "Locate On Screen31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                6540
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b9b00687-3014-4167-bf0e-b8d448501664",
              "name": "Coordinate Parser47",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                6540
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();  nombre = '{{ $('Loop Over Items').item.json.Nombre }}'; planta = '{{ $('Supabase1').item.json['Nombre']}}';year=mesdirec = current_date.strftime('%Y');mesdirec = current_date.strftime('%m - %B %Y'); mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); mes = current_date.strftime('%B'); pyautogui.doubleClick({{ $('Coordinate Parser47').item.json.x +50}}, {{ $('Coordinate Parser47').item.json.y }}); pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{planta}-{nombre}-{mesdirec}.pdf')\"\n"
              },
              "id": "1ab5ec42-702d-4a9b-be9b-1ffb30034442",
              "name": "Click61",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                6540
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                6520
              ],
              "typeVersion": 1,
              "id": "b401c115-bef4-49db-acec-2801a258231f",
              "name": "Sticky Note55"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "49d959cf-9bf7-4260-b806-7518f629d868",
              "name": "Save Screenshot41",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                6760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "29307dc1-61e4-4401-85c0-ff61097f47f2",
              "name": "Locate On Screen32",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                6760
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "cc26f467-2590-487e-bb74-3611a482844a",
              "name": "Coordinate Parser48",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                6760
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser48').item.json.x }}, {{ $('Coordinate Parser48').item.json.y }})\""
              },
              "id": "a98d51db-64cf-4e34-824c-3f2b5a46aaf5",
              "name": "Click62",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                6760
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                6740
              ],
              "typeVersion": 1,
              "id": "fa9ce463-2c7a-4cdb-b07a-5bda4f1c80b5",
              "name": "Sticky Note56"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "f1920767-19e1-4e1e-b33c-376de3756a9f",
              "name": "Save Screenshot42",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                6980
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d200d307-ca08-4750-b1e0-9c30ed4a9aaf",
              "name": "Coordinate Parser49",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                6980
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser49').item.json.x }}, {{ $('Coordinate Parser49').item.json.y }})\""
              },
              "id": "3a45a348-f91a-417f-bb8d-dab5bfef1529",
              "name": "Click63",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                6980
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                6960
              ],
              "typeVersion": 1,
              "id": "3ea1505d-b512-4a19-a865-f5e6225c2430",
              "name": "Sticky Note57"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc='{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "2fec9d2c-776a-4853-92e1-bf0d7d918e11",
              "name": "Click64",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                6980
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('direc5').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "f4669c80-08ce-4f9e-b43d-684b8d0881c4",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                5660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\AFavor-CNR-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f9c9c3fe-234b-46c1-b7ee-d52592596bc0",
              "name": "Locate On Screen33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                5660
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7fda36f5-3455-4469-89f3-47b063f2217f",
              "name": "Coordinate Parser51",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                5660
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser51').item.json.x +100}}, {{ $('Coordinate Parser51').item.json.y}}); pyautogui.moveRel(0,50,0);pyautogui.scroll(-1000)\""
              },
              "id": "7fc3160e-6423-455c-aeec-3b61d836762e",
              "name": "Click16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                5660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## A favor de\n**Rellenar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                5640
              ],
              "typeVersion": 1,
              "id": "118004ce-ea9e-4eef-854c-681885f3ce49",
              "name": "Sticky Note59"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png')\""
              },
              "id": "22338f7c-113a-4753-be0b-eb7424a097c1",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                5880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundPhrase.center.x }}, {{ $json.foundPhrase.center.y }})\""
              },
              "id": "8a89505a-eab6-47cc-b354-036d87e4d013",
              "name": "Click17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                820,
                5880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Generado\n**Rellenar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                5860
              ],
              "typeVersion": 1,
              "id": "8c37a683-bb44-44fd-8918-e08389838b88",
              "name": "Sticky Note60"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "={{ $('Supabase1').item.json['Nombre']}}",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $json.stdout }}",
                      "type": "string"
                    },
                    {
                      "id": "89e28ceb-e80c-4be5-a523-34099bba4510",
                      "name": "",
                      "value": "",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "ba2d79d3-5fbd-4cc3-bcff-fe49d3fe0283",
              "name": "Find OCR Word Input",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                500,
                5880
              ],
              "notesInFlow": false,
              "notes": "Optional parser that helps manage the output of local ocr"
            },
            {
              "parameters": {
                "jsCode": "function normalizeText(text) {\n  return String(text).toLowerCase().trim().replace(/[.,]/g, '');\n}\n\nfunction isSimilar(searchWord, textWord) {\n  const s = normalizeText(searchWord);\n  const t = normalizeText(textWord);\n  return t.includes(s) || s.includes(t);\n}\n\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) =>\n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\nfunction calculateTotalDistance(words) {\n  let total = 0;\n  for (let i = 1; i < words.length; i++) {\n    total += distance(words[i - 1].x, words[i - 1].y, words[i].x, words[i].y);\n  }\n  return total;\n}\n\nfunction getCenterCoordinates(items) {\n  const avgX = Math.round(items.reduce((sum, item) => sum + item.x + item.width / 2, 0) / items.length);\n  const avgY = Math.round(items.reduce((sum, item) => sum + item.y + item.height / 2, 0) / items.length);\n  return { x: avgX, y: avgY };\n}\n\nfunction findCloseWords(data, searchWords, maxDistance = 100, minMatches = null) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isSimilar(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  const minRequiredMatches = minMatches || Math.ceil(searchWords.length * 0.6);\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    const validItems = combo.filter(Boolean);\n    if (validItems.length >= minRequiredMatches) {\n      const totalDistance = calculateTotalDistance(validItems);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (validItems.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = validItems;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// MAIN\nconst input = $input.all()[0].json;\nconst searchPhrase = input['Find Phrase'];\nconst maxDistance = 150;\n\nlet parsedData, result;\n\ntry {\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = normalizeText(searchPhrase).split(/\\s+/);\n\n  parsedData.forEach(item => {\n    item.text = normalizeText(item.text);\n  });\n\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n\n  if (foundItems && foundItems.length > 0) {\n    const center = getCenterCoordinates(foundItems);\n    result = {\n      phrase: searchPhrase,\n      foundWords: foundItems,\n      center: center\n    };\n  } else {\n    result = {\n      phrase: searchPhrase,\n      foundWords: [],\n      center: null,\n      error: `No similar phrase found for \"${searchPhrase}\" in OCR results.`\n    };\n  }\n} catch (error) {\n  result = {\n    error: 'Error parsing or processing OCR data',\n    details: error.message\n  };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "b35a9453-3e81-4fbc-b86d-8a6e3db77e3e",
              "name": "OCR Word",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                680,
                5880
              ],
              "notesInFlow": false,
              "onError": "continueRegularOutput",
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; direc = '{{$('direc5').item.json.direc}}';pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(5).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 6'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "4d93ec08-4247-4f64-9e79-b6177486f486",
              "name": "Local OCR Tesseract",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                5880
              ],
              "notesInFlow": false,
              "onError": "continueRegularOutput",
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(5); pyautogui.hotkey('ctrl', 'w')\""
              },
              "id": "2e00bff0-6760-4975-85d5-9ca1c42bf7fd",
              "name": "Save Screenshot43",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                580,
                6980
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Cierrre\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                7180
              ],
              "typeVersion": 1,
              "id": "9ba31e37-83df-4e2d-80e6-bba11150dbe2",
              "name": "Sticky Note58"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "53e908cd-bd1a-4169-8ab4-9e41ca8e845b",
              "name": "Save Screenshot44",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                7200
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\LS\\Cerrar-CNR-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "3f7f8e17-818a-4b59-9d35-61cc0722a04e",
              "name": "Locate On Screen34",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                7200
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2b6f7eb6-2059-47d1-a4b5-da1288e95694",
              "name": "Coordinate Parser50",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                440,
                7200
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.hotkey(['esc'])\""
              },
              "id": "33659c99-88c7-45ca-8991-ecc338b636ba",
              "name": "Click65",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                7200
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.moveRel(0,50,0);pyautogui.scroll(-500)\""
              },
              "id": "7b84625a-4f71-45db-8267-a8d39dd1b814",
              "name": "Local OCR Tesseract1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1000,
                5900
              ],
              "notesInFlow": false,
              "onError": "continueRegularOutput",
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.7))\""
              },
              "id": "7b1ef8be-14b5-4523-b86d-adb6709698a8",
              "name": "Click67",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                6320
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\ImprimirClausula-CNR-LS.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "834d8cc8-82a1-403b-be5e-a99c95d388b5",
              "name": "Click68",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                260,
                6100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar pestañas\n**Cierra la pestaña \nFormularios** ",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                7400
              ],
              "typeVersion": 1,
              "id": "8cedf2f2-d49d-487a-a9f9-2acefb058410",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "9cf91763-b9e9-4f8d-a8a5-97f211593a3a",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                200,
                7420
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\LS\\Window-CertCobertura-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "8389973d-e009-4061-aaac-5c0e51be01ab",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                340,
                7420
              ],
              "retryOnFail": true,
              "disabled": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "06892028-344b-442e-a1cf-84278f72f854",
              "name": "Coordinate Parser18",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                480,
                7420
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math; reference_point = ({{ $json.x +50}}, {{ $json.y}}); matches = list(pyautogui.locateAllOnScreen(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\Boton-Close.png')); closest_match = min(matches, key=lambda match: math.sqrt((pyautogui.center(match)[0] - reference_point[0])**2 + (pyautogui.center(match)[1] - reference_point[1])**2)); pyautogui.click(pyautogui.center(closest_match))\""
              },
              "id": "7470bd81-f10e-4f91-8fb5-b939f37bbd65",
              "name": "Click18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                620,
                7420
              ],
              "disabled": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "73a6c718-c777-47eb-8b44-a61db931f1d2",
              "name": "Save Screenshot19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                40,
                7640
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\LS\\\\Boton-Perfil-LS.png', grayscale=True, confidence=0.3))\""
              },
              "id": "6057eca3-787c-459d-b8ff-9bde00f931c8",
              "name": "Locate On Screen19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                220,
                7640
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "90806dea-af3d-4bc9-927d-0bbc894aefee",
              "name": "Coordinate Parser25",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                920,
                7640
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math;from datetime import date; import datetime; import time; time.sleep(2); pyautogui.click(1735, 120)\""
              },
              "id": "212ac822-3704-48e7-a746-7dfaf66f07ab",
              "name": "Click33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                7640
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Presiona el logo de \nPerrfil en ARCA**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                7620
              ],
              "typeVersion": 1,
              "id": "10d524fb-21de-4928-a136-407050df3d5d",
              "name": "Sticky Note24"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "cdd3db99-cff5-4763-9892-b71a2da3ff99",
              "name": "Save Screenshot20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                40,
                7860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\\\Screenshots\\\\LS\\\\Boton-Cerrarsesion-LS.png', grayscale=True, confidence=0.7))\""
              },
              "id": "9b19e375-6a9d-428e-8c20-d40d491bce5c",
              "name": "Locate On Screen20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                220,
                7860
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "88d93604-cf21-4895-9797-f6e7eb9cba11",
              "name": "Coordinate Parser26",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                920,
                7860
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
              },
              "id": "c014c3ee-549d-4acc-9e58-864b1ccf8194",
              "name": "Click34",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                7860
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Selecciona la opción \nCerrar Sesión**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                7840
              ],
              "typeVersion": 1,
              "id": "72ef072e-5aec-4c24-a814-f46e132e6e96",
              "name": "Sticky Note25"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "58fdd608-a644-4ac3-b5ac-6b815730ffb0",
              "name": "Save Screenshot15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                -100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Siguiente-LS.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "cb5bcc66-4824-440f-b722-8249f5d4ba38",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                -100
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4a87ce59-8c52-40a0-8d55-4f3a03ba2512",
              "name": "Coordinate Parser21",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                -100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.click({{ $('Coordinate Parser21').item.json.x }}, {{ $('Coordinate Parser21').item.json.y }})\""
              },
              "id": "3137e93f-2b47-4f0c-986f-65fa13d4a811",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                -100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                -140
              ],
              "typeVersion": 1,
              "id": "79551a90-5b05-4a67-96d5-a157cd7d4013",
              "name": "Sticky Note20"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; import time; time.sleep(5); img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "61f85870-2323-432e-b14b-1d81938d87cf",
              "name": "Save Screenshot16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\CheckBox-ConNomina-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "2e5d9a59-76a8-4baf-953c-4b9c7411eccb",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                1460
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "8784dbfa-0aa7-4ffa-99e6-c80b64eb5b33",
              "name": "Coordinate Parser22",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                500,
                1460
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.click({{ $('Coordinate Parser22').item.json.x -60}}, {{ $('Coordinate Parser22').item.json.y }}); time.sleep(1);pyautogui.click({{ $('Coordinate Parser22').item.json.x -60}}, {{ $('Coordinate Parser22').item.json.y +40}})\""
              },
              "id": "c298b286-390c-434e-9b11-1a99faac19f4",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Chequea la version \n## de la interfaz\n**Si es la nueva \ncheckea el box**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1440
              ],
              "typeVersion": 1,
              "id": "9e163996-4350-4935-b03a-b06b1061e425",
              "name": "Sticky Note21"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "7e44dc4a-b5de-433e-a4d0-908cef168b03",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\CheckBox-Descripcion-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "a74c642f-cfd4-4644-88b6-6d3a4e689b8c",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                120
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ec3e723f-7d3e-47cc-91f5-42e893da8c2d",
              "name": "Coordinate Parser23",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser23').item.json.x -80}}, {{ $('Coordinate Parser23').item.json.y }})\""
              },
              "id": "81462750-8bf9-435d-8071-f9fccd920b38",
              "name": "Click19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## CheckBox\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                80
              ],
              "typeVersion": 1,
              "id": "394e8b4a-08eb-403f-b2e1-4d8207d0e24c",
              "name": "Sticky Note22"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "9ecdb13e-47a1-42c0-a7b2-e21023573b15",
              "name": "Save Screenshot18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-Siguiente-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "455066cb-c08e-487c-a0cf-c021250bc3ce",
              "name": "Locate On Screen16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                340
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "fc7d8cfd-6a17-4fc4-8937-caadab295edb",
              "name": "Coordinate Parser24",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser24').item.json.x }}, {{ $('Coordinate Parser24').item.json.y }})\""
              },
              "id": "21759033-8f2f-4238-8a0e-a3ff7a565ae2",
              "name": "Click20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                300
              ],
              "typeVersion": 1,
              "id": "0b24ef85-1bc8-4d9b-85e1-4991471b77f7",
              "name": "Sticky Note23"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(5);direc = '{{$json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n/Screenshots/ARCA/Pantalla-Inicio.png')\""
              },
              "id": "33d99cff-a4b5-4809-9485-fca35cf433f0",
              "name": "Save Screenshot22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2360,
                1040
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Denominacion-CNR2-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "ed611f76-1f87-4b1c-a3ac-18cbe66d6761",
              "name": "Locate On Screen21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2480,
                1040
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f185bb4d-0ae7-4920-8958-0aa11747ed20",
              "name": "Coordinate Parser28",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2600,
                1040
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser28').item.json.x -130}}, {{ $('Coordinate Parser28').item.json.y +20}}); pyautogui.typewrite('{{ $('Code5').item.json.nombre }}')\""
              },
              "id": "ce04e6e9-e983-4ae8-9812-4ee9d3ee8296",
              "name": "Click22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2720,
                1040
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                1000
              ],
              "typeVersion": 1,
              "id": "4b27d341-153f-491d-875d-596127ee844c",
              "name": "Sticky Note27"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('direc').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\LS\\WorkingScreen.png')\""
              },
              "id": "4ab1e3b3-25f5-4706-a1a1-4ea21a8e08b3",
              "name": "Save Screenshot23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                1260
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\CUIT-CNR2-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "d0295955-e1b7-4a29-9ab1-baf6f22ce4b5",
              "name": "Locate On Screen22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                1260
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2cb75e7a-37ac-4a37-88cf-aa35496bf4e9",
              "name": "Coordinate Parser29",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                1260
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser29').item.json.x -10}}, {{ $('Coordinate Parser29').item.json.y }})\""
              },
              "id": "295029d2-0e84-4f1d-aa1c-f754e31eccfd",
              "name": "Click23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                1260
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                1220
              ],
              "typeVersion": 1,
              "id": "d5f96d6a-f0a8-4593-b343-45586894ac2e",
              "name": "Sticky Note28"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\Users\\simon\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "270ce8d3-994a-4ab6-b52a-ff911e2ea6fe",
              "name": "Save Screenshot24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                1480
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\LS\\CUIT-CNR2-LS.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "6bc4cf67-f529-49b9-ae80-8997f0f4b03a",
              "name": "Locate On Screen38",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                1480
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "0b5b737f-990a-499e-b727-341c846b4cc4",
              "name": "Coordinate Parser30",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                1480
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.click({{ $('Coordinate Parser30').item.json.x }}, {{ $('Coordinate Parser30').item.json.y }})\""
              },
              "id": "95defd5c-a9bd-45f2-88cc-e537827d9a95",
              "name": "Click26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                1480
              ],
              "disabled": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                1440
              ],
              "typeVersion": 1,
              "id": "79107d4a-afa7-4151-bf52-e4628442d86f",
              "name": "Sticky Note29"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('direc1').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "10638912-e10a-4cbd-ab0b-73a0c8e4cbb4",
              "name": "Save Screenshot25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2340,
                1700
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc1').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Documento-CNR2-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "e62d3a91-1d39-40ac-bec5-916e012263eb",
              "name": "Locate On Screen39",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2460,
                1700
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "8fba1e15-6503-4ca8-875b-bb9a162bb1da",
              "name": "Coordinate Parser31",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2580,
                1700
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser31').item.json.x }}, {{ $('Coordinate Parser31').item.json.y }}); pyautogui.typewrite('{{ $('Code6').item.json.nombre }}')\""
              },
              "id": "ad8c8795-7b29-4a0c-87b4-926db39b8c4e",
              "name": "Click27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                1700
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                1660
              ],
              "typeVersion": 1,
              "id": "3e4f14b5-0502-402a-b383-bd9c071fb50c",
              "name": "Sticky Note30"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;direc ='{{$('direc1').item.json.direc}}'; img = ImageGrab.grab();img.save(fr'{direc}/.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "9bfe09c5-b650-4b90-8631-30d12f395076",
              "name": "Save Screenshot26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                1920
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc='{{$('direc1').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Aceptar-CNR2-LS.png', grayscale=False, confidence=0.9))\"\n"
              },
              "id": "5030e0f0-b6d1-4c92-a4bb-4bfabdbae1be",
              "name": "Locate On Screen40",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                1920
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b85d2752-1b6d-4f3d-9bd0-9a852111728e",
              "name": "Coordinate Parser32",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                1920
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser32').item.json.x }}, {{ $('Coordinate Parser32').item.json.y }})\""
              },
              "id": "6012dded-0c3a-41e9-aa04-7b8e00cf641a",
              "name": "Click29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                1920
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                1880
              ],
              "typeVersion": 1,
              "id": "84c193a9-fd59-4a83-a1e0-1d7b3f475d97",
              "name": "Sticky Note31"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('direc2').item.json.direc}}';img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "eaa7bb76-fce7-4754-bac8-0791a6864319",
              "name": "Save Screenshot27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                820
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc2').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Boton-InteresTemporal-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "4cdf8323-8fb1-4ddc-8755-091462a76945",
              "name": "Locate On Screen41",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                820
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "53fa87ff-4fca-4cc2-8a8c-18b5c90b9035",
              "name": "Coordinate Parser33",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                820
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser33').item.json.x }}, {{ $('Coordinate Parser33').item.json.y }})\""
              },
              "id": "0df4ef1c-ec5a-4c9c-b4fc-4c1a35cc8a50",
              "name": "Click30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                820
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                780
              ],
              "typeVersion": 1,
              "id": "bcbffbe1-7e75-46dd-99a7-4a7af05c85fb",
              "name": "Sticky Note32"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc3').item.json.direc}}'; img.save(fr'{direc}/.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "94d52ad5-dda3-4ca4-ab30-c75f57661561",
              "name": "Save Screenshot28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1920,
                2140
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Siguiente-LS.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "0aa2df52-ae64-4978-99dd-bbd1ba785afa",
              "name": "Locate On Screen42",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                2140
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ba90c79e-7625-4727-9e92-c9edcef30fe3",
              "name": "Coordinate Parser34",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                2140
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser34').item.json.x }}, {{ $('Coordinate Parser34').item.json.y }})\""
              },
              "id": "83584cba-364f-4a2f-a6e2-bd6166347270",
              "name": "Click31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2520,
                2140
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                2100
              ],
              "typeVersion": 1,
              "id": "71e3c1eb-5e8f-45a9-b2cc-95f3bdba0d71",
              "name": "Sticky Note33"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('direc3').item.json.direc}}';img.save(fr'{direc}/.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "b6c37105-330e-4fbc-8fd6-a0e9ad9c49da",
              "name": "Save Screenshot29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                2360
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-GenerarPDF-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "3c3711b0-446d-4d9e-987b-8464759674db",
              "name": "Locate On Screen43",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                2360
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ba7f6b59-042f-4664-b175-90705750d455",
              "name": "Coordinate Parser35",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                2360
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser35').item.json.x }}, {{ $('Coordinate Parser35').item.json.y }})\""
              },
              "id": "33313798-89f6-4281-8b4b-3dcae82304cc",
              "name": "Click32",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                2360
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Siguiente\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                2320
              ],
              "typeVersion": 1,
              "id": "a2e3b4a5-34f4-4650-a27b-e28a111055b0",
              "name": "Sticky Note34"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc3').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "35fed03b-6c28-4d76-bcf0-a818c29afe2e",
              "name": "Save Screenshot52",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                2580
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "bc542056-e907-4e47-be89-e733f37c24d9",
              "name": "Coordinate Parser59",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2520,
                2580
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "02a24313-2a96-42ad-a956-daf7b185dd1f",
              "name": "Click77",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                2580
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Descarga\n**Busca y presiona el \nbotón de descarga**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                2540
              ],
              "typeVersion": 1,
              "id": "0801f396-c70f-4bde-b165-452bd39aa955",
              "name": "Sticky Note68"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(10); img = ImageGrab.grab(); direc = '{{$('direc3').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "4529e9f8-b0de-4be2-8904-c8b12c89e146",
              "name": "Save Screenshot53",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                2800
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc3').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Barra-Guardar-Nombre-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "7b5d4faa-4836-40f8-870a-4cb252e6707c",
              "name": "Locate On Screen44",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1880,
                2800
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "de2167ea-5e08-49b2-8212-20961d28f23b",
              "name": "Coordinate Parser60",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2020,
                2800
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                2760
              ],
              "typeVersion": 1,
              "id": "b09ad325-dcf9-4c4f-8b16-e587c02e8544",
              "name": "Sticky Note69"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc4').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "60ef8a6b-d810-458c-99f1-01b3a0f09040",
              "name": "Save Screenshot54",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1880,
                3020
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc4').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "7d16c6f7-a3b9-4bc8-a8b4-8af7020496e3",
              "name": "Locate On Screen45",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                3020
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "48c1f955-b013-4e07-b14d-a3fd675bad5b",
              "name": "Coordinate Parser61",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2480,
                3020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;pyautogui.click({{ $('Coordinate Parser61').item.json.x }}, {{ $('Coordinate Parser61').item.json.y }})\""
              },
              "id": "7fcc3d4b-9d92-46be-abfb-623bf002ab3a",
              "name": "Click79",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                3020
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                2980
              ],
              "typeVersion": 1,
              "id": "bb7fe5af-07e6-4e07-9e7f-53ab3e124dce",
              "name": "Sticky Note70"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('direc4').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "cb4b4a35-beda-4734-806b-47cd6f5a9a6b",
              "name": "Save Screenshot55",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                3240
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "5104ec66-17ed-4e32-b10a-089b32d08dac",
              "name": "Coordinate Parser62",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2480,
                3240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser62').item.json.x }}, {{ $('Coordinate Parser62').item.json.y }})\""
              },
              "id": "d7d46888-3754-4e82-9a20-f40ee9dcae0d",
              "name": "Click80",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                3240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                3200
              ],
              "typeVersion": 1,
              "id": "d12a3318-69cf-4287-9922-e5adb7755c09",
              "name": "Sticky Note71"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc4').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "ff95fcd0-8d27-4bbf-b175-f23229e7138b",
              "name": "Click81",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                3240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2); pyautogui.hotkey('ctrl', 'w')\""
              },
              "id": "28d45dfb-200b-4c37-be1c-09ba4fb92ea0",
              "name": "Save Screenshot56",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2300,
                3260
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Cierrre\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                3420
              ],
              "typeVersion": 1,
              "id": "a05e1a0a-1afd-4e69-84a6-fc24177409f3",
              "name": "Sticky Note72"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "c7a6e542-31fe-41ac-a2e6-f9c989ae59d5",
              "name": "Save Screenshot57",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                3460
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\LS\\Cerrar-CNR-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "79e1c4f0-a14c-4d9c-9dbd-5b3272e64a78",
              "name": "Locate On Screen46",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                3460
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1fb2b9c7-3993-4b3f-9b73-1fcead942c93",
              "name": "Coordinate Parser63",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2480,
                3460
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "324282fc-cf71-44c5-8e88-1fdecc515c4a",
              "name": "Click82",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                3460
              ],
              "executeOnce": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "8e010a35-215f-41d1-beca-b2ef4fe2c925",
              "name": "Click83",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                2580
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "f8ce44c5-38dd-428d-9810-89cbe2d47098",
              "name": "Save Screenshot59",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                3680
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\\\Users\\\\simon\\\\.n8n\\\\Screenshots\\\\LS\\\\Boton-Perfil-LS.png', grayscale=True, confidence=0.3))\""
              },
              "id": "7451fdb5-4237-4a1f-ab4e-ab67fd192fb4",
              "name": "Locate On Screen48",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                3680
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2cf32cea-a305-4eb9-b64c-6e8a01b34438",
              "name": "Coordinate Parser64",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2520,
                3680
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math;from datetime import date; import datetime; import time; time.sleep(5); pyautogui.click(1870, 120)\""
              },
              "id": "333cabcf-360d-43dc-8655-ed7e9e2dbbcf",
              "name": "Click36",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                3680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Presiona el logo de \nPerrfil en ARCA**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                3640
              ],
              "typeVersion": 1,
              "id": "659e83fe-ae9c-45f1-982a-8fd96e7e63f9",
              "name": "Sticky Note35"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('direc4').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "061a29a5-9e91-4ada-9217-e3ce2aac582a",
              "name": "Save Screenshot60",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                3900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('direc4').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\\\Screenshots\\\\LS\\\\Boton-Cerrarsesion-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "0f3a8980-26b4-4a6c-92a7-5c0e7c64973b",
              "name": "Locate On Screen49",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                3900
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "052c456c-98a6-4f59-a239-131b42a3237a",
              "name": "Coordinate Parser65",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2520,
                3900
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
              },
              "id": "d02c408e-fd80-46b0-8fa7-578a3a7731c3",
              "name": "Click37",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                3900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Selecciona la opción \nCerrar Sesión**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1400,
                3860
              ],
              "typeVersion": 1,
              "id": "f37d6170-95da-4453-8966-6fe054ef7c44",
              "name": "Sticky Note36"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "={{ $('Supabase15').item.json.valor +1}}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -160,
                -120
              ],
              "id": "88150805-4ac9-4f1d-886d-eeb5198ca511",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "-1"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1140,
                -80
              ],
              "id": "33b47b60-0898-41f1-b174-3bf23e530556",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2160,
                2800
              ],
              "id": "fd358fad-1dfb-482c-ab4a-9bd78113166a",
              "name": "Supabase13",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              },
              "disabled": true
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2300,
                2800
              ],
              "id": "3346d4de-895b-4492-9694-81c10a3d6a34",
              "name": "Supabase14",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Obtener todos los registros del nodo de entrada\nconst registros = $input.all();  // Esto devuelve un array con todos los items\n\n// Obtener el índice (valor) de la posición deseada, por ejemplo, de Supabase\nconst valor = $('Supabase22').item.json.valor;  // Asegúrate de que 'valor' es un número\n\n// Inicializamos el array de salida\nlet output = [];\n\n// Verificamos que el valor esté dentro del rango de los datos disponibles\nif (valor >= 0 && valor < registros.length) {\n    // Accedemos al registro en la posición indicada por 'valor'\n    const item = registros[valor].json;  // Accedemos al item correspondiente\n    const nombre = item.Nombre;  // Accedemos a 'Nombre' dentro de cada item\n    const apellido = item.Apellido;  // Accedemos a 'Apellido' dentro de cada item\n\n    // Agregamos el nombre y apellido al array de salida\n    output.push({\n        nombre: nombre,\n        apellido: apellido\n    });\n} else {\n    // Si el índice está fuera de rango, agregamos un error\n    output.push({\n        error: \"Índice fuera de rango\"\n    });\n}\n\n// Retornamos el array con el resultado\nreturn output;\n\n// Retornamos el array de objetos como salida\nreturn output;\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2440,
                2800
              ],
              "id": "f6e52e67-41b9-4120-8df0-79b179df6a05",
              "name": "Code",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "714ee829-0bd5-48d9-bff5-e9614d1361eb",
                      "name": "nombre",
                      "value": "={{ $json.nombre }}",
                      "type": "string"
                    },
                    {
                      "id": "24ca1a69-9fdb-4b80-84e5-53cf08619ca9",
                      "name": "apellido",
                      "value": "={{ $json.apellido }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                2560,
                2800
              ],
              "id": "43b1cf36-fa6e-4340-b386-78579e161fce",
              "name": "Edit Fields1"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now();year=current_date.strftime('%Y');mesdirec = current_date.strftime('%Y');mesdirec = current_date.strftime('%Y');mesdirec = current_date.strftime('%m - %B %Y'); mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); mes = current_date.strftime('%B'); nombre='{{ $json.nombre }}'; pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\LA SEGUNDA\\CNR\\CNR-{nombre}-{mesdirec}.pdf')\""
              },
              "id": "ce456f39-04c4-4578-8d5f-778a49b6a0eb",
              "name": "Click35",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                2800
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.moveTo(1870,500); pyautogui.scroll(-500)\""
              },
              "id": "bf8f9229-2687-43f1-96b3-37c0b2b9d1b2",
              "name": "Click39",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2700,
                2140
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl'); time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "bb290e1f-43ca-4448-8614-a6a97e295cab",
              "name": "Save Screenshot58",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                40,
                7420
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -280,
                -120
              ],
              "id": "3b24300a-247a-43f5-a0a6-403e32e4cf61",
              "name": "Supabase15",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6bec7028-141e-4c88-91ff-254fd5d268bf",
                      "leftValue": 5,
                      "rightValue": "={{ $('Supabase7').item.json.valor }}",
                      "operator": {
                        "type": "number",
                        "operation": "gt"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                2280,
                580
              ],
              "id": "5396e867-73b0-4d60-9c98-d58723fa6d98",
              "name": "If1"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Loop-Index"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2140,
                580
              ],
              "id": "7fa7a846-01f5-4d9d-926a-2bd49f85eb8c",
              "name": "Supabase7",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "=-1"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1740,
                580
              ],
              "id": "91bd6f23-af11-4e12-b704-52c59908e937",
              "name": "Supabase8",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "={{ $('Supabase7').item.json.valor +1}}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2700,
                580
              ],
              "id": "a8689f9e-d8c2-4b6c-8351-4a2b7eab869b",
              "name": "Supabase16",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "CUITS Plantas"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1920,
                1040
              ],
              "id": "7cfe501f-c5b8-47ec-b2b2-68f297e855df",
              "name": "Supabase17",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Obtener todos los registros del nodo de entrada\nconst registros = $input.all();  // Esto devuelve un array con todos los items\n\n// Obtener el índice (valor) de la posición deseada, por ejemplo, de Supabase\nconst valor = $('Supabase18').first().json['valor'];  // Asegúrate de que 'valor' es un número\n\n// Inicializamos el array de salida\nlet output = [];\n\n// Verificamos que el valor esté dentro del rango de los datos disponibles\nif (valor >= 0 && valor < registros.length) {\n    // Accedemos al registro en la posición indicada por 'valor'\n    const item = registros[valor].json;  // Accedemos al item correspondiente\n    const nombre = item.Nombre;  // Accedemos a 'Nombre' dentro de cada item\n    const apellido = item.Apellido;  // Accedemos a 'Apellido' dentro de cada item\n\n    // Agregamos el nombre y apellido al array de salida\n    output.push({\n        nombre: nombre,\n        apellido: apellido\n    });\n} else {\n    // Si el índice está fuera de rango, agregamos un error\n    output.push({\n        error: \"Índice fuera de rango\"\n    });\n}\n\n// Retornamos el array con el resultado\nreturn output;\n\n// Retornamos el array de objetos como salida\nreturn output;\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2060,
                1040
              ],
              "id": "53e1281e-4d5e-47c4-b699-f96a10d68008",
              "name": "Code5"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "CUITS Plantas"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1900,
                1700
              ],
              "id": "3735db7b-af53-41df-890e-9b9bf55c35ac",
              "name": "Supabase19",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Obtener todos los registros del nodo de entrada\nconst registros = $input.all();  // Esto devuelve un array con todos los items\n\n// Obtener el índice (valor) de la posición deseada, por ejemplo, de Supabase\nconst valor = $('Supabase20').first().json['valor'];  // Asegúrate de que 'valor' es un número\n\n// Inicializamos el array de salida\nlet output = [];\n\n// Verificamos que el valor esté dentro del rango de los datos disponibles\nif (valor >= 0 && valor < registros.length) {\n    // Accedemos al registro en la posición indicada por 'valor'\n    const item = registros[valor].json;  // Accedemos al item correspondiente\n    const nombre = item.CUIT;  // Accedemos a 'Nombre' dentro de cada item\n    const apellido = item.Apellido;  // Accedemos a 'Apellido' dentro de cada item\n\n    // Agregamos el nombre y apellido al array de salida\n    output.push({\n        nombre: nombre,\n        apellido: apellido\n    });\n} else {\n    // Si el índice está fuera de rango, agregamos un error\n    output.push({\n        error: \"Índice fuera de rango\"\n    });\n}\n\n// Retornamos el array con el resultado\nreturn output;\n\n// Retornamos el array de objetos como salida\nreturn output;\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2060,
                1700
              ],
              "id": "2e05b967-0d0f-45c3-9fb2-13cedfdbc22f",
              "name": "Code6"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1740,
                1700
              ],
              "id": "3eac48d1-71e0-4eb6-9df1-3d65e0cea8a8",
              "name": "Supabase20",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1740,
                1040
              ],
              "id": "07386ce7-dbfd-4c8a-82a6-85c494a0caab",
              "name": "Supabase18",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "8gRagMKXvdHIE0xS",
                  "mode": "list",
                  "cachedResultName": "direc"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                2220,
                1040
              ],
              "id": "80022acc-89c9-4cd8-919b-ad900e78bd41",
              "name": "direc"
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "8gRagMKXvdHIE0xS",
                  "mode": "list",
                  "cachedResultName": "direc"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                2200,
                1700
              ],
              "id": "56b39779-ca8c-4403-9732-fa5219016964",
              "name": "direc1"
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "8gRagMKXvdHIE0xS",
                  "mode": "list",
                  "cachedResultName": "direc"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                2500,
                580
              ],
              "id": "c9a8d36d-d52e-44b8-83fe-b588ed494200",
              "name": "direc2"
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "8gRagMKXvdHIE0xS",
                  "mode": "list",
                  "cachedResultName": "direc"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                1740,
                2140
              ],
              "id": "7eb50f9a-487b-4a0d-9e71-6181a8e1bd87",
              "name": "direc3"
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "8gRagMKXvdHIE0xS",
                  "mode": "list",
                  "cachedResultName": "direc"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                1740,
                3020
              ],
              "id": "da036a92-adf2-4a28-9831-e1c91fce3e10",
              "name": "direc4"
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "8gRagMKXvdHIE0xS",
                  "mode": "list",
                  "cachedResultName": "direc"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                -40,
                -120
              ],
              "id": "e7173e1a-621a-480e-955b-3ba76359e1ed",
              "name": "direc5"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(5); pyautogui.click(830,502)\""
              },
              "id": "3b95edb8-83c6-4dba-b04c-67b503a9ae04",
              "name": "Ingresa Secret1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                580,
                -280
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Usuario/Contraseña Incorrecto",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                440,
                360
              ],
              "id": "8eeed9a5-39fb-48a5-823c-d9c34fbd9ab4",
              "name": "Edit Fields2"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase6').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                580,
                360
              ],
              "id": "b7ec577a-5d41-4488-b323-371288622fbe",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                300,
                360
              ],
              "id": "1fad1e65-dd85-433f-a6cd-d09927d48652",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -780,
                200
              ],
              "id": "42df8627-aee8-4dbc-9b34-da0e4870df83",
              "name": "Supabase9",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1380,
                -80
              ],
              "id": "08b328b9-afb6-4d5f-abd4-dccfbe124769",
              "name": "Supabase2",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "262acf4d-ada2-48db-baf4-2df3942e2090",
              "name": "OCR Word1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                680,
                5760
              ],
              "notesInFlow": false,
              "onError": "continueRegularOutput",
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;import time; timesleep(5); direc = '{{$('direc5').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Denominacion-CNR-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "cde49a23-c9f4-4c99-9287-881c1805c484",
              "name": "Locate On Screen17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1060,
                4560
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(6);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "ac4a0fd8-afb3-4b7f-a8c7-46f4e113771e",
              "name": "Save Screenshot45",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                940,
                6340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.7))\""
              },
              "id": "811d099b-f84b-4867-8d05-11d44ad4b5a1",
              "name": "Click70",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                6340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(6);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "43439d30-dc0d-4f05-8edd-8c91060821b8",
              "name": "Save Screenshot46",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                940,
                6120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.7))\""
              },
              "id": "c787779a-84de-4da0-baa3-8d8a5d13abda",
              "name": "Click69",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                6120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(5);direc = '{{$('direc5').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "bea254cc-7602-4f94-9ce5-1b38977264ee",
              "name": "Save Screenshot47",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                800,
                7420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('direc5').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.6))\""
              },
              "id": "f18dd8bf-35e3-452b-b759-2f1761c2ddbe",
              "name": "Click71",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                920,
                7420
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(5); img = ImageGrab.grab(); direc = '{{$('direc5').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "005e93ef-e712-4109-a78d-66442be889e4",
              "name": "Save Screenshot21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                4560
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "d7f9dfff-ae6a-40d0-a487-245689b21148",
              "name": "Save Screenshot61",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                7420
              ]
            },
            {
              "parameters": {
                "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://portalasegurado.papps.lasegunda.com.ar'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "5b773529-1832-454e-b1b7-9a45cc33da60",
              "name": "Close&Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -780,
                -380
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "UsuariosIndex"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "={{ $('Supabase21').item.json.valor +1}}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -160,
                -320
              ],
              "id": "c9389774-4bc2-4316-8f90-3f0d8438fdaf",
              "name": "Supabase10",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "UsuariosIndex"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -300,
                -320
              ],
              "id": "56b30c9d-6627-4061-8478-08099ae47036",
              "name": "Supabase21",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "UsuariosIndex"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "0"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1260,
                -200
              ],
              "id": "ea3ddeea-0e42-4bfe-bd9f-705067cf5551",
              "name": "Supabase11",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "UsuariosIndex"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2160,
                2800
              ],
              "id": "906c1bbe-51be-429d-96ce-10bbf0481c57",
              "name": "Supabase22",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open to Browser": {
              "main": [
                [
                  {
                    "node": "Open Browser To",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open Browser To": {
              "main": [
                []
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Ingresa Secret",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Click28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Supabase9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Supabase21",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click28": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ingresa Secret": {
              "main": [
                [
                  {
                    "node": "Locate INICIAR",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate INICIAR": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser15": {
              "main": [
                [
                  {
                    "node": "Execute Command2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Execute Command3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command2": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser16": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Scroll": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser17": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "Execute Command4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click24": {
              "main": [
                [
                  {
                    "node": "Execute Command5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser20": {
              "main": [
                [
                  {
                    "node": "Click25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click25": {
              "main": [
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Locate On Screen5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser5": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Ingresa Secret2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Save Screenshot30",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ingresa Secret2": {
              "main": [
                [
                  {
                    "node": "Locate INICIAR2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate INICIAR2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser7": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot30": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser37",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser37": {
              "main": [
                [
                  {
                    "node": "Click49",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click49": {
              "main": [
                [
                  {
                    "node": "Save Screenshot31",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot31": {
              "main": [
                [
                  {
                    "node": "Locate On Screen18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen18": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser38",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser38": {
              "main": [
                [
                  {
                    "node": "Click50",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click50": {
              "main": [
                [
                  {
                    "node": "Save Screenshot32",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot32": {
              "main": [
                [
                  {
                    "node": "Locate On Screen23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen23": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser39",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser39": {
              "main": [
                [
                  {
                    "node": "Click51",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click51": {
              "main": [
                [
                  {
                    "node": "Save Screenshot33",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot33": {
              "main": [
                [
                  {
                    "node": "Locate On Screen24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen24": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser40": {
              "main": [
                [
                  {
                    "node": "Click52",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click52": {
              "main": [
                [
                  {
                    "node": "Save Screenshot34",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot34": {
              "main": [
                [
                  {
                    "node": "Locate On Screen25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen25": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser41": {
              "main": [
                [
                  {
                    "node": "Click53",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click53": {
              "main": [
                [
                  {
                    "node": "Save Screenshot35",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot35": {
              "main": [
                [
                  {
                    "node": "Click55",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser42": {
              "main": [
                [
                  {
                    "node": "Click54",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click54": {
              "main": [
                [
                  {
                    "node": "Save Screenshot36",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot35",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click55": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser42",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot36",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot36": {
              "main": [
                [
                  {
                    "node": "Click57",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser43": {
              "main": [
                [
                  {
                    "node": "Click56",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click56": {
              "main": [
                [
                  {
                    "node": "Save Screenshot36",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot36",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click57": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser43",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot37",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot37": {
              "main": [
                [
                  {
                    "node": "Locate On Screen26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen26": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser44",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser44": {
              "main": [
                [
                  {
                    "node": "Click58",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click58": {
              "main": [
                [
                  {
                    "node": "Save Screenshot38",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot37",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot38": {
              "main": [
                [
                  {
                    "node": "Locate On Screen27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen27": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser45",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser45": {
              "main": [
                [
                  {
                    "node": "Click59",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click59": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot38",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot5": {
              "main": [
                [
                  {
                    "node": "Locate On Screen3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser8",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser8": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot7": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot58",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot8": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser12": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen28": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Click68",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Save Screenshot46",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot39": {
              "main": [
                [
                  {
                    "node": "Click67",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser46": {
              "main": [
                [
                  {
                    "node": "Click60",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click60": {
              "main": [
                [
                  {
                    "node": "Save Screenshot45",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot39",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot40": {
              "main": [
                [
                  {
                    "node": "Locate On Screen31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen31": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser47",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser47": {
              "main": [
                [
                  {
                    "node": "Click61",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click61": {
              "main": [
                [
                  {
                    "node": "Save Screenshot41",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot41": {
              "main": [
                [
                  {
                    "node": "Locate On Screen32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen32": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser48",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser48": {
              "main": [
                [
                  {
                    "node": "Click62",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click62": {
              "main": [
                [
                  {
                    "node": "Save Screenshot42",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot42": {
              "main": [
                [
                  {
                    "node": "Click64",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser49": {
              "main": [
                [
                  {
                    "node": "Click63",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click63": {
              "main": [
                [
                  {
                    "node": "Save Screenshot44",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot42",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click64": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser49",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot43",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen33": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser51",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser51": {
              "main": [
                [
                  {
                    "node": "Click16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click16": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Local OCR Tesseract",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click17": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Local OCR Tesseract1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Find OCR Word Input": {
              "main": [
                [
                  {
                    "node": "OCR Word",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract": {
              "main": [
                [
                  {
                    "node": "Find OCR Word Input",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Word": {
              "main": [
                [
                  {
                    "node": "Click17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot44": {
              "main": [
                [
                  {
                    "node": "Locate On Screen34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen34": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser50",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser50": {
              "main": [
                [
                  {
                    "node": "Click65",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click65": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot44",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot43": {
              "main": [
                [
                  {
                    "node": "Save Screenshot44",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click67": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser46",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot39",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click68": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser18": {
              "main": [
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click18": {
              "main": [
                [
                  {
                    "node": "Save Screenshot47",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot19": {
              "main": [
                [
                  {
                    "node": "Locate On Screen19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen19": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser25": {
              "main": [
                [
                  {
                    "node": "Click33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click33": {
              "main": [
                [
                  {
                    "node": "Save Screenshot20",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot20": {
              "main": [
                [
                  {
                    "node": "Locate On Screen20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen20": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser26": {
              "main": [
                [
                  {
                    "node": "Click34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click34": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot15": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser21": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot16": {
              "main": [
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser22",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser22": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser23": {
              "main": [
                [
                  {
                    "node": "Click19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click19": {
              "main": [
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot18": {
              "main": [
                [
                  {
                    "node": "Locate On Screen16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen16": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser24": {
              "main": [
                [
                  {
                    "node": "Click20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click20": {
              "main": [
                [
                  {
                    "node": "Supabase8",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot22": {
              "main": [
                [
                  {
                    "node": "Locate On Screen21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen21": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser28": {
              "main": [
                [
                  {
                    "node": "Click22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click22": {
              "main": [
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot23": {
              "main": [
                [
                  {
                    "node": "Locate On Screen22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen22": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser29": {
              "main": [
                [
                  {
                    "node": "Click23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click23": {
              "main": [
                [
                  {
                    "node": "Save Screenshot24",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot24": {
              "main": [
                [
                  {
                    "node": "Locate On Screen38",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen38": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser30": {
              "main": [
                [
                  {
                    "node": "Click26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click26": {
              "main": [
                [
                  {
                    "node": "Supabase20",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot25": {
              "main": [
                [
                  {
                    "node": "Locate On Screen39",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen39": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser31": {
              "main": [
                [
                  {
                    "node": "Click27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click27": {
              "main": [
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot26": {
              "main": [
                [
                  {
                    "node": "Locate On Screen40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen40": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser32": {
              "main": [
                [
                  {
                    "node": "Click29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click29": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot27": {
              "main": [
                [
                  {
                    "node": "Locate On Screen41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen41": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser33": {
              "main": [
                [
                  {
                    "node": "Click30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click30": {
              "main": [
                [
                  {
                    "node": "Supabase18",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot28": {
              "main": [
                [
                  {
                    "node": "Locate On Screen42",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen42": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser34": {
              "main": [
                [
                  {
                    "node": "Click31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click31": {
              "main": [
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click39",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot29": {
              "main": [
                [
                  {
                    "node": "Locate On Screen43",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen43": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser35",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser35": {
              "main": [
                [
                  {
                    "node": "Click32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click32": {
              "main": [
                [
                  {
                    "node": "Save Screenshot52",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot52": {
              "main": [
                [
                  {
                    "node": "Click83",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser59": {
              "main": [
                [
                  {
                    "node": "Click77",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click77": {
              "main": [
                [
                  {
                    "node": "Save Screenshot53",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot52",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot53": {
              "main": [
                [
                  {
                    "node": "Locate On Screen44",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen44": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser60",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser60": {
              "main": [
                [
                  {
                    "node": "Supabase22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot54": {
              "main": [
                [
                  {
                    "node": "Locate On Screen45",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen45": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser61",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser61": {
              "main": [
                [
                  {
                    "node": "Click79",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click79": {
              "main": [
                [
                  {
                    "node": "Save Screenshot55",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "direc4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot55": {
              "main": [
                [
                  {
                    "node": "Click81",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser62": {
              "main": [
                [
                  {
                    "node": "Click80",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click80": {
              "main": [
                [
                  {
                    "node": "Save Screenshot57",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot55",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click81": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser62",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot56",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot56": {
              "main": [
                [
                  {
                    "node": "Save Screenshot57",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot57": {
              "main": [
                [
                  {
                    "node": "Locate On Screen46",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen46": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser63",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser63": {
              "main": [
                [
                  {
                    "node": "Click82",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click82": {
              "main": [
                [
                  {
                    "node": "Save Screenshot59",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot57",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click83": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser59",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot52",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot59": {
              "main": [
                [
                  {
                    "node": "Locate On Screen48",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen48": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser64",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser64": {
              "main": [
                [
                  {
                    "node": "Click36",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click36": {
              "main": [
                [
                  {
                    "node": "Save Screenshot60",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot59",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot60": {
              "main": [
                [
                  {
                    "node": "Locate On Screen49",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen49": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser65",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser65": {
              "main": [
                [
                  {
                    "node": "Click37",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click37": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot60",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "direc5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase13": {
              "main": [
                []
              ]
            },
            "Supabase14": {
              "main": [
                [
                  {
                    "node": "Code",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields1": {
              "main": [
                [
                  {
                    "node": "Click35",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click35": {
              "main": [
                [
                  {
                    "node": "direc4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot53",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click39": {
              "main": [
                [
                  {
                    "node": "direc3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "direc3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot58": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase15": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase7": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase8": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "direc2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "direc3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase16": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase17": {
              "main": [
                [
                  {
                    "node": "Code5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code5": {
              "main": [
                [
                  {
                    "node": "direc",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase19": {
              "main": [
                [
                  {
                    "node": "Code6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase20": {
              "main": [
                [
                  {
                    "node": "Supabase19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code6": {
              "main": [
                [
                  {
                    "node": "direc1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase18": {
              "main": [
                [
                  {
                    "node": "Supabase17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "direc": {
              "main": [
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "direc1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "direc2": {
              "main": [
                [
                  {
                    "node": "Supabase16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "direc3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "direc4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot54",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "direc5": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields2": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "Edit Fields2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Supabase11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen17": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot45": {
              "main": [
                [
                  {
                    "node": "Click70",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click70": {
              "main": [
                [
                  {
                    "node": "Save Screenshot39",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot46": {
              "main": [
                [
                  {
                    "node": "Click69",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click69": {
              "main": [
                [
                  {
                    "node": "Save Screenshot39",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot47": {
              "main": [
                [
                  {
                    "node": "Click71",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click71": {
              "main": [
                [
                  {
                    "node": "Save Screenshot61",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot21": {
              "main": [
                [
                  {
                    "node": "Locate On Screen17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot61": {
              "main": [
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase10": {
              "main": [
                [
                  {
                    "node": "Supabase15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase21": {
              "main": [
                [
                  {
                    "node": "Supabase10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase11": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase22": {
              "main": [
                [
                  {
                    "node": "Supabase14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "f301789b-8f4b-4708-b498-b12cfadd2e00",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-03-05T18:18:19.422Z",
          "updatedAt": "2025-06-10T18:15:18.000Z",
          "id": "MU3ylDsM0vwHrbDf",
          "name": "N8N-CCMA-ARCA",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "1cff8bed-5ab3-432b-8ad9-f51bb71dd1f8",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -1240,
                -200
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
                      "name": "Web Browser",
                      "value": "chrome",
                      "type": "string"
                    },
                    {
                      "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
                      "name": "URL",
                      "value": "https://auth.afip.gob.ar/contribuyente_/login.xhtml",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "ad968908-09c9-4374-bb48-707c92e11b2e",
              "name": "Open to Browser",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -680,
                -300
              ],
              "notesInFlow": false,
              "disabled": true,
              "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
            },
            {
              "parameters": {
                "command": "=start {{ $json['Web Browser'] }} {{ $json.URL }}"
              },
              "id": "090e7b85-1ad1-4198-a10c-786cc7c5c0d6",
              "name": "Open Browser To",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -500,
                -480
              ],
              "notesInFlow": true,
              "notes": "New Window start \"\" {{ $json['Web Browser'] }} --new-window {{ $json.URL }}\n"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;direc ='{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}/.n8n/Screenshots/ARCA/Pantalla-Inicio.png')\""
              },
              "id": "9b24799c-011d-4e91-b0b4-d659b6e72100",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                -120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc='{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n/Screenshots/LookUp.png', grayscale=True, confidence=0.8))\""
              },
              "id": "b71e23d4-77a5-4bf3-9e2c-f91dd0a86473",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                -120
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b988cd0d-7fd1-4ed6-abca-2147b6627845",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                480,
                -120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y +50}})\" "
              },
              "id": "9bed18a7-d1e3-421e-86cf-b9a8b916f72b",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                -120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2); pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y -30}});pyautogui.click({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y -30}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario AR']}}')\""
              },
              "id": "71af3a2a-daef-48ba-834c-74c316d72aea",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                -120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "347096d9-e6b5-404d-8d79-1bfe7c650458",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Inicio-1.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "9daf7fe0-f78a-4479-9960-b6367c4500aa",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                100
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f086e355-e647-4447-94b9-5b11ae7da2ee",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                720,
                100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser').item.json.x }}, {{ $('Coordinate Parser').item.json.y}})\" "
              },
              "id": "619cdffa-2e19-470a-8b4a-86ca21692836",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click(958, 410); pyautogui.typewrite(r'{{ $('If').item.json['Secret AR'] }}')\""
              },
              "id": "71e1b971-5f22-4e2e-9409-7554482f519e",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "e05f7e91-844c-4af7-ba1d-eabff51454c4",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1460
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2671bf9a-b40d-4431-8754-4b60432137eb",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                740,
                1460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.press('down'); pyautogui.press('enter')\""
              },
              "id": "c6ac6be4-5099-463d-8b32-1910efc816bc",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(8);img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "e73d4f6c-91ad-40e2-8254-2d8927476eca",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1680
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2b0f1f3d-c899-47c1-a7fe-b9f2f070879d",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                1680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "13d56fee-8d0e-4f8d-831b-4240909a6783",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-CalculodeDeuda.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "6fedd952-cbc2-4cd7-8c5d-3910b9dcad58",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                1900
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a6cc99c3-aa0d-4855-9e48-741e1b19bf91",
              "name": "Coordinate Parser3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                920,
                1900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "27ca58f1-1ba4-4deb-be12-01b657e3df7f",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3c6cc408-94fe-4a19-89ce-cc6d3a35317b",
              "name": "Coordinate Parser5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                920,
                2120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "8da41b0c-c52f-4acc-922d-d43bcda8e7bc",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Barra de Busqueda\n**Escribe monotributo en la\n barra de busqueda y entra** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1420
              ],
              "typeVersion": 1,
              "id": "2f4db1cc-50cd-4e09-abed-5d1ddddf1e43",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "content": "## Deslizo hacia abajo\n**Busca el botón \nVerSaldo/Pagar \ny lo presiona** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1640
              ],
              "typeVersion": 1,
              "id": "4adfd49f-f044-4cab-8435-fbaf44489566",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "content": "## Boton Calculo de Deuda\n**Busca y presiona el \nbotón Calculo de deuda**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1860
              ],
              "typeVersion": 1,
              "id": "5c4f96c3-ee56-41f9-a4d9-a885d36c0aa3",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "content": "## Deslizo hacia abajo\n**Busca el botón \nImprimir en CCMA \ny lo presiona**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2080
              ],
              "typeVersion": 1,
              "id": "83e8f2fe-fdef-477d-948c-0b723b036b14",
              "name": "Sticky Note4"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Secreto**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                80
              ],
              "typeVersion": 1,
              "id": "124cf238-438b-483a-81d8-1f4bea4ec270",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "faffff07-b5ef-4f21-8333-9e13976d173a",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2320
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Aceptar-CCMA.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "660fb063-0042-4b33-8f3c-3b48ca96cb9f",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                2320
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7a06ef9a-392b-4788-9411-3f3215374e35",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                2320
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "c81bbf15-5585-4bcf-b6e6-ec988479ce09",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2320
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Aceptar\n**Presiona el botón Aceptar\nen el Pop-Up que se genera \nal presionar Imprimir**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2300
              ],
              "typeVersion": 1,
              "id": "8750a129-d177-4917-81a5-208d7e251dd5",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "f03eb6de-f9f4-47f1-94ea-18d696af2175",
              "name": "Save Screenshot8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Barra-Guardar-Nombre.png', grayscale=True, confidence=0.45))\"\n"
              },
              "id": "54bb4ec1-06f0-49aa-b88d-bfd9af42f2c6",
              "name": "Locate On Screen8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                2760
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "5de9ca12-905f-49d8-9c68-54d4faffb22b",
              "name": "Coordinate Parser8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                2760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now(); current_date = datetime.now();mesdirec = current_date.strftime('%m - %B %Y'); mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize());nombre= '{{ $('Loop Over Items').item.json.Nombre }}'; apellido= '{{ $('Loop Over Items').item.json.Apellido }}'; pyautogui.doubleClick({{ $('Coordinate Parser8').item.json.x +50}}, {{ $('Coordinate Parser8').item.json.y }}); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\ARCA\\Estado de Cuenta\\EstadoCuenta-ARCA-{nombre}-{mesdirec}.pdf')\""
              },
              "id": "667303bb-9b82-4d6b-8a56-26d235bee3cc",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2760
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2740
              ],
              "typeVersion": 1,
              "id": "44dc00d6-4931-4c16-93a7-ef58e88dfe3f",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "8e60ee54-94ee-432e-8000-322a170c015f",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -700,
                -120
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -920,
                -120
              ],
              "id": "a56071bd-69cf-4864-a27c-1c103e2755ee",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "9ac9ef8c-45a2-46e6-8e6d-d58481a89a20",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Window-CCMA.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "69ac7c4e-c507-4709-81e7-8a1d27f799f9",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3640
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b60506d5-517d-42b4-b072-40c128b3c15f",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                3640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math; reference_point = ({{ $json.x +50}}, {{ $json.y}});direc = '{{$('Edit Fields').item.json.direc}}'; matches = list(pyautogui.locateAllOnScreen(fr'{direc}\\.n8n\\\\Screenshots\\\\Boton-Close.png')); closest_match = min(matches, key=lambda match: math.sqrt((pyautogui.center(match)[0] - reference_point[0])**2 + (pyautogui.center(match)[1] - reference_point[1])**2)); pyautogui.click(pyautogui.center(closest_match))\""
              },
              "id": "dae0d610-4f6c-49b1-8b34-d3af6909692a",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3640
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar pestañas\n**Cierra la pestaña \nFormularios** ",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3620
              ],
              "typeVersion": 1,
              "id": "9dc96da0-f2d9-478e-a3ed-95f3535d459a",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "69d4008f-b016-4b9a-ae9d-31706b356766",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                4080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\Logo-Perfil.png', grayscale=True, confidence=0.8))\""
              },
              "id": "ee452c65-8210-4442-bd8f-2f4d486213fd",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                4080
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ee420c32-92f1-4333-9411-c310de36f209",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                4080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
              },
              "id": "38ff7da9-a639-4e91-a55e-4d96bd700713",
              "name": "Click17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4080
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Presiona el logo de \nPerrfil en ARCA**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4060
              ],
              "typeVersion": 1,
              "id": "330be29e-7dc1-4d59-a08b-005a58335373",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $('Supabase').item.json['Usuario AR'] }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    },
                    {
                      "id": "64cfe917-6ae9-4347-8ac4-af0952f5a7eb",
                      "leftValue": "={{ $('Supabase').item.json['Secret AR'] }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -480,
                -100
              ],
              "id": "79778a99-4329-48dc-96b6-140025767e01",
              "name": "If"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "444c3f79-5912-43fd-9b05-391169f8fd99",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "7db9818d-293e-4bfc-8c86-bf709d61ac0a",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                2980
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "6cc668e1-e5fc-47cc-9b58-05a86718099e",
              "name": "Coordinate Parser12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                2980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "0e1db548-4f20-4742-b1d6-e6da2378cb32",
              "name": "Click18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2980
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2960
              ],
              "typeVersion": 1,
              "id": "574c9a9a-6474-4dfb-a4b8-c73d6e0eedf0",
              "name": "Sticky Note11"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "18cc8023-12d5-430e-8b4b-523b26ae8b54",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                4300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\CerrarSesion-Perfil.png', grayscale=True, confidence=0.8))\""
              },
              "id": "8878b6d9-ccce-472f-9bfe-dc21d3fc424d",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                4300
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1aac0acd-bfcb-46df-945e-371a05219fa9",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                4300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
              },
              "id": "6291655a-ef38-45d8-a018-87a527ba04b5",
              "name": "Click19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Selecciona la opción \nCerrar Sesión**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4280
              ],
              "typeVersion": 1,
              "id": "0768b122-be6d-4a9b-a66f-e5c8bc981441",
              "name": "Sticky Note12"
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -1220,
                -20
              ],
              "id": "a6651d46-f3f9-47c8-9f5e-d435c71a9376",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "42fa25a2-4e58-47ae-b2bf-7f16ca7bb4ef",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WindowARCA.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "3bcc31f0-2da1-461c-99c2-08a1c25b854c",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3860
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c1927d3a-59b4-4a5b-96e4-4593784f7a87",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                3860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math; reference_point = ({{ $json.x +50}}, {{ $json.y}}); direc = '{{$('Edit Fields').item.json.direc}}';matches = list(pyautogui.locateAllOnScreen(fr'{direc}\\.n8n\\\\Screenshots\\\\Boton-Close.png')); closest_match = min(matches, key=lambda match: math.sqrt((pyautogui.center(match)[0] - reference_point[0])**2 + (pyautogui.center(match)[1] - reference_point[1])**2)); pyautogui.click(pyautogui.center(closest_match))\""
              },
              "id": "3ccf1c3f-1dbd-423e-ac83-d8ca6ba9d23a",
              "name": "Click20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3860
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar pestañas\n**Cierra pestaña de\n Constancias**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3840
              ],
              "typeVersion": 1,
              "id": "a99ba968-015b-41ec-b4bb-ae9542c8c672",
              "name": "Sticky Note13"
            },
            {
              "parameters": {
                "content": "20337202536**Ingre20413431078sa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                -140
              ],
              "typeVersion": 1,
              "id": "721b042b-c811-4f93-9046-1be387dade9f",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "content": "## Cambio de Clave Error\n**En caso de solicitar \ncambio de clave, manda\nun mensaje avisando \nla situación**",
                "height": 260,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                600
              ],
              "typeVersion": 1,
              "id": "7d5327fd-0b12-4006-8f5f-df2eae97d95e",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\CambiarClave.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "b1b37974-8650-46aa-b874-3ced9eadb6cf",
              "name": "Click26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9c98f6c0-cfa4-4a97-8440-cd105c0c4cf5",
              "name": "Coordinate Parser18",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                960,
                660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "32b18d8d-460a-4d07-8c03-ba4eb6fab405",
              "name": "Click27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Cancelar-CambiarClave.png', grayscale=True, confidence=0.8))\""
              },
              "id": "ac8c1386-996d-4fff-a5a5-0098848fcf3e",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                820,
                660
              ]
            },
            {
              "parameters": {
                "content": "## Usuario/Clave Incorrecto\n**En caso de que el usuario\no la contrasena no funcionen\nlo suma a la lista de errores**",
                "height": 260,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                300
              ],
              "typeVersion": 1,
              "id": "7d7329b5-ad66-4cf8-b222-72efc3e1bf62",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\ClaveoUsuarioIncorrecto.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "4894f5ff-bc59-4706-a253-3544aca4767f",
              "name": "Click28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                400
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-EstadodeCuenta.png', grayscale=True, confidence=0.999))\""
              },
              "id": "43cdcede-3704-4524-9dde-31c800962db4",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                1680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.scroll(-500)\""
              },
              "id": "4ddc75c9-c249-442e-b5bf-43f15ad22f07",
              "name": "Scroll",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                480,
                1700
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.scroll(-3000)\""
              },
              "id": "9e93e8d7-47e5-4906-9711-d6a9f9aef72b",
              "name": "Scroll1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                480,
                2120
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Imprimir-CCMA.png', grayscale=True, confidence=0.9))\"\n"
              },
              "id": "f9d604c5-a9b6-41ed-8658-ba58168ed212",
              "name": "Click16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                2120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "9c4a5cbb-f8c3-48b8-802e-8bbf1c0fba3d",
              "name": "Save Screenshot7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "2f3660d0-6f62-4928-84a9-d3a0f7c2fb88",
              "name": "Save Screenshot10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2540
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Imprimir.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "e8361dfc-464c-4c45-94b8-b2d7136ab120",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                2540
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "fc1a64dc-81cf-4de0-a38f-e915047f792d",
              "name": "Coordinate Parser7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                2540
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "9b4824ff-20d3-4f62-ae36-18c845812382",
              "name": "Click21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2540
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Imprimir\n**Presiona el botón Imprimir\nen el Pop-Up que se genera \nal presionar Aceptar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2520
              ],
              "typeVersion": 1,
              "id": "64e09ab1-2d37-4628-a613-84d3adc74fb8",
              "name": "Sticky Note6"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "92868175-2d77-4784-b813-33ad7682d2f3",
              "name": "Save Screenshot26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3200
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3ed2e2ce-4df9-477e-9a9b-27344d68caba",
              "name": "Coordinate Parser33",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser33').item.json.x }}, {{ $('Coordinate Parser33').item.json.y }})\""
              },
              "id": "00b683b1-0764-435b-bdd4-64472ebe3af8",
              "name": "Click41",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3200
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3180
              ],
              "typeVersion": 1,
              "id": "f9b0bdf7-f396-4e41-964d-8fe9a04f10eb",
              "name": "Sticky Note33"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "302dccd9-aea3-4dc8-bf14-ddfdd137cdd2",
              "name": "Click42",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3200
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "156dedc4-e627-4f15-a9f6-2fda3f7b9968",
              "name": "Save Screenshot28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3420
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2c51737a-fea6-444b-8b1a-e98244d4cca3",
              "name": "Coordinate Parser35",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser35').item.json.x +100}}, {{ $('Coordinate Parser35').item.json.y }})\""
              },
              "id": "d399459a-13ae-4eee-938d-df7f6a47abb7",
              "name": "Click45",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3420
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## En caso de Loop\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3400
              ],
              "typeVersion": 1,
              "id": "dfe41035-95da-4744-828f-643cfa68dd84",
              "name": "Sticky Note35"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\""
              },
              "id": "3e67a2cb-213c-40a0-aa2f-e638c07de4e5",
              "name": "Click46",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3420
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Captcha Error\n**Just that**",
                "height": 260,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                900
              ],
              "typeVersion": 1,
              "id": "81675f7e-2614-48d7-896e-9af79f58d805",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}'; import time; time.sleep(8);print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Captcha-Incorrecto.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "e88ea492-6850-4674-846b-dd4e25b9f1c1",
              "name": "Click30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1000
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "11cb5a18-30bc-41e3-87bb-03f8ff1415d0",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1240
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\\\.n8n\\Screenshots\\ARCA\\WindowARCA.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "16aa827f-6fd9-442f-a2b2-7c639900cd6c",
              "name": "Locate On Screen17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                1240
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f83e321c-930a-45d4-b163-2e1f8d848a52",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                440,
                1240
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math; reference_point = ({{ $json.x +50}}, {{ $json.y}});direc = '{{$('Edit Fields').item.json.direc}}'; matches = list(pyautogui.locateAllOnScreen(fr'{direc}\\.n8n\\\\Screenshots\\\\Boton-Close.png')); closest_match = min(matches, key=lambda match: math.sqrt((pyautogui.center(match)[0] - reference_point[0])**2 + (pyautogui.center(match)[1] - reference_point[1])**2)); pyautogui.click(pyautogui.center(closest_match))\""
              },
              "id": "e1e7fd63-9e18-48a6-8dc3-5f55c59300a8",
              "name": "Click31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                580,
                1240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
                      "name": "Web Browser",
                      "value": "chrome",
                      "type": "string"
                    },
                    {
                      "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
                      "name": "URL",
                      "value": "https://auth.afip.gob.ar/contribuyente_/login.xhtml",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "facd212e-80c9-44f4-8678-270b8f7f3dfa",
              "name": "Open to Browser1",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                920,
                1240
              ],
              "notesInFlow": false,
              "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
            },
            {
              "parameters": {
                "command": "=start {{ $json['Web Browser'] }} {{ $json.URL }}"
              },
              "id": "7baf1fa9-fbb1-490f-9a62-c4a5898ad660",
              "name": "Open Browser To1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1240
              ],
              "notesInFlow": true,
              "notes": "New Window start \"\" {{ $json['Web Browser'] }} --new-window {{ $json.URL }}\n"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Barra-Busqueda.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "e7189586-b8bc-4301-b6e2-e5bb0febf0ba",
              "name": "Click22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                1460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1200
              ],
              "typeVersion": 1,
              "id": "ccf34fff-b316-4e90-852b-dae2a490efd0",
              "name": "Sticky Note14"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click(958, 410); pyautogui.typewrite('Monotributo adhes')\""
              },
              "id": "fff3f906-aa08-436b-ab35-b0eb74ee36eb",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                920,
                1460
              ]
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=python -c \"import pyautogui; pyautogui.doubleClick({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "bc84ca13-9bc7-48f7-a250-433e99bfd6a3",
              "name": "Click23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1680
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -320,
                -120
              ],
              "id": "5913a7f1-5971-4093-83a7-e872dbe1e768",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(4); pyautogui.doubleClick(1402, 687)\""
              },
              "id": "1d874c26-9a6b-4eb5-870b-e726e2d94499",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1360,
                -100
              ]
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1060,
                -120
              ],
              "id": "eefb8a65-a4b0-42ab-a57a-b25baab147af",
              "name": "Supabase2",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase3').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                640,
                400
              ],
              "id": "b5b20b75-fe37-4c02-836d-be1c54d7934f",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Usuario/Contraseña Incorrecto",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                500,
                400
              ],
              "id": "04ccc4c8-a3ab-4369-806d-4f87223dbf56",
              "name": "Edit Fields2"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                360,
                400
              ],
              "id": "77e507f8-a6de-43f1-8b6e-3c220c28ac85",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase6').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                620,
                1000
              ],
              "id": "6783c778-f1be-4a70-8a76-0a925d866523",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Captcha",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                480,
                1000
              ],
              "id": "844946a7-7d37-4244-8972-80f7d030bb7e",
              "name": "Edit Fields3"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                340,
                1000
              ],
              "id": "75b221d2-8d0e-4791-9cee-9cc6f148828e",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -700,
                140
              ],
              "id": "6b856744-d95c-4d17-86e2-801cf9981eb1",
              "name": "Supabase7",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase9').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                660,
                660
              ],
              "id": "3faab802-71c5-46b2-a96b-d877e2459c65",
              "name": "Supabase8",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Nesecita un cambio de contrasena",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                520,
                660
              ],
              "id": "78bc90bb-b4b5-4560-a21d-4008eb29e09d",
              "name": "Edit Fields4"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                380,
                660
              ],
              "id": "28fd954e-3982-4ed8-9eba-a45625655721",
              "name": "Supabase9",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://auth.afip.gob.ar/contribuyente_/login.xhtml'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "bfd8c308-a7ff-415f-9555-046c8204da3f",
              "name": "Close&Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -500,
                -300
              ],
              "alwaysOutputData": true
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open to Browser": {
              "main": [
                [
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open Browser To": {
              "main": [
                []
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Click28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Click22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser3": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser5": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot8": {
              "main": [
                [
                  {
                    "node": "Locate On Screen8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser8": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Open to Browser",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click17": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser12": {
              "main": [
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click18": {
              "main": [
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click19": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click20": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click26": {
              "main": [
                [
                  {
                    "node": "Supabase9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser18": {
              "main": [
                [
                  {
                    "node": "Click27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click27": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click28": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Scroll": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot7": {
              "main": [
                [
                  {
                    "node": "Click16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click16": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Scroll1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser7": {
              "main": [
                [
                  {
                    "node": "Click21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click21": {
              "main": [
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot26": {
              "main": [
                [
                  {
                    "node": "Click42",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser33": {
              "main": [
                [
                  {
                    "node": "Click41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click41": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click42": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser33",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot28": {
              "main": [
                [
                  {
                    "node": "Click46",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser35": {
              "main": [
                [
                  {
                    "node": "Click45",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click45": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click46": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser35",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click30": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Locate On Screen17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen17": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click31": {
              "main": [
                [
                  {
                    "node": "Open to Browser1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open to Browser1": {
              "main": [
                [
                  {
                    "node": "Open Browser To1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click22": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open Browser To1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click23": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields2": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Edit Fields2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields3": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields4": {
              "main": [
                [
                  {
                    "node": "Supabase8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase9": {
              "main": [
                [
                  {
                    "node": "Edit Fields4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase8": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "d5902fd9-9e83-4f49-9e2e-c50ed4da4e10",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-04-08T17:25:08.390Z",
          "updatedAt": "2025-05-23T15:29:12.000Z",
          "id": "QBnriGcCTfdJDwXM",
          "name": "Rechazados-ControlDocumentario",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "6d61e1f5-52c1-4b0c-a71f-267bc8931fc0",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -180,
                100
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                280,
                200
              ],
              "id": "3dd0e5d2-fda8-40dc-839a-f03df6a09808",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -180,
                280
              ],
              "id": "a172abee-8471-4140-adc2-95bbeaa08b7a",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8ef757f9-5bba-4b60-8482-548a90e6b578",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "7ec7b28d-207d-424f-a31e-ed6a8a0c6776",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                200
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "bb443110-d5d1-4d7a-9a3d-174911c8b899",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1060,
                200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y }}); pyautogui.typewrite('30716401622'); pyautogui.typewrite(['escape'])\""
              },
              "id": "f6cc2b87-877d-4347-884b-fa59f6dd6717",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                200
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                180
              ],
              "typeVersion": 1,
              "id": "daa7e382-7f97-4e99-8c99-216a119dd53e",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "140b38ed-05e7-43c3-bff5-ec0c77a3b4c7",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "c21a53ac-b830-4394-a88c-4c63fdf52bac",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                420
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9749cf45-6f1f-4b10-a948-a3ab72abedce",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1060,
                420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser').item.json.x}}, {{ $('Coordinate Parser').item.json.y }}); pyautogui.typewrite('TR33Ingresos*')\""
              },
              "id": "cea006b2-a747-4662-a6c7-2f09edcc1ae7",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                420
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                400
              ],
              "typeVersion": 1,
              "id": "441ae083-d375-4108-b36a-1b493a464283",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "b2c6b4ec-aed3-4d68-ac65-0421ed4e2eda",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "13b0bfac-4bdc-4fcd-86f5-dc46c14780e7",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                640
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f789199b-e20a-45e4-b2e1-94558fafc627",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1060,
                640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser1').item.json.x }}, {{ $('Coordinate Parser1').item.json.y }})\""
              },
              "id": "40d4cba4-b36f-446a-a6e7-9b06afda0a80",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                640
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                620
              ],
              "typeVersion": 1,
              "id": "bc9ab2d0-3c02-44da-a356-2343c11b77f1",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "3cb67ff8-042a-46e4-8e67-2a9b19e9da4b",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f3d09118-e1cc-4c50-b82a-a28bc5cefcf5",
              "name": "Locate On Screen3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                860
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1e9b6e82-e856-44c2-a13b-130be3acecd6",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1060,
                860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser2').item.json.x }}, {{ $('Coordinate Parser2').item.json.y }})\""
              },
              "id": "8d5d8977-7226-4bc6-a02b-f7f28a8e20a8",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                860
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                840
              ],
              "typeVersion": 1,
              "id": "39563d5a-53c5-41a8-9a95-fb50c10bcefd",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "f9da9bd4-3402-412a-880e-8dfde1a0a9c8",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                1080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "b1e03de4-852c-4eb9-82bf-2cbbdd7c5fb3",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                1080
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ec2433f2-317f-486e-bd1b-08d53c771517",
              "name": "Coordinate Parser3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1060,
                1080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser3').item.json.x}}, {{ $('Coordinate Parser3').item.json.y }})\""
              },
              "id": "b2414a00-4498-4e2c-be1e-629a57557ccf",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                1080
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                1060
              ],
              "typeVersion": 1,
              "id": "30ec271f-1753-4134-ac47-4a55c4376bd4",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                2380
              ],
              "typeVersion": 1,
              "id": "96983f10-b722-4261-99de-69adefaa232d",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
              },
              "id": "abd78a37-53ab-4806-b958-828b8ee58da6",
              "name": "OpenBrowserCmd",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                0,
                0
              ],
              "alwaysOutputData": false,
              "executeOnce": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1080,
                2400
              ],
              "id": "ad8ce75d-be2a-4909-b267-526a221c104a",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $json.Texto }};{{ $('Get Table - V').item.json.stdout }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1200,
                2400
              ],
              "id": "e9ea6bc7-8bda-439e-951e-dc2ed50aaf30",
              "name": "Supabase2",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "="
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                720,
                2400
              ],
              "id": "a9695043-30a8-42ef-ab29-df55f3db4859",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Documentos"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1500,
                2400
              ],
              "id": "2bba975b-8ce8-4306-8fdd-9c50aa382834",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "1fc536e1-56f0-4aae-a499-5eb36b267742",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1360,
                2400
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
              },
              "id": "b47f7f78-8b75-4faa-9b5b-7660c0eb231f",
              "name": "Get Table - V",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                860,
                2400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "33b3a694-8c83-4086-a41f-92d7342fe48f",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                1300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AreaTrabajo-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "06c4cb9f-9ceb-4f31-9b35-84d4de141e1d",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                1300
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "002bc774-0ea8-4d71-bcee-201fd2021a18",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1060,
                1300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser6').item.json.x }}, {{ $('Coordinate Parser6').item.json.y }})\""
              },
              "id": "9392001c-5069-4f2a-9e7b-928a7cfcc610",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1260,
                1300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                1280
              ],
              "typeVersion": 1,
              "id": "e0ea54df-3ab6-4b88-a1f8-26c0002b466f",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "2591e291-e83c-44a4-bcf8-e7590f15336d",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                1520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "e0cd2839-4800-48ad-a051-4d7c7369f7a5",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                880,
                1520
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "75fed494-a2c3-4f4a-a672-758a3599c9e9",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1040,
                1520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser10').item.json.x }}, {{ $('Coordinate Parser10').item.json.y}})\""
              },
              "id": "d12445c6-716d-4005-8e83-fa2d3f4f8700",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                1520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## DropDown SJS\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                1500
              ],
              "typeVersion": 1,
              "id": "7b015580-dd2e-440d-ac6b-98ee7b0fafad",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "5973c9c3-9962-47a8-aa52-29e46cc2b498",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1360,
                1520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-SJS-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "5336653e-133a-44d2-85d7-42f88165ba45",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1520,
                1520
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b1a83bf6-432e-4c0c-87c7-7f175ab36f37",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1680,
                1520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser9').item.json.x }}, {{ $('Coordinate Parser9').item.json.y }})\""
              },
              "id": "04ff93a6-ca6e-40bf-a927-3a687ec23f9f",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1200,
                1520
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Estados-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "0bb6af8a-5f40-4972-9b74-e96e07a7bd81",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                880,
                1740
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "75e4a627-03de-4660-a388-6672b79fc6bb",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1040,
                1740
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser11').item.json.x }}, {{ $('Coordinate Parser11').item.json.y}})\""
              },
              "id": "f4b93949-6c78-47f8-9c60-647947d4d4c2",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                1740
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                1720
              ],
              "typeVersion": 1,
              "id": "2cdb848f-fee2-47af-9496-14abb4793b67",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "c17d267e-56ce-4ac4-b4c3-59380c5f7138",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                1740
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser13').item.json.x }}, {{ $('Coordinate Parser13').item.json.y }}); time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser13').item.json.x }}, {{ $('Coordinate Parser13').item.json.y }})\""
              },
              "id": "de6ebfd3-0f7d-4827-a39e-9ff3029355dd",
              "name": "Click 11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1200,
                1960
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "623d6109-5411-42f7-a5aa-79869f5253ae",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                1960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-SeleccionarTodos-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "e446d463-d81a-42be-8432-64cfe47370ef",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                880,
                1960
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e03e568d-bada-4780-8e93-0717a69c86c3",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1040,
                1960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.click({{ $('Coordinate Parser14').item.json.x -25}}, {{ $('Coordinate Parser14').item.json.y }})\""
              },
              "id": "e166d48d-de8c-45ca-94fa-11190b15c7e0",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                1960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion de Estados\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                1940
              ],
              "typeVersion": 1,
              "id": "79a7b6a6-30f7-49c1-b4d0-404f856594e2",
              "name": "Sticky Note11"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(0.5); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Rechazado-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "be69c997-e1c0-4e47-8b02-dc0641bb9872",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1520,
                1960
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c5d5a35b-1a8f-4aee-b080-3d8e446bc473",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1680,
                1960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "401593be-ea32-43f7-bd99-24fc8b73a73f",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                720,
                2180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "0c45659f-252c-4f7c-add8-d35444bc3b91",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                2180
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c3db0105-b90a-4c88-a896-0fc273604571",
              "name": "Coordinate Parser15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1060,
                2180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser15').item.json.x }}, {{ $('Coordinate Parser15').item.json.y }})\""
              },
              "id": "fa57f207-2c82-4775-9269-3fd0d39a10de",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1840,
                2180
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                400,
                2160
              ],
              "typeVersion": 1,
              "id": "10917eac-46d4-4bac-b7c9-e575745e3ac8",
              "name": "Sticky Note12"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6d032dad-66f7-4760-8421-7531ba564039",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                1840,
                1320
              ],
              "id": "20d52e97-6f5e-4797-94f3-07e845cc4ab8",
              "name": "If"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6) is not None)\""
              },
              "id": "6470184e-8408-4572-8e8b-ba020a093291",
              "name": "Locate On Screen16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1680,
                1320
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                140,
                200
              ],
              "id": "602888be-0322-406b-8ff7-76488c228ab2",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "5d5e0c1e-5bab-4c51-a8f0-46030022ec79",
              "name": "Close&Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                0,
                200
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com",
                "subject": "BOT-Rechazados-ControlDocumentario",
                "emailType": "text",
                "message": "=Documentos Rechazados:\n{{ $('Supabase4').item.json.Texto }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                1840,
                2400
              ],
              "id": "eeb460cf-7774-4a1e-850c-cc282451719c",
              "name": "Mensaje",
              "webhookId": "6bc2c596-6b0a-4077-9a64-a43f3b27b4d7",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c47a600c-e9d4-4b9b-bd13-cec6018a68b2",
                      "leftValue": "={{ $('Supabase4').item.json.Texto }}",
                      "rightValue": ";{\"fila\": [\"Ningn dato disponible en esta tabla\"]}",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                1700,
                2400
              ],
              "id": "fbdd97aa-512c-4f35-9ec8-125efa3014b0",
              "name": "If1"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Locate On Screen3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser3": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Get Table - V",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Table - V": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click 11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click 11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser15": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen16": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Close&Open": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "Mensaje",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "1f445fb6-5ea8-4a68-b7f1-3b2c4c1b4fec",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-07-04T12:15:21.164Z",
          "updatedAt": "2025-07-25T14:27:48.000Z",
          "id": "Qobx9rfrSdBPTUsu",
          "name": "BOT-Carga-Solicitudes (Sin exactian)",
          "active": true,
          "nodes": [
            {
              "parameters": {
                "name": "Descarga",
                "description": "Call this workflow when you are ready to upload the documents",
                "workflowId": {
                  "__rl": true,
                  "value": "TaSDog5NBZvvPBkt",
                  "mode": "list",
                  "cachedResultName": "ControlDocumentario-Carga-BUNGE"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                80,
                260
              ],
              "id": "4482d5d4-5ad1-478d-86e4-bfecf266d82d",
              "name": "Carga Bunge"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=Sos un util asistente con la tarea de utilizar las herramientas de carga de documentacion y notificar como salió su ejecucion.\nAsegurate de ejecutar UNA A LA VEZ, Y SOLO UNA VEZ CADA UNA..\nContas con las siguientes herramientas:\n* Carga Bunge: Carga de documentación solicitada a la planta.\n* T6: Carga de documentación solicitada a la planta.\nEjecuta estas herramientas una a la vez y al recibir el output de todas notifica si funcionaron correctamente o alguna tuvo un error.\nRecibis de las herramientas \n  {\n    \"variable\": \"Documentos\",\n    \"valor\": null,\n    \"Texto\": \"0\"\n  }\nSi {Texto}=0. Cargada correctamente\nUtiliza el fomrato: \n\nAdjunto el reporte de cargas del día\n\n- Carga Bunge: Cargada correctamente. ✅\n- Carga T6: Error {Texto} ❌\n- Carga Albanesi: Esta sección está desactivada\n  \n\nPor favor, no dude en contactar el area de investigación y desarrollo si necesita más información.\n\nSaludos cordiales,\"\n\n* El output que des es el body del mail que se manda, estructuralo acorde.\n* No hay herramienta de Albanesi simplemente escribí lo que está en el ejemplo de formato.",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 1.7,
              "position": [
                0,
                0
              ],
              "id": "eac8f9e1-c16b-4238-b8d3-fa53c4d1dfa2",
              "name": "AI Agent1"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4o-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                -60,
                260
              ],
              "id": "468c8742-d6ed-4c80-baec-ef85e00ad9c4",
              "name": "OpenAI Chat Model1",
              "credentials": {
                "openAiApi": {
                  "id": "qlIkWQVxXLADKIor",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "name": "T6",
                "workflowId": {
                  "__rl": true,
                  "value": "sf6Q8o3rnLdk87WT",
                  "mode": "list",
                  "cachedResultName": "ControlDocumentario-Carga-Terminal 6"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                180,
                260
              ],
              "id": "553aebf1-9a5c-4472-a482-19e0e84fd3ed",
              "name": "T6"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com, a.benitez@treeingenieria.com, administracion@treeingenieria.com",
                "subject": "BOT-Carga-Solicitudes",
                "emailType": "text",
                "message": "={{ $json.output }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                420,
                0
              ],
              "id": "2260b1ef-f14c-41a5-be2e-3fd3462e9a3e",
              "name": "Gmail",
              "webhookId": "f65931f7-5299-4a64-b109-d1162cafda7c",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "triggerAtHour": 5,
                      "triggerAtMinute": null
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                -280,
                0
              ],
              "id": "866c91dc-a773-47b9-977d-fabe042251c8",
              "name": "Schedule Trigger"
            },
            {
              "parameters": {
                "name": "ALBANESI",
                "workflowId": {
                  "__rl": true,
                  "value": "UWxZmdL6sIYT0Xdn",
                  "mode": "list",
                  "cachedResultName": "Carga-Albanesi-Exactian"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                280,
                260
              ],
              "id": "f648c3f7-476e-4c14-8846-f0ff4aa4f66b",
              "name": "ALBANESI"
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -280,
                -160
              ],
              "id": "48f9917a-6114-4f0d-984b-e407209d2467",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com",
                "subject": "BOT-Carga-Solicitudes",
                "emailType": "text",
                "message": "={{ $json.output }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                420,
                -160
              ],
              "id": "7c294b56-d2ce-4fb2-88d5-dc6f624937ff",
              "name": "Testing",
              "webhookId": "86fb4aef-7f14-46b3-b9cc-e647070aeb8f",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            }
          ],
          "connections": {
            "Carga Bunge": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model1": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "T6": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent1": {
              "main": [
                [
                  {
                    "node": "Gmail",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "ALBANESI": {
              "ai_tool": [
                []
              ]
            },
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner",
            "executionTimeout": 3600
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "426bb63f-0a59-4447-a146-d807102373a6",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-04-23T19:23:21.730Z",
          "updatedAt": "2025-07-08T11:58:39.000Z",
          "id": "T4l8fAs2nK8kIhSW",
          "name": "BOT-Carga-Solicitudes",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "name": "Descarga",
                "description": "Call this workflow when you are ready to upload the documents",
                "workflowId": {
                  "__rl": true,
                  "value": "TaSDog5NBZvvPBkt",
                  "mode": "list",
                  "cachedResultName": "ControlDocumentario-Carga-BUNGE"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                80,
                260
              ],
              "id": "522d2e10-85a6-45d1-9d9d-26dd941f4527",
              "name": "Carga Bunge"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=Sos un util asistente con la tarea de utilizar las herramientas de carga de documentacion y notificar como salió su ejecucion.\nAsegurate de ejecutar UNA A LA VEZ, Y SOLO UNA VEZ CADA UNA..\nContas con las siguientes herramientas:\n* Carga Bunge: Carga de documentación solicitada a la planta.\n* T6: Carga de documentación solicitada a la planta.\n* ALBANESI: Carga de documentación solicitada a la planta.\nEjecuta estas herramientas una a la vez y al recibir el output de todas notifica si funcionaron correctamente o alguna tuvo un error.\nRecibis de las herramientas \n  {\n    \"variable\": \"Documentos\",\n    \"valor\": null,\n    \"Texto\": \"0\"\n  }\nSi {Texto}=0. Cargada correctamente\nUtiliza el fomrato: \n\nAdjunto el reporte de cargas del día\n\n- Carga Bunge: Cargada correctamente. ✅\n- Carga T6: Error {Texto} ❌\n- Carga Albanesi: ✅\n  \n\nPor favor, no dude en contactar el area de investigación y desarrollo si necesita más información.\n\nSaludos cordiales,\"\n\n* El output que des es el body del mail que se manda, estructuralo acorde",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 1.7,
              "position": [
                0,
                0
              ],
              "id": "0ef7854d-6093-435d-ba4c-6aa989d4313c",
              "name": "AI Agent1"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4o-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                -60,
                260
              ],
              "id": "1fbbfd9c-aca0-4424-a8d7-78084e658370",
              "name": "OpenAI Chat Model1",
              "credentials": {
                "openAiApi": {
                  "id": "qlIkWQVxXLADKIor",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "name": "T6",
                "workflowId": {
                  "__rl": true,
                  "value": "sf6Q8o3rnLdk87WT",
                  "mode": "list",
                  "cachedResultName": "ControlDocumentario-Carga-Terminal 6"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                180,
                260
              ],
              "id": "c4048b5a-4082-4d2e-ab82-712053b240b5",
              "name": "T6"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com, a.benitez@treeingenieria.com, administracion@treeingenieria.com",
                "subject": "BOT-Carga-Solicitudes",
                "emailType": "text",
                "message": "={{ $json.output }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                420,
                0
              ],
              "id": "bf389db6-aba5-4d96-a550-22915140d0fe",
              "name": "Gmail",
              "webhookId": "6bc2c596-6b0a-4077-9a64-a43f3b27b4d7",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "triggerAtHour": 5,
                      "triggerAtMinute": null
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                -280,
                0
              ],
              "id": "f7ef3f5a-b0a7-4197-871d-228447ff684b",
              "name": "Schedule Trigger"
            },
            {
              "parameters": {
                "name": "ALBANESI",
                "workflowId": {
                  "__rl": true,
                  "value": "UWxZmdL6sIYT0Xdn",
                  "mode": "list",
                  "cachedResultName": "Carga-Albanesi-Exactian"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                280,
                260
              ],
              "id": "fe6dc933-c727-4a0f-b98c-f88279d5091e",
              "name": "ALBANESI"
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -280,
                -160
              ],
              "id": "65fe4eef-3a59-4e15-8a7c-65d6334c33fb",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com",
                "subject": "BOT-Carga-Solicitudes",
                "emailType": "text",
                "message": "={{ $json.output }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                420,
                -160
              ],
              "id": "6e86bb53-6556-4a81-965b-8f7e690e283b",
              "name": "Testing",
              "webhookId": "6bc2c596-6b0a-4077-9a64-a43f3b27b4d7",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            }
          ],
          "connections": {
            "Carga Bunge": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model1": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "T6": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent1": {
              "main": [
                [
                  {
                    "node": "Gmail",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "ALBANESI": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner",
            "executionTimeout": 3600
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "0adb4f29-8d67-46d3-af64-124a764f5ed7",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-03-17T11:25:25.509Z",
          "updatedAt": "2025-06-24T12:07:50.000Z",
          "id": "TaSDog5NBZvvPBkt",
          "name": "ControlDocumentario-Carga-BUNGE",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "10af6ec6-e227-431e-88bf-dff9fe415efe",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -480,
                200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(5); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "25c525ff-a676-4693-871a-133b9fa986a9",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "756ecef4-dced-4f54-b14f-7a1eb428c62f",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                200
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4b12d03d-b9df-4c56-acd2-0a84f92914ab",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                200
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y }}); pyautogui.typewrite('30716401622'); time.sleep(1); pyautogui.typewrite(['escape'])\""
              },
              "id": "d14b3a8a-6112-4cf9-afc0-f037178290c1",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                200
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                140,
                200
              ],
              "id": "d332f976-7073-48b5-a539-16ac9b214dc1",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -480,
                380
              ],
              "id": "9e088f5c-34ba-499b-a637-2101ba00e963",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                180
              ],
              "typeVersion": 1,
              "id": "e5123104-9c71-4f2f-9191-7e0b078a2b6e",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "959460c0-3bb0-4571-9801-e20218b5f453",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "d5a9bfc6-8b66-41d8-8c82-b075075dba5b",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                420
              ],
              "retryOnFail": true,
              "alwaysOutputData": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a1f47729-6b52-4d89-ad78-fa9fc08b0c58",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                420
              ],
              "alwaysOutputData": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser').item.json.x-100}}, {{ $('Coordinate Parser').item.json.y }}); pyautogui.typewrite('TR33Ingresos#')\""
              },
              "id": "bb19c898-8db2-462a-ba28-22b97b92ef4a",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                420
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                400
              ],
              "typeVersion": 1,
              "id": "612c16ab-cfd4-49aa-897c-a9ab7daae4cb",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "2f6252ce-5911-42c8-bde1-97162dc46bef",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "c64da81e-cda1-4973-af42-320f688ae2fd",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                640
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f43a48ce-0d70-4a71-9981-385b0b951afd",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                640
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser1').item.json.x }}, {{ $('Coordinate Parser1').item.json.y }})\""
              },
              "id": "7d22093b-67d6-47ae-994d-271d8f60b8cf",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                640
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                620
              ],
              "typeVersion": 1,
              "id": "837f544c-6376-4fbc-8a8f-d32cc7de1654",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "befdfcca-0f67-4d01-b21b-e58304d465de",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "ac3b3e77-f1ac-4cad-8e67-1fcf41529199",
              "name": "Locate On Screen3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                860
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ac11bb34-babf-4bcb-8237-95e31c243956",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                860
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser2').item.json.x }}, {{ $('Coordinate Parser2').item.json.y }})\""
              },
              "id": "2dfedca5-5c76-4c32-aa9a-0e780153fe88",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                860
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                840
              ],
              "typeVersion": 1,
              "id": "267b5b80-8e67-401a-8af3-9b6fd0a5fc4f",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "c7bb796a-3341-4b10-ad8d-6022d61561e9",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "c8e61031-e88c-45ea-96bf-49c3530b3d78",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                1080
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a7e2677a-cf6e-4d96-893b-5d4914d391c0",
              "name": "Coordinate Parser3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                1080
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser3').item.json.x}}, {{ $('Coordinate Parser3').item.json.y }})\""
              },
              "id": "aeb2a3ca-a9cd-40d7-8b3d-1302dce66bb4",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                1080
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1060
              ],
              "typeVersion": 1,
              "id": "0d0e514f-9511-4009-8276-dbec9cb65017",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "bb6c7f03-89ad-44b3-ae70-8a098443874a",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AreaTrabajo-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "6028572b-3d93-491a-aa17-59a6dd174e14",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                1300
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "5a49a03c-d565-481b-b2ee-4fa6a079e10d",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                1300
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser6').item.json.x }}, {{ $('Coordinate Parser6').item.json.y }})\""
              },
              "id": "d9271cc7-a384-417c-b4d1-dc8f9066a887",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1340,
                1300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1280
              ],
              "typeVersion": 1,
              "id": "346d941f-88f1-437a-878e-15ae9ed3e88a",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "64e5fc15-65a4-421a-b1f4-69fe6f0c29f1",
              "name": "Save Screenshot7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "feb412c2-8094-4aa1-8a23-94d2e06d750e",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                940,
                1520
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "408ea9ac-7a6d-4a30-9029-1cd231d152a9",
              "name": "Coordinate Parser7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1100,
                1520
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser8').item.json.x }}, {{ $('Coordinate Parser8').item.json.y}})\""
              },
              "id": "b3271563-8c91-4c38-b0fa-a60405487761",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                1520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## DropDown SJS\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1500
              ],
              "typeVersion": 1,
              "id": "d35ad00c-adb1-4bf2-85a6-56e81220735d",
              "name": "Sticky Note6"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8bc720bf-2697-449a-a091-9b7e73f51029",
              "name": "Save Screenshot8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1420,
                1520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-SJS-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "4323baa8-dcc3-4b55-8aa1-793573942056",
              "name": "Locate On Screen8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1580,
                1520
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "28cca877-a354-4fdb-8e98-3a8223b6c8fd",
              "name": "Coordinate Parser8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1740,
                1520
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "592a9837-4898-40ea-9f71-791453978ef0",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-SeleccionarTodos-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "126a1388-dbf2-49e1-9e12-7a393ac76de6",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                940,
                1960
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "585a33cf-b9e9-4621-891a-a7eda65a39c7",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1100,
                1960
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.click({{ $('Coordinate Parser10').item.json.x -25}}, {{ $('Coordinate Parser10').item.json.y }})\""
              },
              "id": "bdf66238-9d21-45fd-bf25-c8fbe0b34905",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                1960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion de Estados\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1940
              ],
              "typeVersion": 1,
              "id": "4ca1eb55-f095-4c47-b0e3-4ab4d0264ede",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(0.5); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-PendEnvio-CD.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "af019f3b-1dc8-4d81-bd5c-123c573bb11e",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1560,
                1960
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b6f98a6d-4b4e-49d6-a085-7a734530cae2",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1740,
                1960
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "ed75224c-5e1e-45ab-aaeb-26c04a5259dd",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1740
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Estados-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "e254251b-e983-4a35-923a-ae3924a9c4a4",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                940,
                1740
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "961e1f6e-2803-4af7-b927-7de783e26483",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1100,
                1740
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser11').item.json.x }}, {{ $('Coordinate Parser11').item.json.y}})\""
              },
              "id": "93c33386-fd19-4273-b6ca-0432bda883d7",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                1740
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1720
              ],
              "typeVersion": 1,
              "id": "61a95bb1-2c51-4c4c-863f-11b1c65057ba",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser7').item.json.x }}, {{ $('Coordinate Parser7').item.json.y }})\""
              },
              "id": "a56b8902-624f-46fb-87cb-3765e65f9fae",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1260,
                1520
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "d1d25edc-63a1-4d34-a2cc-c4c36656d9eb",
              "name": "Save Screenshot10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                2180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "ebe57711-2112-48d3-b4c1-d47b7dfcc8d4",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                2180
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "960afee4-6e80-4cb1-80be-8a7cd3d282ce",
              "name": "Coordinate Parser12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                2180
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser12').item.json.x }}, {{ $('Coordinate Parser12').item.json.y }})\""
              },
              "id": "8db93e06-e0a7-4d03-a977-d35478395ca5",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                2180
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                2160
              ],
              "typeVersion": 1,
              "id": "9c24c18f-2fa0-495e-8cb0-6d265a14764a",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1); img = ImageGrab.grab(); img.save(r'C:\\Users\\simon\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "3b8a521a-144c-4a6d-9c24-91dcc31b13a7",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                2860
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\ControlDocumentario\\Boton-InscripMono-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "c079aef2-a538-446d-b53b-906f459b81d6",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2380,
                2860
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "6ec9d507-a893-41a2-a136-7450c29ceb18",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2540,
                2860
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click(850, {{ $('Supabase12').item.json.valor +24}})\""
              },
              "id": "19dd5eec-37ef-4ff2-b8eb-44ef7417bedd",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                2860
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json;direc = '{{$('Edit Fields').item.json.direc}}'; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(3).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 6'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "11001048-a1c7-41b2-a25b-ac9961f6fcbc",
              "name": "Local OCR Tesseract",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2940,
                2640
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = pyautogui.screenshot(region=(320,{{ $('Supabase12').item.json.valor }}, 200, 50)); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png')\""
              },
              "id": "975c79ad-e90d-47e2-bfbf-7dd5dff0740f",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2800,
                2640
              ]
            },
            {
              "parameters": {
                "jsCode": "const input = $input.all()[0].json;\n\nconst nombresPermitidos = [\n  \"CUNNINGHAM MARTIN\", \"FERREYRA FACUNDO AMILCAR\", \"CESPEDES ESTEBAN\",\n  \"QUIROZ JAMES\", \"DONAIRE PABLO RUBEN\", \"GOROSITO AGUSTIN\",\n  \"ROBLEDO HECTOR DANIEL\", \"FERREYRA JULIAN ANDRES\", \"MARCELO GAMALERO\",\n  \"RUSSO FEDERICO MANUEL\", \"MASSA AGUSTIN\", \"CHIAVON GERARDO XAVIER\",\n  \"TERAN ALVARENGA SIMON\", \"DELPINO NICOLAS ABEL\", \"CARRIZO JUAN MANUEL\",\n  \"ACEVEDO JONATHAN\", \"BONVECHI AGUSTIN ANDRES\", \"BRIAN EZEQUIEL VAN WELLE\", \"GONZALEZ TOMAS FRANCISCO\"\n];\n\nconst palabrasExcluidas = [\"ARGENTINA\", \"ARGENTINO\", \"EMPLEADOR\", \"-\", \"DNI\", \"CUIL\", \"CUIT\"];\n\nfunction normalizar(texto) {\n  return texto\n    .toUpperCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/\\s+/g, \" \")\n    .trim();\n}\n\nfunction levenshtein(a, b) {\n  const dp = Array.from({ length: a.length + 1 }, () => Array(b.length + 1).fill(0));\n  for (let i = 0; i <= a.length; i++) dp[i][0] = i;\n  for (let j = 0; j <= b.length; j++) dp[0][j] = j;\n  for (let i = 1; i <= a.length; i++) {\n    for (let j = 1; j <= b.length; j++) {\n      dp[i][j] = a[i - 1] === b[j - 1]\n        ? dp[i - 1][j - 1]\n        : Math.min(dp[i - 1][j - 1] + 1, dp[i][j - 1] + 1, dp[i - 1][j] + 1);\n    }\n  }\n  return dp[a.length][b.length];\n}\n\n// Parsear OCR\nlet palabrasOCR;\ntry {\n  const jsonStr = input.stdout.replace(/\\\\n/g, \"\").replace(/\\\\\"/g, '\"');\n  palabrasOCR = JSON.parse(jsonStr);\n} catch (error) {\n  return {\n    json: {\n      error: \"Error al convertir el string a JSON\",\n      details: error.message\n    }\n  };\n}\n\n// Limpiar palabras\nconst palabrasValidas = palabrasOCR\n  .map(p => normalizar(p.text))\n  .filter(t => t.length > 1 && !palabrasExcluidas.some(e => t.includes(e)));\n\nif (palabrasValidas.length === 0) {\n  return {\n    json: {\n      mensaje: \"No se detectó ningún texto OCR útil\",\n      palabrasOCR\n    }\n  };\n}\n\n// Comparar cada palabra OCR contra palabras de nombres permitidos\nlet mejorNombre = null;\nlet maxCoincidencias = 0;\n\nfor (const nombre of nombresPermitidos) {\n  const palabrasNombre = normalizar(nombre).split(\" \");\n  let coincidencias = 0;\n\n  for (const palabraOCR of palabrasValidas) {\n    for (const palabraNombre of palabrasNombre) {\n      const distancia = levenshtein(palabraOCR, palabraNombre);\n      if (\n        palabraOCR.length > 3 &&\n        distancia <= 1\n      ) {\n        coincidencias++;\n        break; // Una coincidencia por palabra OCR es suficiente\n      }\n    }\n  }\n\n  if (coincidencias > maxCoincidencias) {\n    maxCoincidencias = coincidencias;\n    mejorNombre = nombre;\n  }\n}\n\nreturn {\n  json: maxCoincidencias > 0\n    ? {\n        nombreAsignado: mejorNombre,\n        palabrasOCR: palabrasValidas,\n        coincidencias: maxCoincidencias\n      }\n    : {\n        mensaje: \"No se detectó ningún nombre válido\",\n        palabrasOCR: palabrasValidas\n      }\n};\n"
              },
              "id": "6a8bc4ee-04ed-477f-9a2c-239b21cf380b",
              "name": "OCR Word2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3080,
                2640
              ],
              "notesInFlow": false,
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "content": "## Seleccion Nombre\n**Ingresa Nombre de Usuario**",
                "height": 200,
                "width": 1580,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                2600
              ],
              "typeVersion": 1,
              "id": "590bc216-a77b-420c-9b0b-85edb0655bdd",
              "name": "Sticky Note13"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "e442cda3-0d4c-4f2a-b3ab-e5cc4fb014e1",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                3300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser15').item.json.x }}, {{ $('Coordinate Parser15').item.json.y }})\""
              },
              "id": "d1a5c34b-6067-47b9-b705-b5ef9447a898",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                3300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton seleccionar Archivo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                3280
              ],
              "typeVersion": 1,
              "id": "c9aa635b-763f-4aa4-a41d-4228a0738ba9",
              "name": "Sticky Note14"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                3500
              ],
              "typeVersion": 1,
              "id": "89660b23-684b-4803-a899-cae0b9f5ade0",
              "name": "Sticky Note41"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1cfaa1ad-a0ef-4643-b0fb-0446aa08c8f4",
              "name": "Coordinate Parser15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2540,
                3300
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-SeleccionarArchivo-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "72d84f7c-c31f-42ba-915a-93981ec7c013",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2380,
                3300
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "d3300f03-d28e-40d0-b84d-4258247d9e94",
              "name": "Save Screenshot15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                3080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AdjuntarArchivo-CD.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "c4e24a43-3aa0-4b0d-bbb0-a7caa45c4b81",
              "name": "Locate On Screen16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2380,
                3080
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "32ccf165-ab91-4f2d-ae3d-a0560d59de08",
              "name": "Coordinate Parser16",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2540,
                3080
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser16').item.json.x }}, {{ $('Coordinate Parser16').item.json.y }})\""
              },
              "id": "0de1ed2c-ee45-40ff-b993-76327a0b8a9f",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                3080
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Adjuntar Archivo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                3060
              ],
              "typeVersion": 1,
              "id": "23ff6c5d-e91a-47a2-98a0-eea670caf8ad",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-WorkingScreen-CD.png')\""
              },
              "id": "4878ef63-463b-4827-bb11-f82651dde363",
              "name": "Save Screenshot16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2180,
                2400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Barra-Buscar-CD.png', grayscale=True, confidence=0.65))\"\n"
              },
              "id": "b3de670a-cfa2-4901-b319-45c1e30fdc63",
              "name": "Locate On Screen17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2320,
                2400
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c1a80cf5-746b-4e9d-89f4-c4a7d72f9469",
              "name": "Coordinate Parser17",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2480,
                2400
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser17').item.json.x +50}}, {{ $('Coordinate Parser17').item.json.y }}); pyautogui.typewrite('{{ $('Loop Over Items3').item.json.documento }}'); time.sleep(5);pyautogui.doubleClick(300,450);pyautogui.click(300,450)\""
              },
              "id": "c00be8fe-0336-40b4-871e-3a12cffe2f7c",
              "name": "Click16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3080,
                2400
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1580,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                2380
              ],
              "typeVersion": 1,
              "id": "1cbbd114-c503-47db-afcb-cc7f72314037",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "5229eb04-f2ba-4115-a61b-51d3e7cbc332",
              "name": "Save Screenshot19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                4220
              ]
            },
            {
              "parameters": {
                "content": "## En caso que No exista\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                4200
              ],
              "typeVersion": 1,
              "id": "7d6682e7-cefe-4f8a-9de3-9aa963da95be",
              "name": "Sticky Note18"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Abrir-NoExiste-CD.png', grayscale=True, confidence=0.5))\""
              },
              "id": "b836c4dc-ab93-4ccb-bb02-b208375385b5",
              "name": "Locate On Screen18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2340,
                4220
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "batchSize": "=1",
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                1100,
                2380
              ],
              "id": "4d81b0e1-9ba9-43af-a9f0-643640a29859",
              "name": "Loop Over Items3"
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"documento[0]\": \"Inscripci\",\n  \"documento[1]\": \"Poliza\",\n  \"documento[2]\": \"Aporte\",\n  \"documento[3]\": \"Pago p\"\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                780,
                2380
              ],
              "id": "c507fcc1-7bdf-4e86-8326-964f0e2acc7c",
              "name": "Edit Fields2"
            },
            {
              "parameters": {
                "fieldToSplitOut": "documento",
                "options": {}
              },
              "type": "n8n-nodes-base.splitOut",
              "typeVersion": 1,
              "position": [
                940,
                2380
              ],
              "id": "99fc174f-4f1b-4437-91bb-2b6c9743298b",
              "name": "Split Out"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "7e299593-49c2-40af-a641-03e62e59b809",
              "name": "Save Screenshot20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                4660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Continuar-CD.png', grayscale=False, confidence=0.9))\"\n"
              },
              "id": "d5d4eadc-16de-4a2d-bd87-3064d5b4175e",
              "name": "Locate On Screen19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2380,
                4660
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "dbdfe388-94f1-4e69-909d-9eb3d35911ce",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2540,
                4660
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser19').item.json.x }}, {{ $('Coordinate Parser19').item.json.y }})\""
              },
              "id": "97ad2d20-847c-46b1-8305-b8d939d2344d",
              "name": "Click18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                4660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Adjuntar Archivo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                4640
              ],
              "typeVersion": 1,
              "id": "adc2abeb-0bcc-4451-b3a0-843cb7285a4d",
              "name": "Sticky Note19"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "ec677340-4725-483b-a20a-1de37446c2ac",
              "name": "Save Screenshot21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2660,
                4220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Volver-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "7c53c9e7-247f-4c59-83e1-98849c669698",
              "name": "Locate On Screen20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2800,
                4220
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a18921fb-df4a-4fb7-ac20-d4906375a7cc",
              "name": "Coordinate Parser20",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2960,
                4220
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser20').item.json.x }}, {{ $('Coordinate Parser20').item.json.y }})\""
              },
              "id": "c697f79a-bbd9-43d6-bb57-2d8f40242037",
              "name": "Click19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                4220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## En caso que No exista\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                4420
              ],
              "typeVersion": 1,
              "id": "d16d9ec1-0edc-4908-89c3-96e4585f26e9",
              "name": "Sticky Note20"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "d66164b8-e7a5-4a74-8233-013c5561ed90",
              "name": "Save Screenshot22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                4440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Volver-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "5d55f8ab-1f0f-4f9c-9016-1f59bba3df7b",
              "name": "Locate On Screen21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2380,
                4440
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7c39eeb0-8537-4498-9dc2-e4f110bc0a2b",
              "name": "Coordinate Parser21",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2540,
                4440
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser21').item.json.x }}, {{ $('Coordinate Parser21').item.json.y }}); time.sleep(3)\""
              },
              "id": "a34b73c8-f165-42b7-b87c-b943261d1542",
              "name": "Click20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2800,
                4440
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "bb667cca-7848-43bb-aff9-cbc356576603",
              "name": "Save Screenshot23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                4880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Prius-AdjuntarTodos-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "a3f0d0bb-c29b-4c9b-803f-e99a4e97cc09",
              "name": "Locate On Screen22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2380,
                4880
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f29a1b8e-90bd-4434-8cd8-e3a70ab9692a",
              "name": "Coordinate Parser22",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2540,
                4880
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser22').item.json.x }}, {{ $('Coordinate Parser22').item.json.y }})\""
              },
              "id": "09e14783-930d-48e4-8e48-02d3760fcac4",
              "name": "Click21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                4880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Adjuntar Archivo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                4860
              ],
              "typeVersion": 1,
              "id": "de562865-c6c7-481b-af12-ed7a2f3211bd",
              "name": "Sticky Note21"
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Establecer la salida como el array de objetos\nreturn lines.map(line => {\n  return { json: line };  // Formateamos cada línea como un objeto JSON\n});"
              },
              "id": "759cb17b-3450-4cb2-8fa1-3ccf6b947df4",
              "name": "Divide html columns2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2660,
                2640
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.typewrite(['esc']);pyautogui.typewrite(['esc'])\""
              },
              "id": "949aa714-9371-4dbd-a0c3-87be42ec28a4",
              "name": "Click17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2500,
                4220
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(5); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab);driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [row.find_elements(By.TAG_NAME, 'td')[3].text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for row in rows if len(row.find_elements(By.TAG_NAME, 'td')) > 3 and row.find_elements(By.TAG_NAME, 'td')[3].text.strip()]; [print(json.dumps({'columna_4': item})) for item in data]\""
              },
              "id": "44e5b71a-2707-4268-b21d-e0963ebd636a",
              "name": "Get Table8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2500,
                2640
              ],
              "disabled": true
            },
            {
              "parameters": {
                "content": "## Boton Documento\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                2840
              ],
              "typeVersion": 1,
              "id": "dcc8511e-c5ad-41c8-848e-0e4dbae75109",
              "name": "Sticky Note24"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "={{ $('Supabase6').item.json.valor +1}}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2180,
                2640
              ],
              "id": "bb077ff2-1ded-4292-9475-ad61d268df7c",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $json.Texto }},{{$('OCR Word2').item.json.nombreAsignado}}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                3100,
                4460
              ],
              "id": "9e1d1af7-0f09-4f02-9b9a-cebd638875e9",
              "name": "Supabase2",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab);driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [row.find_elements(By.TAG_NAME, 'td')[3].text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for row in rows if len(row.find_elements(By.TAG_NAME, 'td')) > 3 and row.find_elements(By.TAG_NAME, 'td')[3].text.strip()]; [print(json.dumps({'columna_4': item})) for item in data]\""
              },
              "id": "c4d422b0-647a-49bf-84e0-8decd27acf1f",
              "name": "Get Table12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                940,
                2620
              ]
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Start-Pixel"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "=470"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                640,
                2620
              ],
              "id": "4fa84684-4298-44e5-9951-893006d84cd4",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "=0"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                800,
                2620
              ],
              "id": "b6bcb86d-4f4f-4bba-afcb-6449caaec6c0",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  try {\n    const parsedLine = JSON.parse(line);\n    return parsedLine;  // Puedes procesar más si es necesario\n  } catch (e) {\n    return null;  // Manejo de error si una línea no es JSON válido\n  }\n}).filter(line => line !== null);  // Filtramos valores nulos si no se pudo parsear alguna línea\n\n// Establecer la salida como el número de items\nreturn [\n  {\n    json: {\n      itemCount: lines.length  // Devolvemos el número de objetos procesados\n    }\n  }\n];\n"
              },
              "id": "3ba1f0e2-8e70-4d17-b5c9-dcd061245654",
              "name": "Divide html columns7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1080,
                2620
              ]
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Start-Pixel"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2340,
                2640
              ],
              "id": "35c3d855-c0e2-4798-95be-d58289ed0038",
              "name": "Supabase12",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6bec7028-141e-4c88-91ff-254fd5d268bf",
                      "leftValue": "={{ $('Divide html columns7').item.json.itemCount }}",
                      "rightValue": "={{ $('Supabase6').item.json.valor }}",
                      "operator": {
                        "type": "number",
                        "operation": "gt"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                1500,
                2620
              ],
              "id": "b9287513-fd0d-42d0-b522-276b3ace1fda",
              "name": "If"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Loop-Index"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1360,
                2620
              ],
              "id": "cd41e27e-a68d-45f7-af16-9050eda3314e",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $('Loop Over Items3').item.json.documento }}",
                            "rightValue": "Inscripci",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "a5f6a6a0-49a4-4cac-b763-a19052173cce"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Inscripción"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "1733e446-c337-45b9-bd6c-a65b8912055d",
                            "leftValue": "={{ $('Loop Over Items3').item.json.documento }}",
                            "rightValue": "Poliza",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Póliza"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "dca69007-f24e-4bb8-bbea-f2ae26ffc4ce",
                            "leftValue": "={{ $('Loop Over Items3').item.json.documento }}",
                            "rightValue": "Aporte",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Aporte"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "4221c252-1c0c-4e27-b36a-30989739ef84",
                            "leftValue": "={{ $('Loop Over Items3').item.json.documento }}",
                            "rightValue": "Pago p",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Pago poliza"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                2200,
                3520
              ],
              "id": "b31d80d0-501d-4e26-beda-08a84d2762c2",
              "name": "Switch"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y'); time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Inscripcion Autonomo Monotributo'); time.sleep(2); pyautogui.typewrite(['enter'])\""
              },
              "id": "88c45349-e4a3-4373-9966-cfcb9758f2dd",
              "name": "Ruta Inscripción",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2440,
                3520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time;  numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y'); time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\LA SEGUNDA\\Merge LA SEGUNDA');time.sleep(2); pyautogui.typewrite(['enter'])\""
              },
              "id": "d403bcce-8aba-4df9-9351-32e9b7ea2f3e",
              "name": "Ruta Póliza",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2660,
                3520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y'); time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Merge ARCA');time.sleep(2); pyautogui.typewrite(['enter'])\""
              },
              "id": "a364187b-c018-4eb6-95e0-1325ce54f5b9",
              "name": "Ruta Aporte",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2880,
                3520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "56672c79-30bf-49c8-a1ef-296eb33a5597",
              "name": "Save Screenshot27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2000,
                3760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Buscar-En-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "9c61364b-b7c6-4ca2-a4a4-defb4819271b",
              "name": "Locate On Screen26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                3760
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2b75e195-799c-4adc-9da5-1e6eac82aec9",
              "name": "Coordinate Parser25",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2380,
                3760
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time;  nombre='{{$('OCR Word2').item.json.nombreAsignado}}'; time.sleep(0);pyautogui.click({{ $('Coordinate Parser25').item.json.x }}, {{ $('Coordinate Parser25').item.json.y }});time.sleep(1);pyautogui.typewrite(fr'{nombre}')\""
              },
              "id": "6a32eee2-668a-41b5-9652-8230a81f7a1a",
              "name": "Click30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                3760
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                3720
              ],
              "typeVersion": 1,
              "id": "581534ba-5402-40b2-8997-9b65b47aadb6",
              "name": "Sticky Note25"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "f248a36f-0263-49da-b504-6bf50ec69848",
              "name": "Save Screenshot28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2000,
                4000
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\pdf-save-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "db52fdf7-a6b3-4473-a0a2-6baca8e7c420",
              "name": "Locate On Screen27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                4000
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c2548d17-e75a-410e-9314-8c596dd91e1b",
              "name": "Coordinate Parser26",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2380,
                4000
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time;  nombre='{{$('OCR Word2').item.json.Nombre}}'; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser26').item.json.x }}, {{ $('Coordinate Parser26').item.json.y }})\""
              },
              "id": "edbd9656-221c-4691-ba20-b59d20b84d2f",
              "name": "Click31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                4000
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccionar Archivo\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                3960
              ],
              "typeVersion": 1,
              "id": "263c18c1-0450-4b96-a5cf-5fc271c7114b",
              "name": "Sticky Note26"
            },
            {
              "parameters": {
                "content": "## Boton Adjuntar Archivo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                5080
              ],
              "typeVersion": 1,
              "id": "c1dfc9fb-45c0-4741-b964-943a48cca439",
              "name": "Sticky Note22"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2); pyautogui.scroll(-1000)\""
              },
              "id": "864ade90-6f4a-4bf5-8257-b04ecf887bb8",
              "name": "Scroll",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2200,
                5120
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "41a67d06-380b-4af8-a0b3-aaaf7cd55a48",
              "name": "Coordinate Parser24",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2840,
                5120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(4);pyautogui.click({{ $json.x }},{{ $json.y }}); time.sleep(4);pyautogui.click(1030, 185)\""
              },
              "id": "bccf5eaa-a324-45fd-a6f1-3e6883d1061d",
              "name": "Click24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                5120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Enviar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "34bd685c-35a3-44f5-9bff-5264f0e81250",
              "name": "Locate On Screen24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2620,
                5120
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1de11e8e-1b46-4798-b4fe-c0d9c0f2bac0",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                1900,
                1300
              ],
              "id": "f3f3ae04-4c66-4d5d-9211-914f45e0f71e",
              "name": "If1"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6) is not None)\"\n"
              },
              "id": "19c2c9b5-4af3-44a7-a7cc-43dee43bfc24",
              "name": "Locate On Screen23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                1300
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "bdd3404c-ca27-4656-b8be-46652098ce92",
              "name": "CloseTab",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1240,
                2380
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(4);pyautogui.click(877,720)\""
              },
              "id": "a1c352c9-1be6-4893-a445-3302e3c4171f",
              "name": "Click22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3780,
                5140
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "24c717b1-f056-4f4a-be20-4352d4b3795e",
                      "leftValue": "={{ $json.error }}",
                      "rightValue": "No se encontraron al menos dos palabras en el texto",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                2760,
                2860
              ],
              "id": "007b3623-864f-45d0-aa80-3edf3e16812d",
              "name": "If2"
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"errores\": []\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -280,
                200
              ],
              "id": "90a5f867-7883-4735-b52e-f1e18451bf7c",
              "name": "Edit Fields1"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -140,
                200
              ],
              "id": "3eb9a0f2-eb1a-43df-a733-a9907c1a853f",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "1b602eca-b8fc-4556-ad1d-8688a1a94b5c",
              "name": "Save Screenshot24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2400,
                5120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time;  numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y'); time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\LA SEGUNDA\\Pago poliza acc personales');time.sleep(2); pyautogui.typewrite(['enter'])\""
              },
              "id": "0d5448e2-e4e8-4956-ada4-045c78ac18f4",
              "name": "Ruta Póliza1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                3520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "acb268ae-f535-488a-a6d5-77d5edd1f5d5",
              "name": "Close&Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                200
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "84177177-87a2-427a-9ffb-84ee1d40b1b8",
              "name": "Standard-Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                60
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "02af1347-18ee-498a-bdd4-e6b02ebed098",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2300,
                5360
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AreaTrabajo-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f9b46547-343a-410c-8f41-b771c11643df",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2440,
                5360
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a280b172-3f77-4899-8ec6-f6ade0c23cdc",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2580,
                5360
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser13').item.json.x }}, {{ $('Coordinate Parser13').item.json.y }})\""
              },
              "id": "fbb08583-b9b6-4da4-a6ff-2b29eca17a83",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2760,
                5360
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 7
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                5340
              ],
              "typeVersion": 1,
              "id": "d7f3b55c-e4d3-45ba-bf3a-3212b5016aed",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "47bdd754-688a-4c61-bef0-ef4649209b1b",
              "name": "Save Screenshot18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1980,
                5580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "2593e411-8e33-4c49-b545-e90fd276a4e4",
              "name": "Locate On Screen25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                5580
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f9feb6c5-2069-48dd-a763-18397bcc928a",
              "name": "Coordinate Parser18",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                5580
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser23').item.json.x }}, {{ $('Coordinate Parser23').item.json.y}})\""
              },
              "id": "e6d19e1a-2435-4e92-ab39-cf6bda2fbe16",
              "name": "Click23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                5580
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## DropDown SJS\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                5560
              ],
              "typeVersion": 1,
              "id": "87a353a9-d954-4c27-b1f7-093431b76d0d",
              "name": "Sticky Note11"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "2d5324d7-0d2b-4ef4-9051-e9ac8f9812a8",
              "name": "Save Screenshot25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2620,
                5580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-SJS-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "13f8aee8-bed5-4121-b458-4f983847fd79",
              "name": "Locate On Screen28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2780,
                5580
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1f07b9c0-b161-4859-b248-a69caf463f30",
              "name": "Coordinate Parser23",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2940,
                5580
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "7609685a-0c9e-4b08-9d49-a18b14487015",
              "name": "Save Screenshot26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1980,
                6020
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-SeleccionarTodos-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "0bea453a-cfb6-4a4a-acaa-2e133e153357",
              "name": "Locate On Screen29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                6020
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7293bd91-8c00-40c3-865e-681598ba15c2",
              "name": "Coordinate Parser27",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                6020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.click({{ $('Coordinate Parser28').item.json.x -25}}, {{ $('Coordinate Parser28').item.json.y }})\""
              },
              "id": "d029c60f-f361-4b76-9440-6312fa13345f",
              "name": "Click25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                6020
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion de Estados\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                6000
              ],
              "typeVersion": 1,
              "id": "a410ab54-87c5-4824-8dbc-c50c44291156",
              "name": "Sticky Note12"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(0.5); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-PendEnvio-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "ed8ba821-ce1c-4cda-84bf-84556ccaa559",
              "name": "Locate On Screen30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2780,
                6020
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2a497195-9db3-494c-aeeb-24e101b1e926",
              "name": "Coordinate Parser28",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2940,
                6020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "dad1b2f8-4997-48fc-bb51-6e65761c1c3e",
              "name": "Save Screenshot29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1980,
                5800
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Estados-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "b92ebd4a-6205-46e4-b52f-bf5979e9e358",
              "name": "Locate On Screen31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2140,
                5800
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "af54b47b-fb8d-4357-8c59-1a19af89011d",
              "name": "Coordinate Parser29",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2300,
                5800
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser29').item.json.x }}, {{ $('Coordinate Parser29').item.json.y}})\""
              },
              "id": "48055efe-b56a-410d-a222-f1e07f93ad10",
              "name": "Click26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                5800
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                5780
              ],
              "typeVersion": 1,
              "id": "75d39a54-e573-4954-bfef-a807cfe4bf93",
              "name": "Sticky Note23"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser18').item.json.x }}, {{ $('Coordinate Parser18').item.json.y }})\""
              },
              "id": "f714161b-791a-407a-82c6-afe3cd658b34",
              "name": "Click27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2460,
                5580
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser27').item.json.x }}, {{ $('Coordinate Parser27').item.json.y }}); time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser27').item.json.x }}, {{ $('Coordinate Parser27').item.json.y }})\""
              },
              "id": "7f22f6c6-7bb0-4146-b133-c6ea7917341d",
              "name": "Click ",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2460,
                6020
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "28a0adc5-31a3-42ae-b9f3-b804245318e9",
              "name": "Save Screenshot30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1980,
                6240
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "47b1e8f0-896c-42bf-8b4e-d16acaeb35e0",
              "name": "Locate On Screen32",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2160,
                6240
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "28c63c2c-a3fa-4025-849d-7e8e4bb272f1",
              "name": "Coordinate Parser30",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2320,
                6240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser30').item.json.x }}, {{ $('Coordinate Parser30').item.json.y }})\""
              },
              "id": "3aa93e15-e407-4056-8748-9d13c074bdb9",
              "name": "Click28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3100,
                6240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1660,
                6220
              ],
              "typeVersion": 1,
              "id": "06947b71-20c1-460e-9c71-4c84b3918ff6",
              "name": "Sticky Note27"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1de11e8e-1b46-4798-b4fe-c0d9c0f2bac0",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                3100,
                5360
              ],
              "id": "0eace0c9-d648-4fc9-b024-71b28fb62d8a",
              "name": "If3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6) is not None)\"\n"
              },
              "id": "6169f031-4bb5-45af-9430-1b5c59e6a9be",
              "name": "Locate On Screen33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2940,
                5360
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1de11e8e-1b46-4798-b4fe-c0d9c0f2bac0",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                2100,
                5400
              ],
              "id": "a5f2c6da-f56d-4187-a59b-e22f47669eee",
              "name": "If5"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6) is not None)\"\n"
              },
              "id": "0b43cd05-ac1c-4cc8-bc9e-4bd218936fc7",
              "name": "Locate On Screen34",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1940,
                5400
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.click({{ $('Coordinate Parser9').item.json.x }}, {{ $('Coordinate Parser9').item.json.y }}); time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser9').item.json.x }}, {{ $('Coordinate Parser9').item.json.y }})\""
              },
              "id": "c20a4851-e3dd-46e6-8828-17af98885334",
              "name": "Click 11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1280,
                1960
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(4);pyautogui.click(300,450)\""
              },
              "id": "1bd01b91-fa30-45d9-a5bb-0927f45d96bf",
              "name": "Click29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3360,
                2400
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Documentos"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2960,
                4460
              ],
              "id": "75e7a002-726a-4538-bcac-acf664cb1ae4",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Documentos"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1380,
                2380
              ],
              "id": "bd9d5d51-9faf-4379-ba5b-49c3a27e9256",
              "name": "Supabase7",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $json.Texto }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1520,
                2380
              ],
              "id": "bc3f5e12-2ded-4b35-b918-5bc0c4019540",
              "name": "Supabase8",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "=."
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                0,
                200
              ],
              "id": "bc0d5456-e032-4612-b640-6b875a14c0f7",
              "name": "Supabase10",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Obtener la entrada desde el nodo anterior\nconst input = $input.all()[0].json;\n\n// Convertir el campo 'stdout' en un JSON válido\nlet parsedData;\ntry {\n  // Reemplazar las secuencias de escape (\\n) y otros caracteres para convertirlo en un JSON válido\n  const validJsonString = input.stdout.replace(/\\\\n/g, \"\").replace(/\\\\\"/g, '\"');\n  \n  // Parsear el string a JSON\n  parsedData = JSON.parse(validJsonString);\n} catch (error) {\n  return {\n    json: {\n      error: 'Error al convertir el string a JSON',\n      details: error.message,\n    }\n  };\n}\n\n// Asegurarnos de que el JSON es un array y tiene al menos dos elementos\nif (Array.isArray(parsedData) && parsedData.length >= 2) {\n  // Extraer el campo 'text' de los dos primeros objetos\n  const primeraPalabra = parsedData[0].text;\n  const segundaPalabra = parsedData[1].text;\n\n  // Combinar las dos palabras en una sola cadena\n  const nombreCompleto = `${primeraPalabra} ${segundaPalabra}`;\n\n  return {\n    json: {\n      Nombre: nombreCompleto,\n    }\n  };\n} else {\n  return {\n    json: {\n      error: 'No se encontraron al menos dos elementos en el JSON de entrada',\n    }\n  };\n}"
              },
              "id": "5fbc993e-8c10-4d56-8d4c-09d6703dcb5b",
              "name": "OCR Word3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3260,
                2660
              ],
              "notesInFlow": false,
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "jsCode": "// Este nodo procesa un array de items\nreturn items.map(item => {\n  const texto = item.json.Texto;\n\n  // Verifica si el texto solo contiene puntos, comas o espacios\n  const soloPuntosYComas = /^\\s*[.,]+\\s*$/.test(texto);\n\n  // Si cumple la condición, reemplaza con 0\n  item.json.Texto = soloPuntosYComas ? 0 : texto;\n\n  return item;\n});\n"
              },
              "id": "c56b30f5-f9e6-4129-b4c4-3279a29edcaf",
              "name": "Coordinate Parser31",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1220,
                2560
              ],
              "onError": "continueRegularOutput"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Locate On Screen3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser3": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen23",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot7": {
              "main": [
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser7": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot8": {
              "main": [
                [
                  {
                    "node": "Locate On Screen8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser8": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click 11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser12": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Edit Fields2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "If2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract": {
              "main": [
                [
                  {
                    "node": "OCR Word2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Local OCR Tesseract",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Word2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser15": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Switch",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot15": {
              "main": [
                [
                  {
                    "node": "Locate On Screen16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen16": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser16": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot16": {
              "main": [
                [
                  {
                    "node": "Locate On Screen17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen17": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser17": {
              "main": [
                [
                  {
                    "node": "Click16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click16": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot19": {
              "main": [
                [
                  {
                    "node": "Locate On Screen18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen18": {
              "main": [
                [
                  {
                    "node": "Click17",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items3": {
              "main": [
                [
                  {
                    "node": "CloseTab",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields2": {
              "main": [
                [
                  {
                    "node": "Split Out",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Split Out": {
              "main": [
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot20": {
              "main": [
                [
                  {
                    "node": "Locate On Screen19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen19": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click18": {
              "main": [
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot21": {
              "main": [
                [
                  {
                    "node": "Locate On Screen20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen20": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser20": {
              "main": [
                [
                  {
                    "node": "Click19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot22": {
              "main": [
                [
                  {
                    "node": "Locate On Screen21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen21": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser21": {
              "main": [
                [
                  {
                    "node": "Click20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click20": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click19": {
              "main": [
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot23": {
              "main": [
                [
                  {
                    "node": "Locate On Screen22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen22": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser22",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser22": {
              "main": [
                [
                  {
                    "node": "Click21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click21": {
              "main": [
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click17": {
              "main": [
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Get Table8": {
              "main": [
                [
                  {
                    "node": "Divide html columns2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Supabase12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Table12": {
              "main": [
                [
                  {
                    "node": "Divide html columns7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Get Table12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns7": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase12": {
              "main": [
                [
                  {
                    "node": "Get Table8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch": {
              "main": [
                [
                  {
                    "node": "Ruta Inscripción",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Póliza",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Aporte",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Póliza1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Inscripción": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Inscripción",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Póliza": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Póliza",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Aporte": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Aporte",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot27": {
              "main": [
                [
                  {
                    "node": "Locate On Screen26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen26": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser25": {
              "main": [
                [
                  {
                    "node": "Click30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click30": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot28": {
              "main": [
                [
                  {
                    "node": "Locate On Screen27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen27": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser26",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser26": {
              "main": [
                [
                  {
                    "node": "Click31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click31": {
              "main": [
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Scroll": {
              "main": [
                [
                  {
                    "node": "Save Screenshot24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser24": {
              "main": [
                [
                  {
                    "node": "Click24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen24": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click24": {
              "main": [
                [
                  {
                    "node": "Locate On Screen34",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen23": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If2": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields1": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot24": {
              "main": [
                [
                  {
                    "node": "Locate On Screen24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Póliza1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Póliza1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Close&Open": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Standard-Open": {
              "main": [
                []
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen33",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot18": {
              "main": [
                [
                  {
                    "node": "Locate On Screen25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen25": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser18",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser18": {
              "main": [
                [
                  {
                    "node": "Click27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click23": {
              "main": [
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot25": {
              "main": [
                [
                  {
                    "node": "Locate On Screen28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen28": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser23": {
              "main": [
                [
                  {
                    "node": "Click23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot26": {
              "main": [
                [
                  {
                    "node": "Locate On Screen29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen29": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser27": {
              "main": [
                [
                  {
                    "node": "Click ",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click25": {
              "main": [
                [
                  {
                    "node": "Save Screenshot30",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen30": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser28": {
              "main": [
                [
                  {
                    "node": "Click25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot29": {
              "main": [
                [
                  {
                    "node": "Locate On Screen31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen31": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser29": {
              "main": [
                [
                  {
                    "node": "Click26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click26": {
              "main": [
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click27": {
              "main": [
                [
                  {
                    "node": "Save Screenshot25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click ": {
              "main": [
                [
                  {
                    "node": "Locate On Screen30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot30": {
              "main": [
                [
                  {
                    "node": "Locate On Screen32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen32": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser30": {
              "main": [
                [
                  {
                    "node": "Click28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click28": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen33": {
              "main": [
                [
                  {
                    "node": "If3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen34": {
              "main": [
                [
                  {
                    "node": "If5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If5": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click 11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CloseTab": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase7": {
              "main": [
                [
                  {
                    "node": "Supabase8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase10": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "5bd1293d-eac4-426c-82bb-5ddf6ddce46c",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-03-28T12:57:54.134Z",
          "updatedAt": "2025-06-18T18:38:12.000Z",
          "id": "UWxZmdL6sIYT0Xdn",
          "name": "Carga-Albanesi-Exactian",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "1045d6e4-27b3-44ab-88e4-0686db3bee95",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                3800,
                -440
              ]
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                3800,
                -260
              ],
              "id": "9d26445e-0302-4091-90a4-75e323bff12a",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(5);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8fdf8ce0-8808-46f0-9fb7-84931230611a",
              "name": "Save Screenshot5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4900,
                -440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Barra-Id-Ex.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "bf79903d-d2b2-495a-813a-8afbe52afec8",
              "name": "Locate On Screen5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5080,
                -440
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "be5755cb-2cb4-4432-81a5-be070ce9aa50",
              "name": "Coordinate Parser5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5240,
                -440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser5').item.json.x }}, {{ $('Coordinate Parser5').item.json.y }}); pyautogui.typewrite('30-70756092-0')\""
              },
              "id": "af58305d-75e0-42c3-b869-a06c6c0c34da",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                -440
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                4300,
                -440
              ],
              "id": "ef2f1944-e74d-471b-9427-5b4063c96569",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                -460
              ],
              "typeVersion": 1,
              "id": "14eaec89-44ea-4551-9e78-b61766891c97",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"errores\": []\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                4020,
                -440
              ],
              "id": "bdfedc88-ce95-4e0e-bf82-af6cadce4a30",
              "name": "Edit Fields1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "4782318a-5f32-4b8e-9a43-0cca818170a4",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4900,
                -220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Barra-Secret-Ex.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "be701d57-a215-4579-b917-2c14f6e108f2",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5080,
                -220
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4a965153-0f2f-4dbb-8947-fa3888a40d58",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5240,
                -220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser6').item.json.x}}, {{ $('Coordinate Parser6').item.json.y }}); pyautogui.typewrite('Galicia52')\""
              },
              "id": "f5eb10d9-75fb-4a7f-834c-a971aea665da",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                -220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                -240
              ],
              "typeVersion": 1,
              "id": "74f392e6-7693-4524-a3f1-0d1ed5dd3e50",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "ada98ac1-bac8-43fb-94d1-b445a492a0d7",
              "name": "Save Screenshot7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4900,
                0
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Ingresar-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "d9a1d848-b855-4b15-a7e6-3432bd2b3356",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5080,
                0
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "74bc9a66-e601-4764-92aa-bfd5b7980184",
              "name": "Coordinate Parser7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5240,
                0
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser7').item.json.x }}, {{ $('Coordinate Parser7').item.json.y }})\""
              },
              "id": "32e28552-df08-4cf8-99e2-805df804281e",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                0
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                -20
              ],
              "typeVersion": 1,
              "id": "f090fb03-6872-44fc-853d-d07a93e7671c",
              "name": "Sticky Note6"
            },
            {
              "parameters": {
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://ctarroyoseco.exactian.solutions/index.php?f=c'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "26567aa1-0a19-4c66-b942-2abb5a878053",
              "name": "OpenBrowserCmd1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4440,
                -600
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "fieldToSplitOut": "documento",
                "options": {}
              },
              "type": "n8n-nodes-base.splitOut",
              "typeVersion": 1,
              "position": [
                4400,
                460
              ],
              "id": "705ed7e0-e2cd-49dc-90ca-e70ea9ee453e",
              "name": "Split Out"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y7').item.json.x }}, {{ $('X,Y7').item.json.y }})\""
              },
              "id": "bbb5dc81-dae6-489d-bbcf-9780bf0961ad",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Filtros\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                860
              ],
              "typeVersion": 1,
              "id": "c782a6c7-e356-4b66-830b-6a5d26a75ca0",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Personal-Exactian"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                4920,
                1520
              ],
              "id": "9ceb7d2f-158c-4974-89d5-9cbcde2e3d3e",
              "name": "Supabase9",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7bc88570-7419-4ff1-b2cf-cb1e423d8cb7",
              "name": "X,Y7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Filtros-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "5a7c9b99-9bd0-4358-8c23-d390d25b644f",
              "name": "Locate11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                880
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(5);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "cd01b380-bbe4-4c0e-a3d5-18f1ba2314fe",
              "name": "Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                880
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; documento='{{$('Loop Over Items2').item.json.documento}}';time.sleep(0);pyautogui.doubleClick({{ $('X,Y8').item.json.x }}, {{ $('X,Y8').item.json.y }}); pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'{documento}');pyautogui.typewrite(['Enter'])\""
              },
              "id": "fca37314-577b-4adf-af09-d874efb78358",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                1100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Barra documentos\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                1080
              ],
              "typeVersion": 1,
              "id": "d2e75d77-742c-403d-b5d4-090d49b6e4da",
              "name": "Sticky Note13"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "05802121-e9e0-4b81-a580-a51803c14e22",
              "name": "X,Y8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                1100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Barra-Documentos-Ex.png', grayscale=True, confidence=0.6))\""
              },
              "id": "395e34cc-db2e-4b49-8c46-4658f065e7a7",
              "name": "Locate1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                1100
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "e94d643a-e52a-48b7-a2f2-d50e53a5efd5",
              "name": "Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                1100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y9').item.json.x }}, {{ $('X,Y9').item.json.y }})\""
              },
              "id": "0f0c0868-16df-4c19-93e2-002cf0ade1d6",
              "name": "Click31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                1320
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Aplicar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                1300
              ],
              "typeVersion": 1,
              "id": "0e90e4a8-74dd-42da-9762-5691573dea4f",
              "name": "Sticky Note14"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2fdb0149-f076-4a74-8883-53d7dc3864ea",
              "name": "X,Y9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                1320
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Aplicar-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "44debd55-d174-4eda-917a-cb2349ba0fca",
              "name": "Locate12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                1320
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "be784d94-810b-4d17-8ff9-38fbacb72a18",
              "name": "Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                1320
              ]
            },
            {
              "parameters": {
                "content": "## Barra buscar\n**Ingresa Nombre de Usuario**",
                "height": 200,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                1720
              ],
              "typeVersion": 1,
              "id": "f3ae1575-0cb3-4aee-a28c-3a19577d80f3",
              "name": "Sticky Note29"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y10').item.json.x }}, {{ $('X,Y10').item.json.y }})\""
              },
              "id": "6ff3ed9a-7698-4345-96ca-abe7f2b13720",
              "name": "Click32",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                2220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                2200
              ],
              "typeVersion": 1,
              "id": "23366d2a-ff4a-45b3-b7d8-26a658819272",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "94d0b4da-fe6d-4ce6-b77b-640ca0859048",
              "name": "X,Y10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                2220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Documento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "c0003cd3-17eb-4253-9cc5-2cdbb7321849",
              "name": "Locate13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                2220
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "f873ed12-2d04-4fc3-96ba-a6ddc5acada0",
              "name": "Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                2220
              ]
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                2860
              ],
              "typeVersion": 1,
              "id": "aea2489f-0486-4838-941d-297760323db8",
              "name": "Sticky Note43"
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $('Loop Over Items2').item.json.documento }}",
                            "rightValue": "E-GE-04D",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "a5f6a6a0-49a4-4cac-b763-a19052173cce"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-04D"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "1733e446-c337-45b9-bd6c-a65b8912055d",
                            "leftValue": "={{ $('Loop Over Items2').item.json.documento }}",
                            "rightValue": "E-GE-14D",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-14D"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "dca69007-f24e-4bb8-bbea-f2ae26ffc4ce",
                            "leftValue": "={{ $('Loop Over Items2').item.json.documento }}",
                            "rightValue": "E-GE-17D",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-17D"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                4920,
                2880
              ],
              "id": "89a06206-f1e9-44f8-b609-0c306a28e2b6",
              "name": "Switch"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y11').item.json.x }}, {{ $('X,Y11').item.json.y }})\""
              },
              "id": "4523acf0-c966-4932-baae-bc44b8f3537d",
              "name": "Click36",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                2440
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                2420
              ],
              "typeVersion": 1,
              "id": "95c8286b-02cd-4e13-a7ca-ec86cf42f249",
              "name": "Sticky Note32"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1774b27f-ccbd-477c-8126-26a02df66d61",
              "name": "X,Y11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                2440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-PorDocumento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "70284b71-564a-4200-8c3f-5be41faad82f",
              "name": "Locate14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                2440
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "1320b37c-6921-4885-9b37-0e450f649bce",
              "name": "Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                2440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y12').item.json.x }}, {{ $('X,Y12').item.json.y }})\""
              },
              "id": "bb93cf87-b306-43ef-9f69-3a5a375510e8",
              "name": "Click37",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                2660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                2640
              ],
              "typeVersion": 1,
              "id": "25e936ae-b6f4-4acb-9f6e-a55bd054da70",
              "name": "Sticky Note33"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ffda5c7c-8848-4f14-919b-3364fdde4b93",
              "name": "X,Y12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                2660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-SeleccionaDocumento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "725e722a-6578-4c02-822f-da7d64fe6d66",
              "name": "Locate15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                2660
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "a3bff45c-016f-444c-aedd-693758b60931",
              "name": "Screenshot15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                2660
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('Loop Over Items3').item.json.Nombre}}'; time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Merge ARCA'); time.sleep(2);pyautogui.typewrite(['enter'])\""
              },
              "id": "5c80e4ef-e9d1-4bb6-9edd-1484ee247156",
              "name": "Ruta MonoyPago1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5420,
                2880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('Loop Over Items3').item.json.Nombre}}';time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(1); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Inscripcion Autonomo Monotributo');time.sleep(1);pyautogui.typewrite(['enter'])\""
              },
              "id": "c07c3b53-dccc-4098-9e41-8a876533aeb0",
              "name": "Ruta Insc.Auto.Mono1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5720,
                2880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');;nombre= '{{$('Loop Over Items3').item.json.Nombre}}'; time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\LA SEGUNDA\\Pago poliza acc personales'); time.sleep(2);pyautogui.typewrite(['enter'])\""
              },
              "id": "e1a1aeee-c389-4fca-a2ff-dddf9231518b",
              "name": "Ruta PPolisa.Acc.Pers1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                2880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "batchSize": "=1",
                "options": {
                  "reset": false
                }
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                5120,
                1520
              ],
              "id": "56d6282d-a0d9-45d1-bc65-e3ed7d7fcf0a",
              "name": "Loop Over Items3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y13').item.json.x }}, {{ $('X,Y13').item.json.y }}); pyautogui.typewrite(['backspace']); pyautogui.typewrite('{{$('Loop Over Items3').item.json.Apellido}}'); pyautogui.typewrite(['Enter'])\""
              },
              "id": "bc2a449c-b076-4d95-b55b-fe1d484c76a2",
              "name": "Click38",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                1760
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "af808d90-d1d9-428e-9c91-56fda269fe7d",
              "name": "X,Y13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                1760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Barra-Buscar-Ex.png', grayscale=True, confidence=0.6))\""
              },
              "id": "da6aecda-92fe-410c-9a3f-4c362046bf4d",
              "name": "Locate16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                1760
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "bf264f8a-0c86-46cc-96a4-b5065776a3b4",
              "name": "Screenshot16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                1760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "23c68af8-c023-4792-8696-46a64644f0e1",
              "name": "Save Screenshot8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4900,
                220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Documentacion-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "a20a8468-ad6c-4236-9c7c-cf533957bb99",
              "name": "Locate On Screen8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5080,
                220
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b730c07a-bc74-429e-b908-57756578a308",
              "name": "Coordinate Parser8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5240,
                220
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser8').item.json.x }}, {{ $('Coordinate Parser8').item.json.y }})\""
              },
              "id": "23b38459-0d80-4112-b09f-0864bb4cba10",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Documentación\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                200
              ],
              "typeVersion": 1,
              "id": "2513f374-1db7-431e-ad3b-32694a7f8e72",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "376794b1-cff8-497d-b94a-b5a5395bdcc2",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4900,
                440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Pdocumentos-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "1fd41da4-1924-4e4f-89be-4e78e0b18c64",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5080,
                440
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2c0e6c34-d78c-4111-a5a0-50b77b5f3d2f",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5240,
                440
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser9').item.json.x }}, {{ $('Coordinate Parser9').item.json.y }})\""
              },
              "id": "272c2aa6-caa4-4c6b-9090-2e64e2b4d64e",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                440
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Documentos\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                420
              ],
              "typeVersion": 1,
              "id": "6571f059-ed42-44a3-91c9-885f615af7b9",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                3080
              ],
              "typeVersion": 1,
              "id": "fcc69cb8-4b5d-435c-8782-c5d024e1742f",
              "name": "Sticky Note35"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "9a7c6010-fe94-4f53-a719-e1a28bd073eb",
              "name": "Save Screenshot31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                3120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Buscar-En-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "67955e0a-d809-4eb3-a63e-1c9aa9887c5b",
              "name": "Locate On Screen30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                3120
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "5960102e-5697-434c-aa75-a3743b3f52a3",
              "name": "Coordinate Parser28",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                3120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time;  apellido='{{$('Loop Over Items3').item.json.Apellido}}'; time.sleep(2);pyautogui.click({{ $('Coordinate Parser28').item.json.x }}, {{ $('Coordinate Parser28').item.json.y }}); pyautogui.typewrite(fr'{apellido}')\""
              },
              "id": "b64ba4e1-de21-4f6d-93d5-7998c30afdb2",
              "name": "Click39",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                3120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"documento\": \"E-GE-04D\"\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                4900,
                660
              ],
              "id": "1e70360a-e7b8-44c8-af19-58501bc691aa",
              "name": "Loop Over Items2"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y').item.json.x }}, {{ $('X,Y').item.json.y }})\""
              },
              "id": "de64058e-9489-45c9-82d8-7f1412750ae9",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                880
              ],
              "typeVersion": 1,
              "id": "6cd0005c-75be-465b-a745-9e49aa30090c",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "99a2a7b7-8803-45d5-88fc-d9b2bc030f50",
              "name": "X,Y",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7040,
                900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Filtros-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "8322b964-349f-4a9c-bd81-6eaa9ae63a15",
              "name": "Locate",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                900
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(5); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8cb6f854-4dfb-4892-81e2-70edbeb3597c",
              "name": "Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; documento='{{$('Loop Over Items4').item.json.documento}}';time.sleep(0);pyautogui.doubleClick({{ $('X,Y8').item.json.x }}, {{ $('X,Y8').item.json.y }}); pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'{documento}');pyautogui.typewrite(['Enter'])\""
              },
              "id": "8bbc33c3-d6a3-43dc-8d13-dfe31504496f",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                1120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                1100
              ],
              "typeVersion": 1,
              "id": "c953e7f6-ee40-4a8f-a7b6-131358ff6953",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "67d775e8-e79d-43d1-b53a-f98871513921",
              "name": "X,Y14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7040,
                1120
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Barra-Documentos-Ex.png', grayscale=True, confidence=0.6))\""
              },
              "id": "61de0d0a-6043-4698-b4c7-6a8eb2cbaf7d",
              "name": "Locate2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                1120
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "1b84e3aa-1611-4667-80fe-072f18639f43",
              "name": "Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                1120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y15').item.json.x }}, {{ $('X,Y15').item.json.y }})\""
              },
              "id": "25139c04-7201-4fe5-91f5-85553f73d3e8",
              "name": "Click40",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                1340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                1320
              ],
              "typeVersion": 1,
              "id": "d5b0d776-3838-458c-b973-c5259d21d329",
              "name": "Sticky Note18"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f12a2b32-d413-4b08-ba4b-030234d5ed16",
              "name": "X,Y15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7040,
                1340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Aplicar-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "20189e36-f529-45dd-889a-94b37cf7aeff",
              "name": "Locate17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                1340
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "fcb9a25a-5863-4faf-b876-30b38eef332b",
              "name": "Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                1340
              ]
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"documento\": \"E-GE-14D\"\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                6600,
                680
              ],
              "id": "1b9f9ce3-9786-43f1-9a8a-6745fc32e468",
              "name": "Loop Over Items4"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y20').item.json.x }}, {{ $('X,Y20').item.json.y }})\""
              },
              "id": "e5acfd30-f084-4e8b-8239-0eb1e1ce0d66",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                880
              ],
              "typeVersion": 1,
              "id": "9a68a17c-7a2f-4641-b77c-8c3e4beda5df",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "cca9087a-8af1-4533-bfd7-298a4842fc85",
              "name": "X,Y20",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Filtros-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "6c0584ae-914b-4118-adaf-1cf7cdcb1901",
              "name": "Locate22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                900
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(5);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "9453de4d-e999-4764-ac8a-23b020014a8a",
              "name": "Screenshot22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; documento='{{$('Loop Over Items6').item.json.documento}}';time.sleep(0);pyautogui.doubleClick({{ $('X,Y8').item.json.x }}, {{ $('X,Y8').item.json.y }}); pyautogui.typewrite(['backspace']);pyautogui.typewrite(fr'{documento}');pyautogui.typewrite(['Enter'])\""
              },
              "id": "d717328d-0f00-4d0f-948d-215408d5e0ad",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                1120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                1100
              ],
              "typeVersion": 1,
              "id": "80c96ef5-a2be-4e8f-b7c1-7f9278019649",
              "name": "Sticky Note20"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "79d1c944-0e6b-48a3-b1d1-ee36acef515e",
              "name": "X,Y21",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                1120
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Barra-Documentos-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "7fc821bb-e934-48ed-b2d6-5dfcb663f129",
              "name": "Locate3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                1120
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "a3fef716-62cc-4b82-a5df-e6ff23021ee5",
              "name": "Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                1120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y22').item.json.x }}, {{ $('X,Y22').item.json.y }})\""
              },
              "id": "75d854d4-21d4-420a-8c0b-c3f98711296e",
              "name": "Click49",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                1340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                1320
              ],
              "typeVersion": 1,
              "id": "09f7b8ba-1a25-45d4-890e-e4a37cb489df",
              "name": "Sticky Note21"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "93005a28-ef5a-4789-bc4e-9eba4a8ed0df",
              "name": "X,Y22",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                1340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Aplicar-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "9a746208-47f7-4193-8306-3a022b8d7aa9",
              "name": "Locate23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                1340
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "2567f05b-3a3a-4089-98ab-275679c91ba4",
              "name": "Screenshot23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                1340
              ]
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"documento\": \"E-GE-17D\"\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                8260,
                680
              ],
              "id": "22fc61af-14d7-43eb-9c30-ca47de675f5b",
              "name": "Loop Over Items6"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                4160,
                -440
              ],
              "id": "8f29b307-23e8-43c7-9613-0de897a1c76a",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "command": "=start \"\" \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --remote-debugging-port=1313 --user-data-dir=\"C:\\Users\\Uusuario Nuevo Prueba\\.n8n\\chromeprofile\" https://ctarroyoseco.exactian.solutions/index.php?f=c"
              },
              "id": "9a9dff92-b145-480d-8e6d-ef0f6baa556a",
              "name": "OpenBrowserCmd",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                0,
                0
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://ctarroyoseco.exactian.solutions/index.php?f=c'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "0140bca6-d236-499b-8d86-07b44e0f7629",
              "name": "Close&Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4440,
                -440
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "content": "## Seleccionar Archivo\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                3320
              ],
              "typeVersion": 1,
              "id": "547f46b3-b361-4d96-93a4-dd3de7e365bc",
              "name": "Sticky Note26"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "3ebaf6b6-1495-489c-a922-0040c308952e",
              "name": "Save Screenshot40",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                3360
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\pdf-save-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "c95a65de-420e-4fb7-8aff-d4706b1fcd01",
              "name": "Locate On Screen38",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                3360
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "022b498d-0911-43f5-bcef-16e71d549b0b",
              "name": "Coordinate Parser34",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5380,
                3360
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser34').item.json.x }}, {{ $('Coordinate Parser34').item.json.y }})\""
              },
              "id": "4f220293-96f5-4a71-8753-5ae5c02cad9d",
              "name": "Click58",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                3360
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                3540
              ],
              "typeVersion": 1,
              "id": "1aaf794b-14b7-4393-a7b7-586cbdffdcc8",
              "name": "Sticky Note53"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = 'C:/Users/Uusario Nuevo Prueba';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "7f3a9460-98e6-4541-ab3c-4b601757ff4d",
              "name": "Save Screenshot41",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                3580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = 'C:/Users/Uusario Nuevo Prueba'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-FechaDesde-Ex.png', grayscale=True, confidence=0.7))\""
              },
              "id": "0a7029d0-2a21-4178-8254-483ced73ded4",
              "name": "Locate On Screen39",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5080,
                3580
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7d42b44b-7f88-476e-b9f0-0f3f8df6ab41",
              "name": "Coordinate Parser35",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5240,
                3580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import datetime; import time; desde = datetime.now().strftime('%d-%m-%Y'); time.sleep(4); pyautogui.click({{ $json.x }}, {{ $json.y +20}}); pyautogui.typewrite(fr'{desde}')\"\n\n"
              },
              "id": "09d9ab2f-395f-4680-9a22-30db208d09dd",
              "name": "Click59",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5400,
                3580
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = 'C:/Users/Uusario Nuevo Prueba'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-FechaHasta-Ex.png', grayscale=True, confidence=0.7))\""
              },
              "id": "75b35250-541a-4422-b173-35be923e936b",
              "name": "Locate On Screen40",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5740,
                3580
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "944bd841-cbaa-459d-8938-b2fb0dedbe87",
              "name": "Coordinate Parser36",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5880,
                3580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import datetime; import time; from calendar import monthrange; current_date = datetime.now(); next_month = current_date.replace(month=current_date.month + 1) if current_date.month != 12 else current_date.replace(year=current_date.year + 1, month=1); day = next_month.day; next_month = next_month.replace(day=min(day, monthrange(next_month.year, next_month.month)[1])); hasta = next_month.strftime('%d-%m-%Y'); time.sleep(2); pyautogui.click(1015, 555); pyautogui.typewrite(fr'{hasta}')\""
              },
              "id": "3354ce4b-4791-47bf-a098-da304079ede8",
              "name": "Click60",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                3580
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                3780
              ],
              "typeVersion": 1,
              "id": "573d223f-00fa-46dd-9658-8a796252d107",
              "name": "Sticky Note54"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "97887c9f-6bcb-4115-bd39-6071639ec9c5",
              "name": "Save Screenshot42",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                3820
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Aceptar-Ex.png', grayscale=True, confidence=0.9))\""
              },
              "id": "d34f2bad-c344-4520-86ff-f95de9d66259",
              "name": "Locate On Screen41",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                3820
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2df47172-725c-4e64-8d6d-d35de84bcd3c",
              "name": "Coordinate Parser37",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                5300,
                3820
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.click({{ $('Coordinate Parser37').item.json.x }}, {{ $('Coordinate Parser37').item.json.y }}); time.sleep(8)\""
              },
              "id": "84c4bb6d-54df-49ba-ac28-f2fd934a5d58",
              "name": "Click61",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6020,
                3820
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = 'C:/Users/Uusario Nuevo Prueba';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "c83466cd-8d86-45e1-b6a4-abf7250889e6",
              "name": "Save Screenshot43",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5600,
                3580
              ]
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "8b5ba9d6-324a-4cee-9597-7ca263d74008",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "=No Apto",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "or"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                6020,
                2000
              ],
              "id": "7e74f24b-12d0-4266-9fd1-2b6acbbc9135",
              "name": "If"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(8);direc = 'C:/Users/Uusario Nuevo Prueba'; img = pyautogui.screenshot(region=(1500,390, 150, 50)); img.save(fr'{direc}\\.n8n\\Screenshots\\Exactian\\WorkingScreen.png')\""
              },
              "id": "6d1fb0b8-078b-404d-b597-df805ad6a7da",
              "name": "Save Screenshot21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4920,
                2000
              ]
            },
            {
              "parameters": {
                "content": "## Seleccion Nombre\n**Ingresa Nombre de Usuario**",
                "height": 200,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                4580,
                1960
              ],
              "typeVersion": 1,
              "id": "27d12572-bd2c-4640-956b-0bdb44af30b8",
              "name": "Sticky Note55"
            },
            {
              "parameters": {
                "command": "=python -c \"import cv2, numpy as np; img = cv2.imread(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\Exactian\\\\WorkingScreen.png'); cropped = img[0:100, 0:300]; hsv = cv2.cvtColor(cropped, cv2.COLOR_BGR2HSV); green1 = cv2.inRange(hsv, (40, 80, 80), (85, 255, 255)); red1 = cv2.inRange(hsv, (0, 80, 80), (10, 255, 255)); red2 = cv2.inRange(hsv, (160, 80, 80), (180, 255, 255)); pinkish = cv2.inRange(hsv, (330//2, 50, 100), (360//2, 255, 255)); green_total = cv2.countNonZero(green1); red_total = cv2.countNonZero(red1) + cv2.countNonZero(red2) + cv2.countNonZero(pinkish); print('Apto' if green_total > red_total * 1.5 else 'No Apto' if red_total > green_total * 1.5 else 'Unknown')\""
              },
              "id": "64215eb1-2c74-4bbd-9106-07f0c9220ade",
              "name": "Local OCR Tesseract",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                5120,
                2000
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Personal-Exactian"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                6620,
                1540
              ],
              "id": "f15c3742-5bd6-4774-872a-acce4c62a3bd",
              "name": "Supabase11",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "content": "## Barra buscar\n**Ingresa Nombre de Usuario**",
                "height": 200,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                1740
              ],
              "typeVersion": 1,
              "id": "8fe54560-de55-40c4-b58c-cf254282e929",
              "name": "Sticky Note30"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y27').item.json.x }}, {{ $('X,Y27').item.json.y }})\""
              },
              "id": "6bc792f6-790c-4974-ae88-802062c999d8",
              "name": "Click33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                2240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                2220
              ],
              "typeVersion": 1,
              "id": "46095460-150f-4914-a99a-724ef441245a",
              "name": "Sticky Note23"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "90fd19cf-9866-4f9a-9f31-cc1baedcb738",
              "name": "X,Y27",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7000,
                2240
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Documento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "12afc041-4ab8-4953-924d-be89e7702750",
              "name": "Locate28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                2240
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "0ead7bd7-39b9-40bd-899d-98fec4f0f029",
              "name": "Screenshot28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                2240
              ]
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                2880
              ],
              "typeVersion": 1,
              "id": "3ed2a32c-648e-4cbb-90ce-cfe9412f7e47",
              "name": "Sticky Note56"
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $('Loop Over Items4').item.json.documento }}",
                            "rightValue": "E-GE-04D",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "a5f6a6a0-49a4-4cac-b763-a19052173cce"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-04D"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "1733e446-c337-45b9-bd6c-a65b8912055d",
                            "leftValue": "={{ $('Loop Over Items4').item.json.documento }}",
                            "rightValue": "E-GE-14D",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-14D"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "dca69007-f24e-4bb8-bbea-f2ae26ffc4ce",
                            "leftValue": "={{ $('Loop Over Items4').item.json.documento }}",
                            "rightValue": "E-GE-17D",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-17D"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                6620,
                2900
              ],
              "id": "dd6c80ec-644b-44b1-b354-b8873b916325",
              "name": "Switch3"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y28').item.json.x }}, {{ $('X,Y28').item.json.y }})\""
              },
              "id": "9dc3dd9f-0c16-446f-b3a6-f35708e6bbb4",
              "name": "Click62",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                2460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                2440
              ],
              "typeVersion": 1,
              "id": "9316bfef-371f-4631-86b8-ed2a58224a68",
              "name": "Sticky Note34"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "19bf9449-1cc4-40d1-b9f0-6717c00911ba",
              "name": "X,Y28",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7000,
                2460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-PorDocumento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "094595b5-71c4-43ed-b4fc-9d1141e2c41d",
              "name": "Locate29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                2460
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "5d4055ff-90bf-4bb5-93ad-449d17cdb588",
              "name": "Screenshot29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                2460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y29').item.json.x }}, {{ $('X,Y29').item.json.y }})\""
              },
              "id": "b32a1052-1fac-42a9-b8d9-c89758263d4c",
              "name": "Click63",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                2680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                2660
              ],
              "typeVersion": 1,
              "id": "ea90a1e9-02b5-4a8c-9355-fd2eb86efd0b",
              "name": "Sticky Note57"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "de9aa59e-2b88-4880-996e-ed1d60315b5f",
              "name": "X,Y29",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7000,
                2680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-SeleccionaDocumento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "0cebf73f-326c-4bc0-a51c-eaac7f9f44e5",
              "name": "Locate30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                2680
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "e9306bc2-d5a9-46c8-b11c-4c471dc171fd",
              "name": "Screenshot30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                2680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('Loop Over Items7').item.json.Nombre}}'; time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Merge ARCA'); time.sleep(2);pyautogui.typewrite(['enter'])\""
              },
              "id": "e2ac5182-67b7-4a1e-a63c-72881a38970b",
              "name": "Ruta MonoyPago3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7120,
                2900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('Loop Over Items7').item.json.Nombre}}';time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(1); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Inscripcion Autonomo Monotributo');time.sleep(1);pyautogui.typewrite(['enter'])\""
              },
              "id": "0e26468d-c993-44e5-8efb-499d752d8180",
              "name": "Ruta Insc.Auto.Mono3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7420,
                2900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('Loop Over Items7').item.json.Nombre}}';time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\LA SEGUNDA\\Pago poliza acc personales'); time.sleep(2);pyautogui.typewrite(['enter'])\""
              },
              "id": "0757dd18-ddc0-4b2d-8d10-e575e93d52ec",
              "name": "Ruta PPolisa.Acc.Pers3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                2900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "batchSize": "=1",
                "options": {
                  "reset": false
                }
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                6820,
                1540
              ],
              "id": "486d686f-d896-45ae-a0e9-6153da9b1491",
              "name": "Loop Over Items7"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y30').item.json.x }}, {{ $('X,Y30').item.json.y }}); pyautogui.typewrite(['backspace']); pyautogui.typewrite('{{$('Loop Over Items7').item.json.Apellido}}'); pyautogui.typewrite(['Enter'])\""
              },
              "id": "55fb51b1-a4fc-4039-88d9-03d44fe9dbdd",
              "name": "Click64",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                1780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a5e1a30b-a054-4cae-9534-4413eef4d7ff",
              "name": "X,Y30",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7000,
                1780
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Barra-Buscar-Ex.png', grayscale=True, confidence=0.6))\""
              },
              "id": "fba53e15-afa2-44c5-b820-32bd510d3c93",
              "name": "Locate31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                1780
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "70b59de0-2da6-442c-8655-a67720a9a882",
              "name": "Screenshot31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                1780
              ]
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                3100
              ],
              "typeVersion": 1,
              "id": "7d7748b4-11e8-435b-ba62-95029e397c98",
              "name": "Sticky Note58"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "9505abb7-53e4-4188-8cf9-968bbb977447",
              "name": "Save Screenshot44",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                3140
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Buscar-En-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "af6b27a3-7c3d-4d87-a205-c01f47369fee",
              "name": "Locate On Screen42",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                3140
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "642247fe-3f16-4ef7-b3ba-3f37f517f47e",
              "name": "Coordinate Parser38",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7000,
                3140
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time;  apellido='{{$('Loop Over Items7').item.json.Apellido}}'; time.sleep(2);pyautogui.click({{ $('Coordinate Parser38').item.json.x }}, {{ $('Coordinate Parser38').item.json.y }}); pyautogui.typewrite(fr'{apellido}')\""
              },
              "id": "200c33af-ec60-4e8f-90ff-b32ac367ada0",
              "name": "Click65",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                3140
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccionar Archivo\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                3340
              ],
              "typeVersion": 1,
              "id": "a48bbaf7-92d7-4aa8-843a-7ad23698fae2",
              "name": "Sticky Note27"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "37320930-5829-44ac-90de-a20371fd6741",
              "name": "Save Screenshot45",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                3380
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\pdf-save-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "37c4aaa7-5996-403f-a151-56cb4c2c987d",
              "name": "Locate On Screen43",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                3380
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "95ce2c21-b849-413b-887a-610dfda8f7c4",
              "name": "Coordinate Parser39",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7080,
                3380
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser39').item.json.x }}, {{ $('Coordinate Parser39').item.json.y }})\""
              },
              "id": "3de4e754-975c-4cea-8455-c275fee694ed",
              "name": "Click66",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                3380
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                3560
              ],
              "typeVersion": 1,
              "id": "dd46f212-69ee-4120-b3d0-8de5c3195893",
              "name": "Sticky Note59"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = 'C:/Users/Uusario Nuevo Prueba';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "32487ab8-70e0-4cec-ba4e-779abc6eeff9",
              "name": "Save Screenshot46",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                3600
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = 'C:/Users/Uusario Nuevo Prueba'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-FechaDesde-Ex.png', grayscale=True, confidence=0.7))\""
              },
              "id": "27807697-3e1c-42bd-aa79-abe658f813bd",
              "name": "Locate On Screen44",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6780,
                3600
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d65e1482-0852-4525-b46f-8c6d5f37e3ea",
              "name": "Coordinate Parser40",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                6940,
                3600
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import datetime; import time; desde = datetime.now().strftime('%d-%m-%Y'); time.sleep(4); pyautogui.click({{ $json.x }}, {{ $json.y +20}}); pyautogui.typewrite(fr'{desde}')\"\n\n"
              },
              "id": "11ed088e-0f9b-4f1d-a7e8-7673ee66ff93",
              "name": "Click67",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7100,
                3600
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = 'C:/Users/Uusario Nuevo Prueba'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-FechaHasta-Ex.png', grayscale=True, confidence=0.7))\""
              },
              "id": "0ce330f8-63b9-47c0-8b9e-bf807b2e0eb2",
              "name": "Locate On Screen45",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7440,
                3600
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f016c331-6968-4ef2-8772-d6e18d346ab4",
              "name": "Coordinate Parser41",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7580,
                3600
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import datetime; import time; from calendar import monthrange; current_date = datetime.now(); next_month = current_date.replace(month=current_date.month + 1) if current_date.month != 12 else current_date.replace(year=current_date.year + 1, month=1); day = next_month.day; next_month = next_month.replace(day=min(day, monthrange(next_month.year, next_month.month)[1])); hasta = next_month.strftime('%d-%m-%Y'); time.sleep(2); pyautogui.click(1015, 555); pyautogui.typewrite(fr'{hasta}')\""
              },
              "id": "620c5bd8-c169-4b31-9a73-633c71035663",
              "name": "Click68",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                3600
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                3800
              ],
              "typeVersion": 1,
              "id": "4fe19e5b-365c-43c1-bf4f-9849ae0603e6",
              "name": "Sticky Note60"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "1bd37dd6-7166-46b1-ba60-0586e14ba8e8",
              "name": "Save Screenshot47",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                3840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Aceptar-Ex.png', grayscale=True, confidence=0.9))\""
              },
              "id": "06d57015-579e-48e5-8cf1-63feea6985a8",
              "name": "Locate On Screen46",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                3840
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "819786f7-0656-40cd-896d-1279e00375d8",
              "name": "Coordinate Parser42",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                7000,
                3840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.click({{ $('Coordinate Parser42').item.json.x }}, {{ $('Coordinate Parser42').item.json.y }}); time.sleep(8)\""
              },
              "id": "534c6f46-c45c-44ac-8d8a-84e74ecad882",
              "name": "Click69",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7720,
                3840
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = 'C:/Users/Uusario Nuevo Prueba';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "60f902f4-9559-415c-911c-584210cc55bf",
              "name": "Save Screenshot48",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                7300,
                3600
              ]
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "8b5ba9d6-324a-4cee-9597-7ca263d74008",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "=No Apto",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "or"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                7720,
                2020
              ],
              "id": "6d0ca703-a29a-4368-b151-0dabc83d5c48",
              "name": "If3"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(8);direc = 'C:/Users/Uusario Nuevo Prueba'; img = pyautogui.screenshot(region=(1500,390, 150, 50)); img.save(fr'{direc}\\.n8n\\Screenshots\\Exactian\\WorkingScreen.png')\""
              },
              "id": "d5086eea-3534-4ff9-8f4e-69662748ba2f",
              "name": "Save Screenshot22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6620,
                2020
              ]
            },
            {
              "parameters": {
                "content": "## Seleccion Nombre\n**Ingresa Nombre de Usuario**",
                "height": 200,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                6280,
                1980
              ],
              "typeVersion": 1,
              "id": "0850bd69-51e6-4b0d-a4fe-c72989206383",
              "name": "Sticky Note61"
            },
            {
              "parameters": {
                "command": "=python -c \"import cv2, numpy as np; img = cv2.imread(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\Exactian\\\\WorkingScreen.png'); cropped = img[0:100, 0:300]; hsv = cv2.cvtColor(cropped, cv2.COLOR_BGR2HSV); green1 = cv2.inRange(hsv, (40, 80, 80), (85, 255, 255)); red1 = cv2.inRange(hsv, (0, 80, 80), (10, 255, 255)); red2 = cv2.inRange(hsv, (160, 80, 80), (180, 255, 255)); pinkish = cv2.inRange(hsv, (330//2, 50, 100), (360//2, 255, 255)); green_total = cv2.countNonZero(green1); red_total = cv2.countNonZero(red1) + cv2.countNonZero(red2) + cv2.countNonZero(pinkish); print('Apto' if green_total > red_total * 1.5 else 'No Apto' if red_total > green_total * 1.5 else 'Unknown')\""
              },
              "id": "2b688332-8986-4ca4-b524-784992575f77",
              "name": "Local OCR Tesseract3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                6820,
                2020
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Personal-Exactian"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                8280,
                1540
              ],
              "id": "0445205f-21be-4d2d-b698-3d6a3aaf6f9f",
              "name": "Supabase12",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "content": "## Barra buscar\n**Ingresa Nombre de Usuario**",
                "height": 200,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                1740
              ],
              "typeVersion": 1,
              "id": "ba13f7eb-993a-42bb-8425-8271e9550acc",
              "name": "Sticky Note31"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y31').item.json.x }}, {{ $('X,Y31').item.json.y }})\""
              },
              "id": "740ef17d-bd32-4897-86fa-b6f1b262ebf0",
              "name": "Click34",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                2240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                2220
              ],
              "typeVersion": 1,
              "id": "1c9e9ff3-0449-4e69-85a4-868f76fbd79f",
              "name": "Sticky Note24"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4347a722-2892-4f1e-99e7-37b462464620",
              "name": "X,Y31",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                2240
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Documento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "2760427d-3e83-4a0f-a136-8e54ffac020c",
              "name": "Locate32",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                2240
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "a863031f-8469-4d45-b466-4c0873dc8aab",
              "name": "Screenshot32",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                2240
              ]
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                2880
              ],
              "typeVersion": 1,
              "id": "ecb5ee99-efb6-46dc-8d92-c63696f54c51",
              "name": "Sticky Note62"
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $('Loop Over Items6').item.json.documento }}",
                            "rightValue": "E-GE-04D",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "a5f6a6a0-49a4-4cac-b763-a19052173cce"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-04D"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "1733e446-c337-45b9-bd6c-a65b8912055d",
                            "leftValue": "={{ $('Loop Over Items6').item.json.documento }}",
                            "rightValue": "E-GE-14D",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-14D"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "dca69007-f24e-4bb8-bbea-f2ae26ffc4ce",
                            "leftValue": "={{ $('Loop Over Items6').item.json.documento }}",
                            "rightValue": "E-GE-17D",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "E-GE-17D"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                8280,
                2900
              ],
              "id": "93c96d7a-24c7-46c4-b2c6-c5e951e01378",
              "name": "Switch4"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y32').item.json.x }}, {{ $('X,Y32').item.json.y }})\""
              },
              "id": "152208d2-41d9-45fc-b95b-5f4707e9e714",
              "name": "Click70",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                2460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                2440
              ],
              "typeVersion": 1,
              "id": "7260c4b6-791e-461a-bbbe-485bf9b0c370",
              "name": "Sticky Note63"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f43a41a7-d80c-4db9-af83-c0938b1bda7e",
              "name": "X,Y32",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                2460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-PorDocumento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "2b82f40b-cc7c-4bcc-860e-be633d321e1b",
              "name": "Locate33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                2460
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "387cfeec-116b-4ddb-bcd5-0f2d990d7266",
              "name": "Screenshot33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                2460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('X,Y33').item.json.x }}, {{ $('X,Y33').item.json.y }})\""
              },
              "id": "4faffbd2-6e9e-4fbe-a12d-d6b44416e007",
              "name": "Click71",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                2680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                2660
              ],
              "typeVersion": 1,
              "id": "1a74a998-796c-4a27-bcc8-695e24003bad",
              "name": "Sticky Note64"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4df0da19-c7c5-457e-8e64-41fe01649951",
              "name": "X,Y33",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                2680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-SeleccionaDocumento-Ex.png', grayscale=True, confidence=0.8))\""
              },
              "id": "959091bd-8cbb-402e-92a8-6112cc064593",
              "name": "Locate34",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                2680
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "21f3eff0-6c7a-4337-9a2a-7365547adabd",
              "name": "Screenshot34",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                2680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('Loop Over Items8').item.json.Nombre}}'; time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Merge ARCA'); time.sleep(2);pyautogui.typewrite(['enter'])\""
              },
              "id": "76964aee-78f8-4eb3-8559-fd28423e3870",
              "name": "Ruta MonoyPago4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8780,
                2900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('Loop Over Items8').item.json.Nombre}}'; time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(1); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Inscripcion Autonomo Monotributo');time.sleep(1);pyautogui.typewrite(['enter'])\""
              },
              "id": "966ab657-6761-44dd-abc3-7f6d6d7b79f0",
              "name": "Ruta Insc.Auto.Mono4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9080,
                2900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('Loop Over Items8').item.json.Nombre}}';time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\LA SEGUNDA\\Pago poliza acc personales'); time.sleep(2);pyautogui.typewrite(['enter'])\""
              },
              "id": "f92db0c9-7a26-4d00-a294-eb897c43269f",
              "name": "Ruta PPolisa.Acc.Pers4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                2900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "batchSize": "=1",
                "options": {
                  "reset": false
                }
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                8480,
                1540
              ],
              "id": "677e29b4-3828-4ad8-b606-d7dd3f176a64",
              "name": "Loop Over Items8"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('X,Y34').item.json.x }}, {{ $('X,Y34').item.json.y }}); pyautogui.typewrite(['backspace']); pyautogui.typewrite('{{$('Loop Over Items8').item.json.Apellido}}'); pyautogui.typewrite(['Enter'])\""
              },
              "id": "049e1048-060b-4637-9b64-ed2a51099b14",
              "name": "Click72",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                1780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "70c3cab6-8772-46e7-af81-7d93871b0668",
              "name": "X,Y34",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                1780
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Barra-Buscar-Ex.png', grayscale=True, confidence=0.6))\""
              },
              "id": "bca71461-c85b-4fa2-8934-2d920ff54cf1",
              "name": "Locate35",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                1780
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "11d21941-255c-4d32-a822-fa27a600ef91",
              "name": "Screenshot35",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                1780
              ]
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                3100
              ],
              "typeVersion": 1,
              "id": "f904e34f-c412-48db-a071-e72d213e9aff",
              "name": "Sticky Note65"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "6379a26c-a1a2-4dcb-aa43-5521d71da29e",
              "name": "Save Screenshot49",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                3140
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Buscar-En-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "6b5c6384-10ff-4b8b-9dd9-3a73b4868c97",
              "name": "Locate On Screen47",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                3140
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a2afd780-5bd6-47c1-981c-bc9e2d3acac6",
              "name": "Coordinate Parser43",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                3140
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time;  apellido='{{$('Loop Over Items8').item.json.Apellido}}'; time.sleep(2);pyautogui.click({{ $('Coordinate Parser43').item.json.x }}, {{ $('Coordinate Parser43').item.json.y }}); pyautogui.typewrite(fr'{apellido}')\""
              },
              "id": "4ed74fb2-e3a4-457d-bb98-cb730ea1b590",
              "name": "Click73",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                3140
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccionar Archivo\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                3340
              ],
              "typeVersion": 1,
              "id": "668719e2-4608-4aac-a4de-e55e2d0afce4",
              "name": "Sticky Note28"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "a060746b-ab1c-4d20-9593-b02d2d1ef9ca",
              "name": "Save Screenshot50",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                3380
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\pdf-save-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "d78bbdac-a843-41c1-86c1-5d719ee06fe7",
              "name": "Locate On Screen48",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                3380
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e1ce2ea2-1ef0-4aff-a12c-307b133d3865",
              "name": "Coordinate Parser44",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8740,
                3380
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser44').item.json.x }}, {{ $('Coordinate Parser44').item.json.y }})\""
              },
              "id": "230db3d4-d683-42d7-8e47-6bc9ba1615f5",
              "name": "Click74",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                3380
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                3560
              ],
              "typeVersion": 1,
              "id": "93c4885b-2f87-450d-b8a4-118160d1f72e",
              "name": "Sticky Note66"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = 'C:/Users/Uusario Nuevo Prueba';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8cb9d586-be6a-4cee-a447-9d3fa88ffc4e",
              "name": "Save Screenshot51",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                3600
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = 'C:/Users/Uusario Nuevo Prueba'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-FechaDesde-Ex.png', grayscale=True, confidence=0.7))\""
              },
              "id": "12af802f-5d4b-405e-adb1-d688bc930d14",
              "name": "Locate On Screen49",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8440,
                3600
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "093a6866-95ed-4984-8f22-8cb46595ed94",
              "name": "Coordinate Parser45",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8600,
                3600
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import datetime; import time; desde = datetime.now().strftime('%d-%m-%Y'); time.sleep(4); pyautogui.click({{ $json.x }}, {{ $json.y +20}}); pyautogui.typewrite(fr'{desde}')\"\n\n"
              },
              "id": "eeaa6ca2-08df-4aaa-aea5-cb39b1b2aa8f",
              "name": "Click75",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8760,
                3600
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = 'C:/Users/Uusario Nuevo Prueba'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-FechaHasta-Ex.png', grayscale=True, confidence=0.7))\""
              },
              "id": "f5afb939-22bf-4608-8d6d-5b86c1790231",
              "name": "Locate On Screen50",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9100,
                3600
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4611edf5-5a42-4a6c-b83d-231cb7158e6b",
              "name": "Coordinate Parser46",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                9240,
                3600
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import datetime; import time; from calendar import monthrange; current_date = datetime.now(); next_month = current_date.replace(month=current_date.month + 1) if current_date.month != 12 else current_date.replace(year=current_date.year + 1, month=1); day = next_month.day; next_month = next_month.replace(day=min(day, monthrange(next_month.year, next_month.month)[1])); hasta = next_month.strftime('%d-%m-%Y'); time.sleep(2); pyautogui.click(1015, 555); pyautogui.typewrite(fr'{hasta}')\""
              },
              "id": "cab92586-6f28-4328-af48-3617e7cd715a",
              "name": "Click76",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                3600
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                3800
              ],
              "typeVersion": 1,
              "id": "7d28a87f-c9dd-45e9-86e9-4d1ab3bd9f77",
              "name": "Sticky Note67"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "cc08a1dc-8f56-4bd9-bc36-fbf2a46866d5",
              "name": "Save Screenshot52",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                3840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\Exactian\\Boton-Aceptar-Ex.png', grayscale=True, confidence=0.9))\""
              },
              "id": "e48a1332-505b-492e-924b-12107eb160ad",
              "name": "Locate On Screen51",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                3840
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3d3e4066-2f20-4649-a89b-7d6827f549cf",
              "name": "Coordinate Parser47",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                8660,
                3840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.click({{ $('Coordinate Parser47').item.json.x }}, {{ $('Coordinate Parser47').item.json.y }}); time.sleep(8)\""
              },
              "id": "251a493a-f037-4d03-959a-e17d57fafca3",
              "name": "Click77",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                9380,
                3840
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = 'C:/Users/Uusario Nuevo Prueba';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "25f9b950-7fbb-4d0b-a268-8d05689b80b8",
              "name": "Save Screenshot53",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8960,
                3600
              ]
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "8b5ba9d6-324a-4cee-9597-7ca263d74008",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "=No Apto",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "or"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                9380,
                2020
              ],
              "id": "a17fc303-f907-48d9-aee2-f1b2c4328dac",
              "name": "If4"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(8);direc = 'C:/Users/Uusario Nuevo Prueba'; img = pyautogui.screenshot(region=(1500,390, 150, 50)); img.save(fr'{direc}\\.n8n\\Screenshots\\Exactian\\WorkingScreen.png')\""
              },
              "id": "9fab796f-8dec-402e-b850-3ce8cc5ed5ac",
              "name": "Save Screenshot23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8280,
                2020
              ]
            },
            {
              "parameters": {
                "content": "## Seleccion Nombre\n**Ingresa Nombre de Usuario**",
                "height": 200,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                7940,
                1980
              ],
              "typeVersion": 1,
              "id": "8243daf0-3452-4423-a23b-2966a568405a",
              "name": "Sticky Note68"
            },
            {
              "parameters": {
                "command": "=python -c \"import cv2, numpy as np; img = cv2.imread(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\Exactian\\\\WorkingScreen.png'); cropped = img[0:100, 0:300]; hsv = cv2.cvtColor(cropped, cv2.COLOR_BGR2HSV); green1 = cv2.inRange(hsv, (40, 80, 80), (85, 255, 255)); red1 = cv2.inRange(hsv, (0, 80, 80), (10, 255, 255)); red2 = cv2.inRange(hsv, (160, 80, 80), (180, 255, 255)); pinkish = cv2.inRange(hsv, (330//2, 50, 100), (360//2, 255, 255)); green_total = cv2.countNonZero(green1); red_total = cv2.countNonZero(red1) + cv2.countNonZero(red2) + cv2.countNonZero(pinkish); print('Apto' if green_total > red_total * 1.5 else 'No Apto' if red_total > green_total * 1.5 else 'Unknown')\""
              },
              "id": "d3e89aff-4ac7-41bf-b49e-dde6d4491f61",
              "name": "Local OCR Tesseract4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8480,
                2020
              ],
              "notesInFlow": false,
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "f9b5a4a8-87ca-4bc6-99b7-331d79b143c5",
              "name": "CloseTab1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                8700,
                1560
              ]
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot5": {
              "main": [
                [
                  {
                    "node": "Locate On Screen5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser5": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields1": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot7": {
              "main": [
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser7": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd1": {
              "main": [
                []
              ]
            },
            "Split Out": {
              "main": [
                []
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase9": {
              "main": [
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y7": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate11": {
              "main": [
                [
                  {
                    "node": "X,Y7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y8": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate1": {
              "main": [
                [
                  {
                    "node": "X,Y8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click31": {
              "main": [
                [
                  {
                    "node": "Supabase9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y9": {
              "main": [
                [
                  {
                    "node": "Click31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate12": {
              "main": [
                [
                  {
                    "node": "X,Y9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click32": {
              "main": [
                [
                  {
                    "node": "Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y10": {
              "main": [
                [
                  {
                    "node": "Click32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate13": {
              "main": [
                [
                  {
                    "node": "X,Y10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch": {
              "main": [
                [
                  {
                    "node": "Ruta MonoyPago1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Insc.Auto.Mono1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta PPolisa.Acc.Pers1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click36": {
              "main": [
                [
                  {
                    "node": "Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y11": {
              "main": [
                [
                  {
                    "node": "Click36",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate14": {
              "main": [
                [
                  {
                    "node": "X,Y11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click37": {
              "main": [
                [
                  {
                    "node": "Switch",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y12": {
              "main": [
                [
                  {
                    "node": "Click37",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate15": {
              "main": [
                [
                  {
                    "node": "X,Y12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot15": {
              "main": [
                [
                  {
                    "node": "Locate15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta MonoyPago1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot31",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta MonoyPago1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Insc.Auto.Mono1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot31",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Insc.Auto.Mono1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta PPolisa.Acc.Pers1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot31",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta PPolisa.Acc.Pers1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items3": {
              "main": [
                [
                  {
                    "node": "Loop Over Items4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click38": {
              "main": [
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y13": {
              "main": [
                [
                  {
                    "node": "Click38",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate16": {
              "main": [
                [
                  {
                    "node": "X,Y13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot16": {
              "main": [
                [
                  {
                    "node": "Locate16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot8": {
              "main": [
                [
                  {
                    "node": "Locate On Screen8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser8": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Loop Over Items2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot31": {
              "main": [
                [
                  {
                    "node": "Locate On Screen30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen30": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser28": {
              "main": [
                [
                  {
                    "node": "Click39",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click39": {
              "main": [
                [
                  {
                    "node": "Save Screenshot40",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items2": {
              "main": [
                [
                  {
                    "node": "Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate": {
              "main": [
                [
                  {
                    "node": "X,Y",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y14": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate2": {
              "main": [
                [
                  {
                    "node": "X,Y14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click40": {
              "main": [
                [
                  {
                    "node": "Supabase11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y15": {
              "main": [
                [
                  {
                    "node": "Click40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate17": {
              "main": [
                [
                  {
                    "node": "X,Y15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot17": {
              "main": [
                [
                  {
                    "node": "Locate17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items4": {
              "main": [
                [
                  {
                    "node": "Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y20": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate22": {
              "main": [
                [
                  {
                    "node": "X,Y20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot22": {
              "main": [
                [
                  {
                    "node": "Locate22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y21": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate3": {
              "main": [
                [
                  {
                    "node": "X,Y21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot3": {
              "main": [
                [
                  {
                    "node": "Locate3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click49": {
              "main": [
                [
                  {
                    "node": "Supabase12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y22": {
              "main": [
                [
                  {
                    "node": "Click49",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate23": {
              "main": [
                [
                  {
                    "node": "X,Y22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot23": {
              "main": [
                [
                  {
                    "node": "Locate23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items6": {
              "main": [
                [
                  {
                    "node": "Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Close&Open": {
              "main": [
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot40": {
              "main": [
                [
                  {
                    "node": "Locate On Screen38",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen38": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser34",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Coordinate Parser34": {
              "main": [
                [
                  {
                    "node": "Click58",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click58": {
              "main": [
                [
                  {
                    "node": "Save Screenshot41",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot41": {
              "main": [
                [
                  {
                    "node": "Locate On Screen39",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen39": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser35",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser35": {
              "main": [
                [
                  {
                    "node": "Click59",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click59": {
              "main": [
                [
                  {
                    "node": "Save Screenshot43",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen40": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser36",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser36": {
              "main": [
                [
                  {
                    "node": "Click60",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot42": {
              "main": [
                [
                  {
                    "node": "Locate On Screen41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen41": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser37",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser37": {
              "main": [
                [
                  {
                    "node": "Click61",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click61": {
              "main": [
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot42",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click60": {
              "main": [
                [
                  {
                    "node": "Save Screenshot42",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot43",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot43": {
              "main": [
                [
                  {
                    "node": "Locate On Screen40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot21": {
              "main": [
                [
                  {
                    "node": "Local OCR Tesseract",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase11": {
              "main": [
                [
                  {
                    "node": "Loop Over Items7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click33": {
              "main": [
                [
                  {
                    "node": "Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y27": {
              "main": [
                [
                  {
                    "node": "Click33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate28": {
              "main": [
                [
                  {
                    "node": "X,Y27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot28": {
              "main": [
                [
                  {
                    "node": "Locate28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch3": {
              "main": [
                [
                  {
                    "node": "Ruta MonoyPago3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Insc.Auto.Mono3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta PPolisa.Acc.Pers3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click62": {
              "main": [
                [
                  {
                    "node": "Screenshot30",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y28": {
              "main": [
                [
                  {
                    "node": "Click62",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate29": {
              "main": [
                [
                  {
                    "node": "X,Y28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot29": {
              "main": [
                [
                  {
                    "node": "Locate29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click63": {
              "main": [
                [
                  {
                    "node": "Switch3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y29": {
              "main": [
                [
                  {
                    "node": "Click63",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate30": {
              "main": [
                [
                  {
                    "node": "X,Y29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot30": {
              "main": [
                [
                  {
                    "node": "Locate30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta MonoyPago3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot44",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta MonoyPago3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Insc.Auto.Mono3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot44",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Insc.Auto.Mono3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta PPolisa.Acc.Pers3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot44",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta PPolisa.Acc.Pers3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items7": {
              "main": [
                [
                  {
                    "node": "Loop Over Items6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click64": {
              "main": [
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y30": {
              "main": [
                [
                  {
                    "node": "Click64",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate31": {
              "main": [
                [
                  {
                    "node": "X,Y30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot31": {
              "main": [
                [
                  {
                    "node": "Locate31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot44": {
              "main": [
                [
                  {
                    "node": "Locate On Screen42",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen42": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser38",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser38": {
              "main": [
                [
                  {
                    "node": "Click65",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click65": {
              "main": [
                [
                  {
                    "node": "Save Screenshot45",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot44",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot45": {
              "main": [
                [
                  {
                    "node": "Locate On Screen43",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen43": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser39",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser39": {
              "main": [
                [
                  {
                    "node": "Click66",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click66": {
              "main": [
                [
                  {
                    "node": "Save Screenshot46",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot45",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot46": {
              "main": [
                [
                  {
                    "node": "Locate On Screen44",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen44": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser40": {
              "main": [
                [
                  {
                    "node": "Click67",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click67": {
              "main": [
                [
                  {
                    "node": "Save Screenshot48",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot46",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen45": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser41": {
              "main": [
                [
                  {
                    "node": "Click68",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click68": {
              "main": [
                [
                  {
                    "node": "Save Screenshot47",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot48",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot47": {
              "main": [
                [
                  {
                    "node": "Locate On Screen46",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen46": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser42",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser42": {
              "main": [
                [
                  {
                    "node": "Click69",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click69": {
              "main": [
                [
                  {
                    "node": "Loop Over Items7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot47",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot48": {
              "main": [
                [
                  {
                    "node": "Locate On Screen45",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If3": {
              "main": [
                [
                  {
                    "node": "Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot22": {
              "main": [
                [
                  {
                    "node": "Local OCR Tesseract3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract3": {
              "main": [
                [
                  {
                    "node": "If3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase12": {
              "main": [
                [
                  {
                    "node": "Loop Over Items8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click34": {
              "main": [
                [
                  {
                    "node": "Screenshot33",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y31": {
              "main": [
                [
                  {
                    "node": "Click34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate32": {
              "main": [
                [
                  {
                    "node": "X,Y31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot32": {
              "main": [
                [
                  {
                    "node": "Locate32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch4": {
              "main": [
                [
                  {
                    "node": "Ruta MonoyPago4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Insc.Auto.Mono4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta PPolisa.Acc.Pers4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click70": {
              "main": [
                [
                  {
                    "node": "Screenshot34",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y32": {
              "main": [
                [
                  {
                    "node": "Click70",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate33": {
              "main": [
                [
                  {
                    "node": "X,Y32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot33": {
              "main": [
                [
                  {
                    "node": "Locate33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click71": {
              "main": [
                [
                  {
                    "node": "Switch4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y33": {
              "main": [
                [
                  {
                    "node": "Click71",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate34": {
              "main": [
                [
                  {
                    "node": "X,Y33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot34": {
              "main": [
                [
                  {
                    "node": "Locate34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta MonoyPago4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot49",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta MonoyPago4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Insc.Auto.Mono4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot49",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Insc.Auto.Mono4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta PPolisa.Acc.Pers4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot49",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta PPolisa.Acc.Pers4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items8": {
              "main": [
                [
                  {
                    "node": "CloseTab1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot35",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click72": {
              "main": [
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Screenshot35",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "X,Y34": {
              "main": [
                [
                  {
                    "node": "Click72",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate35": {
              "main": [
                [
                  {
                    "node": "X,Y34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Screenshot35": {
              "main": [
                [
                  {
                    "node": "Locate35",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot49": {
              "main": [
                [
                  {
                    "node": "Locate On Screen47",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen47": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser43",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser43": {
              "main": [
                [
                  {
                    "node": "Click73",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click73": {
              "main": [
                [
                  {
                    "node": "Save Screenshot50",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot49",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot50": {
              "main": [
                [
                  {
                    "node": "Locate On Screen48",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen48": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser44",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser44": {
              "main": [
                [
                  {
                    "node": "Click74",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click74": {
              "main": [
                [
                  {
                    "node": "Save Screenshot51",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot50",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot51": {
              "main": [
                [
                  {
                    "node": "Locate On Screen49",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen49": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser45",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser45": {
              "main": [
                [
                  {
                    "node": "Click75",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click75": {
              "main": [
                [
                  {
                    "node": "Save Screenshot53",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot51",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen50": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser46",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser46": {
              "main": [
                [
                  {
                    "node": "Click76",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click76": {
              "main": [
                [
                  {
                    "node": "Save Screenshot52",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot53",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot52": {
              "main": [
                [
                  {
                    "node": "Locate On Screen51",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen51": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser47",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser47": {
              "main": [
                [
                  {
                    "node": "Click77",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click77": {
              "main": [
                [
                  {
                    "node": "Loop Over Items8",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot52",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot53": {
              "main": [
                [
                  {
                    "node": "Locate On Screen50",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If4": {
              "main": [
                [
                  {
                    "node": "Screenshot32",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot23": {
              "main": [
                [
                  {
                    "node": "Local OCR Tesseract4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract4": {
              "main": [
                [
                  {
                    "node": "If4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": null,
          "pinData": {},
          "versionId": "8814b16b-2491-46d4-b061-0730cbc1f241",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-05-05T18:27:05.653Z",
          "updatedAt": "2025-05-20T18:29:30.000Z",
          "id": "WgubfNSj72iqmkdL",
          "name": "Copiar-Archivos-PagoMonotributo",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "pollTimes": {
                  "item": [
                    {
                      "mode": "everyMinute"
                    }
                  ]
                },
                "triggerOn": "specificFolder",
                "folderToWatch": {
                  "__rl": true,
                  "value": "17jW8W_AUQjq_LrCX-Q0BW3uBkbVnSCM3",
                  "mode": "id"
                },
                "event": "fileUpdated",
                "options": {}
              },
              "type": "n8n-nodes-base.googleDriveTrigger",
              "typeVersion": 1,
              "position": [
                -560,
                80
              ],
              "id": "4ea9b228-773a-4fa3-b96c-387c9125fafa",
              "name": "Google Drive Trigger",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import os; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now(); from datetime import datetime; mesdirec = current_date.strftime('%m - %B %Y'); stdout = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); mes = current_date.strftime('%B'); print(fr'{stdout}')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -380,
                80
              ],
              "id": "cb16f14f-951d-449a-8cce-1dd5efc8544a",
              "name": "Execute Command"
            },
            {
              "parameters": {
                "operation": "copy",
                "fileId": {
                  "__rl": true,
                  "value": "={{$('Google Drive Trigger').item.json.id}}",
                  "mode": "id"
                },
                "name": "={{$('Google Drive Trigger').item.json.name}}",
                "sameFolder": false,
                "driveId": {
                  "__rl": true,
                  "mode": "list",
                  "value": "My Drive"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                280,
                80
              ],
              "id": "5b373364-ff97-4ef0-968c-d6c27ceb2584",
              "name": "Google Drive",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "queryString": "={{ $json.stdout }}",
                "limit": 1,
                "filter": {
                  "folderId": {
                    "mode": "list",
                    "value": "root",
                    "cachedResultName": "/ (Root folder)"
                  }
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                -200,
                80
              ],
              "id": "0cd079e4-828a-47a3-8403-014e18e05141",
              "name": "Google Drive1",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "queryString": "=ARCA",
                "limit": 1,
                "filter": {
                  "folderId": {
                    "__rl": true,
                    "value": "={{ $json.id }}",
                    "mode": "id"
                  }
                },
                "options": {
                  "fields": [
                    "id",
                    "name"
                  ]
                }
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                -40,
                80
              ],
              "id": "cb034479-30f1-4e73-a8c0-e334c94ce053",
              "name": "Google Drive2",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "queryString": "=Pago Monotributo",
                "limit": 1,
                "filter": {
                  "folderId": {
                    "__rl": true,
                    "value": "={{ $json.id }}",
                    "mode": "id"
                  }
                },
                "options": {
                  "fields": [
                    "id",
                    "name"
                  ]
                }
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                120,
                80
              ],
              "id": "f7862c6e-28a6-4cb1-a920-0f1e0dc7150d",
              "name": "Google Drive3",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            }
          ],
          "connections": {
            "Google Drive Trigger": {
              "main": [
                [
                  {
                    "node": "Execute Command",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command": {
              "main": [
                [
                  {
                    "node": "Google Drive1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive1": {
              "main": [
                [
                  {
                    "node": "Google Drive2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive2": {
              "main": [
                [
                  {
                    "node": "Google Drive3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive3": {
              "main": [
                [
                  {
                    "node": "Google Drive",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Google Drive Trigger": {
              "lastTimeChecked": "2025-05-20T13:38:37Z"
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "eb88e168-efa2-4ca3-a809-459049886e2c",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-03-21T12:29:19.490Z",
          "updatedAt": "2025-07-16T12:21:00.000Z",
          "id": "aVIs8uvnkVfzIrDd",
          "name": "Vencimientos-ControlDocumentario",
          "active": true,
          "nodes": [
            {
              "parameters": {},
              "id": "2d91625c-1bd6-454d-882d-1a5ecfb7f613",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -40,
                80
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                440,
                80
              ],
              "id": "1742aef1-fef0-46da-89a6-6f3add53383a",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -40,
                260
              ],
              "id": "0c3e0910-cd44-47ca-8eb5-de48d7093855",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "3e471d1d-c139-4e58-b269-04214184e3ad",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                80
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f9bbf551-da3b-4d94-8c97-03958352cebf",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                80
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "deec086d-cf37-4903-be9e-6b74fd68eb17",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                80
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y }}); pyautogui.typewrite('30716401622'); pyautogui.typewrite(['escape'])\""
              },
              "id": "fbfc3cc3-e482-4058-8fa8-177393161442",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                80
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                60
              ],
              "typeVersion": 1,
              "id": "932e2c91-a114-4970-83b2-f72040740a69",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "f9ef3993-4f7a-4f71-8530-ae28fcc7b799",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "3f20a6ec-3e0e-4394-95f9-ca1fb79856ae",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                300
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "db42311a-4544-41f7-b7cb-c5438b361360",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                300
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser').item.json.x}}, {{ $('Coordinate Parser').item.json.y }}); pyautogui.typewrite('TR33Ingresos#')\""
              },
              "id": "7184cd2f-255f-45af-9999-ac7fd08023fb",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                280
              ],
              "typeVersion": 1,
              "id": "7297305f-63a2-4f1b-b2b2-793825b811b1",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8173c6a1-35e9-4bbe-9ea9-44aff95e9c67",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "7d46253e-c119-4be0-b5e9-73cd2c1ca8c4",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                520
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "163afde7-9988-4f3a-a496-c9e05cc4be10",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                520
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser1').item.json.x }}, {{ $('Coordinate Parser1').item.json.y }})\""
              },
              "id": "b690c0d7-de23-41b1-8f82-78a0497f3a94",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                500
              ],
              "typeVersion": 1,
              "id": "d6d9fc38-22fc-44af-b442-b49dc5862948",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "9c5834b2-9836-4a30-b8a1-31a96b8df809",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                740
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "b8f6fc61-f720-4a4b-b8a5-075fa0f4abf8",
              "name": "Locate On Screen3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                740
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "5be79baf-ed56-460c-b1de-3bdf93af8201",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                740
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser2').item.json.x }}, {{ $('Coordinate Parser2').item.json.y }})\""
              },
              "id": "d72f72e2-e7d6-4e46-b42a-a7dacb6c1cca",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                740
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                720
              ],
              "typeVersion": 1,
              "id": "f0464976-efe6-4aee-95ba-30f08cc08312",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "de600fe7-b5fa-4331-b622-a5adb8056a1a",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "796fd783-642c-4acb-a19f-fb946effdaf4",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                960
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e12ba67d-f356-4ecf-9613-1df10f8dfb5e",
              "name": "Coordinate Parser3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                960
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser3').item.json.x}}, {{ $('Coordinate Parser3').item.json.y }})\""
              },
              "id": "e1224198-f61f-4c67-b734-075550b84e7c",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                940
              ],
              "typeVersion": 1,
              "id": "8ce381a0-04f1-44b7-b397-dccbd6ac4628",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8c691354-1258-436a-aedf-a2357126233b",
              "name": "Save Screenshot5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                1180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Vencimientos-CD.png', grayscale=False, confidence=0.9))\"\n"
              },
              "id": "f521ca9d-d006-48a5-85a5-e32a766d1f45",
              "name": "Locate On Screen5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1180
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "8448254b-f2b2-463a-8a2e-759e19368d45",
              "name": "Coordinate Parser5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                1180
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser5').item.json.x}}, {{ $('Coordinate Parser5').item.json.y }})\""
              },
              "id": "6215282e-c871-4c73-9490-a3bb7a8f2ad7",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1420,
                1180
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                1160
              ],
              "typeVersion": 1,
              "id": "d31bd67f-7e70-45dd-9518-094133a56645",
              "name": "Sticky Note4"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "46b07806-23ab-487f-a4b0-129589c35753",
              "name": "Save Screenshot7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                1400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "15e390ab-7db8-437a-9e32-dc85f14fa586",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1060,
                1400
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e5121258-2d2c-4b07-8ac9-e26530305d4c",
              "name": "Coordinate Parser7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1220,
                1400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser8').item.json.x }}, {{ $('Coordinate Parser8').item.json.y}})\""
              },
              "id": "fb058757-c5cf-40a5-91be-995ebffd3201",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                1400
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## DropDown SJS\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                1380
              ],
              "typeVersion": 1,
              "id": "9903f8e1-a301-4fef-b02e-a4bf15dbfb84",
              "name": "Sticky Note6"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "011a49b0-6b1a-4699-8f84-03de51778358",
              "name": "Save Screenshot8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1540,
                1400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-SJS2-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "54494fab-4a23-48e3-8d92-7dbda7832c12",
              "name": "Locate On Screen8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1700,
                1400
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e6857769-5064-401d-97a3-23d6db222fc4",
              "name": "Coordinate Parser8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1860,
                1400
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser7').item.json.x }}, {{ $('Coordinate Parser7').item.json.y }})\""
              },
              "id": "d9cf249a-7ea9-46b0-b062-7bd7835f5a4b",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1380,
                1400
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "4b74fbbd-2510-448e-a5b8-cb9fdd13a638",
              "name": "Save Screenshot10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                1620
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "a7cdc968-4ba7-4a33-8dde-69429ab06694",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1620
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "31378d29-fffd-4c6e-95a4-f52879296f0f",
              "name": "Coordinate Parser12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                1620
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser12').item.json.x }}, {{ $('Coordinate Parser12').item.json.y }})\""
              },
              "id": "165b4a5b-7c0e-48e8-b15a-9fc038ac7327",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                1620
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                1600
              ],
              "typeVersion": 1,
              "id": "933e458c-4814-41a0-b77d-8a0f442082cf",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                1820
              ],
              "typeVersion": 1,
              "id": "6ab7bddc-b233-49b3-93e0-0ea62ea1845b",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'ctl00_ContentPlaceHolderMain_tbVencimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
              },
              "id": "aae6c78c-bbc7-444e-a357-ffe02e9f3e45",
              "name": "Get Table - V1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1840
              ]
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Función para calcular los días restantes hasta la fecha\nfunction calcularDiasRestantes(fechaStr) {\n  const [dia, mes, año] = fechaStr.split('/');  // Convertir la fecha a [día, mes, año]\n  const fecha = new Date(`${año}-${mes}-${dia}`);  // Crear el objeto Date (formato: YYYY-MM-DD)\n  const hoy = new Date();  // Fecha actual\n\n  // Calculamos la diferencia en milisegundos\n  const diferencia = fecha - hoy;\n  const diasRestantes = Math.floor(diferencia / (1000 * 60 * 60 * 24));\n\n  return diasRestantes;\n}\n\n// Mapear las posiciones a los encabezados correspondientes\nconst headers = [\n  \"DNI\", \"Nombre\", \"Estado\", \"DNI\", \"ExámenMédico\", \"PolizaAccPer\", \"PPolizaAccPe\", \"LicenciaCond\", \"IndDepSegSJS\", \"OCAsocPLSJS\", \"Incr-Aut-Mon\", \"IndGralSeg\", \"Anexo1BUNGE\", \"NotaSubCont.\"\n];\n\n// Establecer la salida como el array de objetos con la fecha comparada y días restantes\nreturn lines.map(line => {\n  // Procesamos la columna 'fila' de cada línea\n  const fila = line.fila;\n\n  // Arreglo para almacenar las fechas que estén a 7 días o menos\n  const fechasCercanas = [];\n\n  // Solo nos interesan las posiciones 5, 6 y 10 (fechas de los documentos)\n  const indicesFechas = [5, 6, 10];\n\n  // Recorremos las posiciones 5, 6 y 10 para verificar los días restantes\n  indicesFechas.forEach(index => {\n    const fecha = fila[index];\n\n    if (fecha !== 'n/a') {\n      const diasRestantes = calcularDiasRestantes(fecha);\n      if (diasRestantes <= 10 && diasRestantes >= 0) {\n        // El encabezado de la posición es el nombre del documento\n        const documento = headers[index];  // Obtenemos el nombre del encabezado correspondiente a la posición\n\n        fechasCercanas.push({\n          nombre: fila[1],  // Nombre de la persona en la posición 1\n          documento: documento,  // Nombre del encabezado (en vez de la fecha)\n          diasRestantes: diasRestantes  // Cuántos días faltan\n        });\n      }\n    }\n  });\n\n  // Si existen fechas cercanas (7 días o menos), devolvemos esa información como un objeto dentro de 'json'\n  if (fechasCercanas.length > 0) {\n    return { json: { fechasCercanas } };  // Aseguramos que 'json' sea un objeto\n  } else {\n    // Si no hay fechas cercanas, no devolvemos nada\n    return null;\n  }\n}).filter(line => line !== null);  // Filtramos las líneas que no contienen fechas cercanas"
              },
              "id": "727f6990-c280-42d0-ae56-0a2393704d45",
              "name": "Divide html columns5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                1840
              ]
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
              },
              "id": "f37569b2-1986-4371-a8e5-045ef037cd14",
              "name": "OpenBrowserCmd",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                160,
                80
              ],
              "alwaysOutputData": false,
              "executeOnce": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "="
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                900,
                1840
              ],
              "id": "ad8c37b2-9ac9-455f-813d-866255f74638",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Crear una única lista combinada de fechasCercanas\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Devolver un único item con json.fechasCercanas\nreturn [\n  {\n    json: {\n      fechasCercanas: todasLasFechas\n    }\n  }\n];"
              },
              "id": "aef7b348-fc64-4e98-a715-8bb3d0915c52",
              "name": "Divide html columns",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1400,
                1840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';import time; time.sleep(4); print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6) is not None)\""
              },
              "id": "45ea1596-0f13-4896-958d-f75ffad9f2d6",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1860,
                1200
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6d032dad-66f7-4760-8421-7531ba564039",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                2020,
                1200
              ],
              "id": "d2170f59-f64a-4e18-bd12-34b7f7405eac",
              "name": "If"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com, a.benitez@treeingenieria.com, administracion@treeingenieria.com",
                "subject": "BOT - Proximos Vencimientos - BUNGE",
                "emailType": "text",
                "message": "={{ $json.resumenFechas }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                1720,
                1840
              ],
              "id": "724869d5-e4ee-49da-aeb2-443f811a1bae",
              "name": "Gmail",
              "webhookId": "6bc2c596-6b0a-4077-9a64-a43f3b27b4d7",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Combinar y reemplazar documentos\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Convertir en texto legible\nlet resumen = 'Fechas cercanas:\\n\\n';\n\nfor (const fecha of todasLasFechas) {\n  resumen += `👤 ${fecha.nombre}\\n📄 ${fecha.documento}\\n📅 En ${fecha.diasRestantes} días\\n\\n`;\n}\n\nreturn [\n  {\n    json: {\n      resumenFechas: resumen.trim()\n    }\n  }\n];"
              },
              "id": "c6d1f9ea-a4be-4072-8d7b-5e5dca19522c",
              "name": "Divide html columns2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1560,
                1840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "ed600081-3f84-4850-bc89-c4e36711bacf",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                1840
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2660,
                80
              ],
              "id": "840f33ee-c5e3-4fa5-a982-e270b34bdec0",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "76113ab6-719c-4229-8e86-7a080f9c2084",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                80
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "96372784-f63b-4a75-8c64-5e0aa2cb8aa2",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                80
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "105d06dd-cf98-48b9-add5-1036abb4f8d8",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                80
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser6').item.json.x }}, {{ $('Coordinate Parser6').item.json.y }}); pyautogui.typewrite('30716401622'); pyautogui.typewrite(['escape'])\""
              },
              "id": "2b57750b-9e80-40ce-b9fc-2869cadce26d",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                80
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                60
              ],
              "typeVersion": 1,
              "id": "53a67cee-8695-4d8c-a469-00578444d44c",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "3bd698b1-6f24-4ec2-9dc6-70e28ccc3a40",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields3').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "2f894938-a430-4d19-a065-1735a4124dc1",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                300
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f9b45554-71eb-4672-97eb-10a2ec6b0d9c",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                300
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser9').item.json.x}}, {{ $('Coordinate Parser9').item.json.y }}); pyautogui.typewrite('TR33Ingresos#')\""
              },
              "id": "fe7dad2d-30a6-4348-a8b8-d75203142e5b",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                280
              ],
              "typeVersion": 1,
              "id": "fe3cd1a1-0f1b-4391-981d-331e86a4f32a",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "5100e91c-e02b-429a-aa86-30a15840a4c7",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "b4bbabfb-7126-4206-8162-a359733fab67",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                520
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1c66dae9-5c94-47c3-9b8c-f2d69e09b37c",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                520
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser10').item.json.x }}, {{ $('Coordinate Parser10').item.json.y }})\""
              },
              "id": "d536fb17-2434-4514-8866-77432c4e20b7",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                500
              ],
              "typeVersion": 1,
              "id": "6a1cbd16-1fb5-4576-bf18-84891c4b0048",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "33bdf5a3-c0ae-44b6-94e6-5dbaec577a6e",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                740
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "eeed3a33-084f-408f-903c-d00d5c054b2f",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                740
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "6690c80f-e845-44a9-80eb-a8c0d6733fc6",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                740
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser11').item.json.x }}, {{ $('Coordinate Parser11').item.json.y }})\""
              },
              "id": "b373afc2-53a1-44a0-a0f9-38b9b491fdba",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                740
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                720
              ],
              "typeVersion": 1,
              "id": "35780dbe-31de-40e9-ac1a-a6830ae9f144",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "351ed899-3905-4188-84b2-47af4cd8d53c",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                1180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "5bea86a8-5d53-49a2-9b00-8636d630926f",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                1180
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "8ad1a76d-b1ea-4876-8557-f81c2b41376c",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                1180
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser13').item.json.x}}, {{ $('Coordinate Parser13').item.json.y }})\""
              },
              "id": "c321fed2-90bd-4085-92de-6ca8106222c4",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                1180
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                1160
              ],
              "typeVersion": 1,
              "id": "d04a72ed-a6e6-4dcb-a5ec-428a5fc340f3",
              "name": "Sticky Note11"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "883ae1e1-d106-45f0-bea8-a9db93d95fb5",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                1400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Vencimientos-CD.png', grayscale=False, confidence=0.9))\"\n"
              },
              "id": "c7948ac7-4bb8-4699-8067-29e6824f99ea",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                1400
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "aaba631d-bf0e-446f-ae50-12e1f5abc294",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                1400
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser14').item.json.x}}, {{ $('Coordinate Parser14').item.json.y }})\""
              },
              "id": "3a7cf872-f1c2-45cd-b407-6390322bfedc",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3640,
                1400
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                1380
              ],
              "typeVersion": 1,
              "id": "6c65541e-8b5c-4f47-8f31-88cf4489ff5a",
              "name": "Sticky Note12"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "ca28a938-ee11-40d5-9382-7c02b30c7446",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                1640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "bc7bc98f-8a77-417d-9d6e-012d37587c13",
              "name": "Locate On Screen18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                1640
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "7a61640e-b3ac-4956-bd60-27d646d0e439",
              "name": "Coordinate Parser17",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                1640
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser17').item.json.x }}, {{ $('Coordinate Parser17').item.json.y }})\""
              },
              "id": "339221d4-c842-4af8-8373-670132f66e73",
              "name": "Click18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                1640
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                1620
              ],
              "typeVersion": 1,
              "id": "1301d8e8-c3ef-4d75-9bc4-efa36872ea45",
              "name": "Sticky Note14"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                1840
              ],
              "typeVersion": 1,
              "id": "d14b83f0-d1d8-4d0e-a90c-7ea89557da9d",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'ctl00_ContentPlaceHolderMain_tbVencimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
              },
              "id": "24ea1acf-9b61-4946-af93-b05ce49773ad",
              "name": "Get Table - V",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                1860
              ]
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Función para calcular los días restantes hasta la fecha\nfunction calcularDiasRestantes(fechaStr) {\n  const [dia, mes, año] = fechaStr.split('/');  // Convertir la fecha a [día, mes, año]\n  const fecha = new Date(`${año}-${mes}-${dia}`);  // Crear el objeto Date (formato: YYYY-MM-DD)\n  const hoy = new Date();  // Fecha actual\n\n  // Calculamos la diferencia en milisegundos\n  const diferencia = fecha - hoy;\n  const diasRestantes = Math.floor(diferencia / (1000 * 60 * 60 * 24));\n\n  return diasRestantes;\n}\n\n// Mapear las posiciones a los encabezados correspondientes\nconst headers = [\n  \"DNI\", \"Nombre\", \"Estado\", \"DNI\", \"ExámenMédico\", \"PolizaAccPer\", \"PPolizaAccPe\", \"LicenciaCond\", \"IndDepSegSJS\", \"OCAsocPLSJS\", \"Incr-Aut-Mon\", \"IndGralSeg\", \"Anexo1BUNGE\", \"NotaSubCont.\"\n];\n\n// Establecer la salida como el array de objetos con la fecha comparada y días restantes\nreturn lines.map(line => {\n  // Procesamos la columna 'fila' de cada línea\n  const fila = line.fila;\n\n  // Arreglo para almacenar las fechas que estén a 7 días o menos\n  const fechasCercanas = [];\n\n  // Solo nos interesan las posiciones 5, 6 y 10 (fechas de los documentos)\n  const indicesFechas = [5, 6, 10];\n\n  // Recorremos las posiciones 5, 6 y 10 para verificar los días restantes\n  indicesFechas.forEach(index => {\n    const fecha = fila[index];\n\n    if (fecha !== 'n/a') {\n      const diasRestantes = calcularDiasRestantes(fecha);\n      if (diasRestantes <= 10 && diasRestantes >= 0) {\n        // El encabezado de la posición es el nombre del documento\n        const documento = headers[index];  // Obtenemos el nombre del encabezado correspondiente a la posición\n\n        fechasCercanas.push({\n          nombre: fila[1],  // Nombre de la persona en la posición 1\n          documento: documento,  // Nombre del encabezado (en vez de la fecha)\n          diasRestantes: diasRestantes  // Cuántos días faltan\n        });\n      }\n    }\n  });\n\n  // Si existen fechas cercanas (7 días o menos), devolvemos esa información como un objeto dentro de 'json'\n  if (fechasCercanas.length > 0) {\n    return { json: { fechasCercanas } };  // Aseguramos que 'json' sea un objeto\n  } else {\n    // Si no hay fechas cercanas, no devolvemos nada\n    return null;\n  }\n}).filter(line => line !== null);  // Filtramos las líneas que no contienen fechas cercanas"
              },
              "id": "6453cf9e-164b-4d9c-b954-239c345694fc",
              "name": "Divide html columns6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                1860
              ]
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
              },
              "id": "64dde8ad-e9df-454d-bcf6-31212151b7dc",
              "name": "OpenBrowserCmd1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2380,
                80
              ],
              "alwaysOutputData": false,
              "executeOnce": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "="
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                3120,
                1860
              ],
              "id": "8b2c9dff-43d8-4521-92a2-acf78c35ac81",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Crear una única lista combinada de fechasCercanas\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Devolver un único item con json.fechasCercanas\nreturn [\n  {\n    json: {\n      fechasCercanas: todasLasFechas\n    }\n  }\n];"
              },
              "id": "ec72a2e7-91f3-4710-aef6-3a462a57c077",
              "name": "Divide html columns1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3620,
                1860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';import time; time.sleep(4); print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6) is not None)\""
              },
              "id": "5e0562cd-4372-4866-93b0-26373811d16b",
              "name": "Locate On Screen19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4080,
                1420
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6d032dad-66f7-4760-8421-7531ba564039",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                4240,
                1420
              ],
              "id": "82132845-0347-45ae-a0cf-a9c06c943820",
              "name": "If1"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                2520,
                80
              ],
              "id": "0d617f79-4cf8-4a70-b13d-5a496d79616e",
              "name": "Edit Fields3"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com, a.benitez@treeingenieria.com, administracion@treeingenieria.com",
                "subject": "BOT - Proximos Vencimientos - T6",
                "emailType": "text",
                "message": "={{ $json.resumenFechas }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                3940,
                1860
              ],
              "id": "31a655f5-0395-47fe-82a1-3be1d73cce31",
              "name": "Gmail1",
              "webhookId": "6bc2c596-6b0a-4077-9a64-a43f3b27b4d7",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Combinar y reemplazar documentos\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Convertir en texto legible\nlet resumen = 'Fechas cercanas:\\n\\n';\n\nfor (const fecha of todasLasFechas) {\n  resumen += `👤 ${fecha.nombre}\\n📄 ${fecha.documento}\\n📅 En ${fecha.diasRestantes} días\\n\\n`;\n}\n\nreturn [\n  {\n    json: {\n      resumenFechas: resumen.trim()\n    }\n  }\n];"
              },
              "id": "afddc1e2-d861-4a15-ba68-522d9bf7921a",
              "name": "Divide html columns3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3780,
                1860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "aaf45272-5107-451c-a365-a9c46f67c480",
              "name": "Click19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4080,
                1860
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                300,
                80
              ],
              "id": "43f4e9f1-f1aa-4510-bc31-77851dab1ac6",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "19058f0c-e9fa-4216-bdda-b3b95de9c5db",
              "name": "Save Screenshot18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-BUNGE-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "cee8a31b-0245-4d37-bc0e-606b8c76fb89",
              "name": "Locate On Screen20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3260,
                960
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "15295f11-803a-4d66-a445-6d32ab9e72e1",
              "name": "Coordinate Parser18",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3420,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser18').item.json.x }}, {{ $('Coordinate Parser18').item.json.y }})\""
              },
              "id": "66c6b1ae-fce6-4e40-98d5-797cf92ce0de",
              "name": "Click20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3560,
                960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## De Bunge a T6\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                940
              ],
              "typeVersion": 1,
              "id": "eaf17a6c-68f0-4285-b820-4523d1569f97",
              "name": "Sticky Note18"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "a7c1ce31-e81a-48bb-98c7-51c6ed63fe8b",
              "name": "Save Screenshot19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3760,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Terminal 6-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "507357f9-f1b8-4453-b49b-72f9d64d68b1",
              "name": "Locate On Screen21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3900,
                960
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c75ea73b-5de6-424b-ab19-e7a153a48ec8",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                4060,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser19').item.json.x }}, {{ $('Coordinate Parser19').item.json.y }})\""
              },
              "id": "fdf63fa3-be66-4b23-8ef7-6a1a1232fac8",
              "name": "Click21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4200,
                960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "field": "weeks",
                      "triggerAtDay": [
                        3
                      ],
                      "triggerAtHour": 7,
                      "triggerAtMinute": null
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                -40,
                -80
              ],
              "id": "df5de2ec-b64e-424b-a1e6-225889e173ca",
              "name": "Schedule Trigger"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Locate On Screen3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser3": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot5": {
              "main": [
                [
                  {
                    "node": "Locate On Screen5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser5": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot7": {
              "main": [
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser7": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot8": {
              "main": [
                [
                  {
                    "node": "Locate On Screen8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser8": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser12": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Table - V1": {
              "main": [
                [
                  {
                    "node": "Divide html columns5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns5": {
              "main": [
                [
                  {
                    "node": "Divide html columns",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Get Table - V1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns": {
              "main": [
                [
                  {
                    "node": "Divide html columns2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Gmail": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns2": {
              "main": [
                [
                  {
                    "node": "Gmail",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Locate On Screen19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Locate On Screen18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen18": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser17": {
              "main": [
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click18": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Table - V": {
              "main": [
                [
                  {
                    "node": "Divide html columns6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns6": {
              "main": [
                [
                  {
                    "node": "Divide html columns1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd1": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Get Table - V",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns1": {
              "main": [
                [
                  {
                    "node": "Divide html columns3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen19": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields3": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Gmail1": {
              "main": [
                [
                  {
                    "node": "Click19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns3": {
              "main": [
                [
                  {
                    "node": "Gmail1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot18": {
              "main": [
                [
                  {
                    "node": "Locate On Screen20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen20": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser18": {
              "main": [
                [
                  {
                    "node": "Click20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click20": {
              "main": [
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot19": {
              "main": [
                [
                  {
                    "node": "Locate On Screen21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen21": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click21": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner",
            "executionTimeout": 600
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "8bb7f552-a523-489d-b440-cb22d9d332a0",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-03-11T15:03:44.162Z",
          "updatedAt": "2025-06-02T13:15:13.000Z",
          "id": "b4fSsxoSqjFjDgsj",
          "name": "N8N-LS-Polizas",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "3175cbe8-ff9c-49ea-b946-a35de56db154",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -1220,
                -220
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
                      "name": "Web Browser",
                      "value": "chrome",
                      "type": "string"
                    },
                    {
                      "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
                      "name": "URL",
                      "value": "https://portalasegurado.papps.lasegunda.com.ar",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "dcc483bd-83e4-4f48-a51f-b045641f0e64",
              "name": "Open to Browser",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -700,
                -280
              ],
              "notesInFlow": false,
              "disabled": true,
              "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
            },
            {
              "parameters": {
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://portalasegurado.papps.lasegunda.com.ar'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "91de8643-eab3-4fae-ae34-04bffa1d5bcf",
              "name": "Open Browser To",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -500,
                -280
              ],
              "notesInFlow": true,
              "notes": "New Window start \"\" {{ $json['Web Browser'] }} --new-window {{ $json.URL }}\n"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(5);from PIL import ImageGrab;direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\LS\\WorkingScreen.png')\""
              },
              "id": "f4d54c11-ed0e-4ca1-a0ec-06cb9626b7e9",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                -120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(1); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Usuario-LS.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "258aa286-00d0-4a33-9b9d-6d7a16220339",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                -120
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e4bb01f4-09db-4187-9e6a-cf6c2bce9244",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                -120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(0); pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x -130}}, {{ $('Coordinate Parser4').item.json.y}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario LS']}}')\""
              },
              "id": "31a21f79-070e-48a4-bdf3-c529e33891ee",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                -120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "32a3a75d-25f9-4404-b1cd-a34c3efd5975",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Contrasena-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "392f3037-3197-4573-ac0d-9c1a8c0fab79",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                100
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1337cf04-86dc-4086-ad90-e72043a79d4e",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }},{{ $json.y }})\""
              },
              "id": "4168047c-3efb-4e28-a0c5-3e9420ed2fc2",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Secreto y presiona\nIngresar**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                80
              ],
              "typeVersion": 1,
              "id": "e2d4f836-64c6-404c-a3d4-6661af8cf847",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "40b652d3-1084-45fb-b8f3-c75804baaef8",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -700,
                -120
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -880,
                -120
              ],
              "id": "a3a0fdde-6c3f-4eea-9016-e48d083c6a18",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $('Supabase').item.json['Usuario LS'] }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    },
                    {
                      "id": "64cfe917-6ae9-4347-8ac4-af0952f5a7eb",
                      "leftValue": "={{ $('Supabase').item.json['Secret LS'] }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    }
                  ],
                  "combinator": "or"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -500,
                -100
              ],
              "id": "98164fe2-55a5-41b4-a79f-8a353f96dbbc",
              "name": "If"
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -1220,
                -20
              ],
              "id": "3f260333-e324-4575-bd53-bb9dff054c34",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                -140
              ],
              "typeVersion": 1,
              "id": "a15e090e-4ef5-448c-bf40-26b4fdeebe86",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "content": "## Usuario/Clave Incorrecto\n**En caso de que el usuario\no la contrasena no funcionen\nlo suma a la lista de errores**",
                "height": 220,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                300
              ],
              "typeVersion": 1,
              "id": "e1dff930-b1ab-48e6-b45e-b21ef32170cd",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Usuario-Contrasena-Incorrecto.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "fe6918f2-f9ad-499c-a798-6189021a9e44",
              "name": "Click28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                360
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "e77ba076-daba-41f9-ae1b-53ae25ee60f2",
                      "name": "message",
                      "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Usuario/Contraseña Incorrecto",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                640,
                360
              ],
              "id": "83f54f63-b87a-4d0c-a025-52a10af47ae3",
              "name": "Edit Fields2"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; pyautogui.click({{ $json.x -130}},{{ $json.y +20}} ); time.sleep(3); pyautogui.typewrite(r'{{ $('Supabase').item.json['Secret LS']}}')\""
              },
              "id": "9e0c1661-8c4c-40b1-9979-39b714d423ff",
              "name": "Ingresa Secret",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                640,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Ingresar-LS.png', grayscale=True, confidence=0.6))\""
              },
              "id": "d08b0be5-df84-41e3-9f74-6017d15f31c6",
              "name": "Locate INICIAR",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                800,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e06d0fe2-3b79-41c6-8b89-6415e1a8e07b",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Bien-Asegurado-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "c4721a06-46ca-4cda-bf98-225f55945d7e",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                600
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "865d0edc-9e54-4f9f-a21f-88ee121a71d1",
              "name": "Coordinate Parser15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                100,
                820
              ]
            },
            {
              "parameters": {
                "content": "## Deslizo hacia abajo\n**Busca el Dropdown\nBien asegurado\ny lo presiona** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                560
              ],
              "typeVersion": 1,
              "id": "99999687-082d-4266-b2fb-4cac930d7b8e",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "286813c4-e525-4223-8f3b-f2aa75a84a08",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                820
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "40f3aaec-d9df-42fe-9d86-caeb27fbd266",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                600
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y +30}})\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                820
              ],
              "id": "e3388a28-2e1c-4053-a874-4afcb1efd2d7",
              "name": "Execute Command2",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "57143238-97a9-46ad-b43f-0742d15cfe2f",
              "name": "Coordinate Parser16",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                860,
                820
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(0); pyautogui.scroll(-500)\""
              },
              "id": "686affe5-d1bf-4c3f-9a8b-3a74f785bc05",
              "name": "Scroll",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                600
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion Dropdown\n**Selecciona colectivo 24hs** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                780
              ],
              "typeVersion": 1,
              "id": "5423009b-df36-43de-908b-25bb7be04bc5",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a5c52bc8-a7ea-41c3-85f5-07e811ca293e",
              "name": "Coordinate Parser17",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                280,
                1020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "331246aa-874d-4e66-ae61-c5f677a4581e",
              "name": "Click24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1020
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Tipo-Documento-LS.png', grayscale=True, confidence=0.6))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1020
              ],
              "id": "8612053a-6716-4dd2-bd6a-032a5eb99f5b",
              "name": "Execute Command3",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "bb24efc0-3c8e-4eb4-bb5c-281654cefbde",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                1020
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1b846794-5d16-41ac-8436-1cf0279c87c5",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                860,
                1020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Segundo Dropdown\n**Selecciona tipo\ny copia polisa** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1000
              ],
              "typeVersion": 1,
              "id": "f004715e-0a7f-491b-9830-418daf4219aa",
              "name": "Sticky Note18"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b98f7ceb-2f0a-4279-9ad6-46d849a5d8ba",
              "name": "Coordinate Parser20",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                280,
                1240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "1a726923-7051-4bf6-85aa-246c4f8c9b4a",
              "name": "Click25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Imprimir-LS.png', grayscale=True, confidence=0.8))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1240
              ],
              "id": "f46f8332-1f4e-4d81-a229-83a21655c85a",
              "name": "Execute Command5",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Boton Imprimir\n**Presiona Imprimir** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1220
              ],
              "typeVersion": 1,
              "id": "e579d585-06f5-40b3-90ab-04e6c292d382",
              "name": "Sticky Note19"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "fb27100e-2b21-40a0-9178-8a6599e70e94",
              "name": "Save Screenshot15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1480
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "826fff6f-1844-4f50-8f58-5adbcb80f0c3",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                1480
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "8ee469d1-e275-42e9-a002-80e81aa55cbb",
              "name": "Coordinate Parser21",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                1480
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "06f58497-42b5-4056-a903-f5aa492bed5e",
              "name": "Click29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1480
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Descarga\n**Busca y presiona el \nbotón de descarga**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1440
              ],
              "typeVersion": 1,
              "id": "1b78af1f-fa05-427f-b5db-a40ae93e7541",
              "name": "Sticky Note20"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4);img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "b8b2180e-64d2-49dd-9019-d0efef13e5ce",
              "name": "Save Screenshot16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Barra-Guardar-Nombre.png', grayscale=True, confidence=0.8))\""
              },
              "id": "1c1ccf15-cd4e-4ca9-93bd-50fa41b5bd3f",
              "name": "Locate On Screen16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                1680
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "27e656f1-46be-441a-ba62-26909c37f764",
              "name": "Coordinate Parser22",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                1680
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; import time; from datetime import datetime;locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8'); current_date = datetime.now(); current_date = datetime.now();year=current_date.strftime('%Y');mesdirec = current_date.strftime('%m - %B %Y'); mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize());nombre= '{{ $('Loop Over Items').item.json.Nombre }}'; pyautogui.doubleClick({{ $json.x +80}}, {{ $json.y -10}}); pyautogui.typewrite(['backspace']); time.sleep(2); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaLS-{nombre}-{mesdirec}.pdf', interval=0.01)\""
              },
              "id": "ee1f6032-ea1b-4139-8b26-f2d6ff4f6e1f",
              "name": "Click30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1660
              ],
              "typeVersion": 1,
              "id": "45427902-55c2-4aa3-a8ed-35a2f330cfda",
              "name": "Sticky Note21"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "a9ee632c-12bd-42d1-bcac-f256d7631183",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                1900
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "19aaa979-1216-46bb-a5f1-9501ed08b225",
              "name": "Locate On Screen17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                1900
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "aa05c7fa-8f84-484e-9068-87f4df9d1d5e",
              "name": "Coordinate Parser23",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                1900
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser23').item.json.x }}, {{ $('Coordinate Parser23').item.json.y }})\""
              },
              "id": "cd4fd8f2-d3f4-4dc6-84ea-98fc4a3f08ff",
              "name": "Click31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1880
              ],
              "typeVersion": 1,
              "id": "eebea585-1f2f-4005-ad7a-b95428736d77",
              "name": "Sticky Note22"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "b820783d-efab-474c-a2d1-236f25cd799f",
              "name": "Save Screenshot18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                2560
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b93a014b-bc7e-4835-867d-91987d8be94c",
              "name": "Coordinate Parser24",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                2560
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math; reference_point = ({{ $json.x +50}}, {{ $json.y}});direc = '{{$('Edit Fields').item.json.direc}}'; matches = list(pyautogui.locateAllOnScreen(fr'{direc}/.n8n\\\\Screenshots\\\\Boton-Close.png')); closest_match = min(matches, key=lambda match: math.sqrt((pyautogui.center(match)[0] - reference_point[0])**2 + (pyautogui.center(match)[1] - reference_point[1])**2)); pyautogui.click(pyautogui.center(closest_match))\""
              },
              "id": "9473be8d-88dd-486c-8b67-f5cfa0a1179f",
              "name": "Click32",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2560
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar pestañas\n**Cierra la pestaña \nFormularios** ",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2540
              ],
              "typeVersion": 1,
              "id": "820b2d76-1bd6-4f1b-9044-e0f82234e412",
              "name": "Sticky Note23"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "30736153-fe9b-415a-871b-de057c35fb53",
              "name": "Save Screenshot19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                4560
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\LS\\\\Boton-Perfil-LS.png', grayscale=True, confidence=0.3))\""
              },
              "id": "dcbd5edd-8c41-4383-9923-67c8fc0c5d80",
              "name": "Locate On Screen19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                4560
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "70fdf228-8b22-4543-a772-c9b9a65d9ef8",
              "name": "Coordinate Parser25",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                4560
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2); pyautogui.click(1735, 120)\""
              },
              "id": "cc3fd3f3-65e6-4c56-9ea5-071de94d2541",
              "name": "Click33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4560
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Presiona el logo de \nPerrfil en ARCA**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4540
              ],
              "typeVersion": 1,
              "id": "9a70b570-39ca-4844-a22c-52e7952b4216",
              "name": "Sticky Note24"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "b7c7e14f-0072-4162-a3eb-e3f1d2a320ec",
              "name": "Save Screenshot20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                4780
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\\\Screenshots\\\\LS\\\\Boton-Cerrarsesion-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "7a7aff02-b157-4615-a42c-69e2306e4327",
              "name": "Locate On Screen20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                4780
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d850f155-80c2-497a-86c8-efb6acc904dc",
              "name": "Coordinate Parser26",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                4780
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
              },
              "id": "569d7323-3f56-49d9-a8e2-2cdd47a6e5cf",
              "name": "Click34",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Selecciona la opción \nCerrar Sesión**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4760
              ],
              "typeVersion": 1,
              "id": "efc5394b-2d03-4c15-b1ae-e408a64f2606",
              "name": "Sticky Note25"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "438dd5f2-2873-4f76-9dfc-a1ea568eaba4",
              "name": "Coordinate Parser18",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                420,
                2780
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "d04b0dae-91ca-46ce-92f1-a895f37aa51d",
              "name": "Click26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Tipo-Documento2-LS.png', grayscale=True, confidence=0.6))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                260,
                2780
              ],
              "id": "e81310b9-e062-4e1b-8dee-0c35150c2a40",
              "name": "Execute Command",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "58e75631-a020-4024-aa9d-5cbd3377f365",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                580,
                2780
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "41dd2a39-92a6-4604-b9a3-02d4deca7c99",
              "name": "Coordinate Parser27",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                2780
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Segundo Dropdown\n**Selecciona tipo\ny copia polisa** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2760
              ],
              "typeVersion": 1,
              "id": "36555672-d290-4ad3-8a08-f31f9be79810",
              "name": "Sticky Note26"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "bc72fac2-9d31-4302-8c12-731b0d4c0166",
              "name": "Coordinate Parser28",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                420,
                3000
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "0e93740d-bad2-4c19-95e5-8cd8ea86767c",
              "name": "Click27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3000
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(1); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Imprimir-LS.png', grayscale=True, confidence=0.8))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3000
              ],
              "id": "ea0bb717-1b2c-41b3-b901-4e607dbc80f3",
              "name": "Execute Command7",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Boton Imprimir\n**Selecciona tipo\ny copia polisa** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2980
              ],
              "typeVersion": 1,
              "id": "d410dc67-c600-47d0-8a25-4d45e96645fb",
              "name": "Sticky Note27"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4);img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "558851d8-27d3-4d11-a952-90664f9ef1c5",
              "name": "Save Screenshot22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3460
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Barra-Guardar-Nombre.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "cd5a4b53-7906-4c6a-be26-fe0cefc5dca6",
              "name": "Locate On Screen21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                3460
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "cdb6ed7a-83ee-4931-a2e4-60611eb4661c",
              "name": "Coordinate Parser30",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3460
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; from datetime import datetime; locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now(); apellido = '{{ $('Loop Over Items').item.json.Apellido }}'; nombre = '{{ $('Loop Over Items').item.json.Nombre }}'; year=current_date.strftime('%Y'); mesdirec = current_date.strftime('%m - %B %Y'); mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); mes = current_date.strftime('%B'); pyautogui.doubleClick({{ $('Coordinate Parser22').item.json.x +80}}, {{ $('Coordinate Parser22').item.json.y -10}}); pyautogui.typewrite(['backspace']); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\LA SEGUNDA\\Poliza\\PolizaOriginal-{nombre}-{mesdirec}.pdf', interval=0.01)\""
              },
              "id": "047fe857-2dac-477c-8d26-3ef187bbae22",
              "name": "Click36",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3440
              ],
              "typeVersion": 1,
              "id": "c93964ee-9bcd-4ddc-89ce-503720cf468f",
              "name": "Sticky Note29"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "60872b77-6403-4699-b9e1-fbac6ce6eb44",
              "name": "Save Screenshot23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3680
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f1b99a96-6180-44af-a010-71af93a18fb2",
              "name": "Locate On Screen22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                3680
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "8e4d6bb6-ceb7-4c32-9908-28f7ccc30a0b",
              "name": "Coordinate Parser31",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3680
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser31').item.json.x }}, {{ $('Coordinate Parser31').item.json.y }})\""
              },
              "id": "220ecff8-7bdd-4c05-ab4b-805b620d019f",
              "name": "Click37",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3660
              ],
              "typeVersion": 1,
              "id": "10274063-5b39-48be-a5b9-e1e8e327bc3a",
              "name": "Sticky Note30"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "4d4627b7-38aa-4623-bfaf-74f648e65a44",
              "name": "Save Screenshot24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                4340
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ec706980-af3e-4ba1-ae34-a0624add7f7d",
              "name": "Coordinate Parser32",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                4340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "8d4c9f52-46fb-40b1-8e2c-ba54e2441ffe",
              "name": "Click38",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar pestañas\n**Cierra la pestaña \nFormularios** ",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4320
              ],
              "typeVersion": 1,
              "id": "87bcc932-9269-4397-ae5f-74f4a0fa882a",
              "name": "Sticky Note31"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Polisadegrupos-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "ecb183b5-72d7-49d4-a266-55d89009e6c5",
              "name": "Locate On Screen5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                680,
                820
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Colectivo24hs-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "8c3b1589-6cd4-4558-aaea-c99856c8904d",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                820
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.hotkey('ctrl', 'w')\""
              },
              "id": "a9b29ce8-6f27-4ed2-a967-9be778b5de28",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                520,
                4360
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Window-Documentosdelgrupo-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "5ae21b8a-5262-47be-97c9-87d86ac44e0e",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                4340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "23933247-156b-4891-a263-501f28a5ca6e",
              "name": "Save Screenshot25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                2780
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.hotkey('ctrl', 'w')\""
              },
              "id": "e42c163f-929d-47a2-882f-d1e47058348d",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                2560
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Window-Documentosdelgrupo-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "f80b99e9-1963-42f3-841f-11a63584279b",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                2560
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "b49ecf5d-af0f-46c9-a0a9-37acc6972a8e",
              "name": "Save Screenshot26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                2120
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a2776c30-5b71-4436-8d62-2ab48b0d54b4",
              "name": "Coordinate Parser33",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                2120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser33').item.json.x }}, {{ $('Coordinate Parser33').item.json.y }})\""
              },
              "id": "77741490-e711-488c-8b5a-453174105a50",
              "name": "Click41",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2100
              ],
              "typeVersion": 1,
              "id": "2609133a-948c-4522-b48f-9e646e6fb1b8",
              "name": "Sticky Note33"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "e7ba7f5c-5009-447d-919b-9bb2797ca457",
              "name": "Click42",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                2120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(5);img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "8e77e1e6-b864-487d-8b35-7ba06717262d",
              "name": "Save Screenshot27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3900
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e3abf7cf-fd03-41db-8373-039d6b8047d7",
              "name": "Coordinate Parser34",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3900
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser34').item.json.x }}, {{ $('Coordinate Parser34').item.json.y }})\""
              },
              "id": "7b5ad777-9c2a-44cf-ad12-fe4df5587b7d",
              "name": "Click43",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3880
              ],
              "typeVersion": 1,
              "id": "f819aeec-bea8-4b02-8528-1706c4e073e6",
              "name": "Sticky Note34"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "4de0ea74-9e2b-4dc8-8659-96762e59fc5b",
              "name": "Click44",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                3900
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "7532f61e-98b5-401e-b543-9cc905689975",
              "name": "Save Screenshot28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                2340
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a403889b-0cb6-4da9-b9c3-7137206c6896",
              "name": "Coordinate Parser35",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                2340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser35').item.json.x +100}}, {{ $('Coordinate Parser35').item.json.y }})\""
              },
              "id": "8c3e465a-28f7-45e8-a1b3-aa194c3cbe81",
              "name": "Click45",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## En caso de Loop\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2320
              ],
              "typeVersion": 1,
              "id": "dca43cbb-f99d-4fff-a1bd-ad7eb93c9ada",
              "name": "Sticky Note35"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\""
              },
              "id": "3e7c7005-c041-4cbe-bf5f-7b2b52477888",
              "name": "Click46",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                2340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "c4ff3121-5952-41d0-92b9-ebcb63f91d52",
              "name": "Save Screenshot29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                4120
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "bfa67438-2df8-4f62-aaac-db51618eb71e",
              "name": "Coordinate Parser36",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                4120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser36').item.json.x +100}}, {{ $('Coordinate Parser36').item.json.y }})\""
              },
              "id": "307cfe52-3e3c-4fa3-99c7-64a92ee702cf",
              "name": "Click47",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## En caso de Loop\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4100
              ],
              "typeVersion": 1,
              "id": "8178ae47-8f58-490a-8ca5-8a6910cbc411",
              "name": "Sticky Note36"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.8))\""
              },
              "id": "ff09e514-c0df-4c4a-8754-4bf08b25bee7",
              "name": "Click48",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                460,
                4120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Copia-Polisa-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "35c38595-5cbb-4c71-848d-3312c285d16d",
              "name": "Click60",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                680,
                1020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Copia-Polisa-Original-LS.png', grayscale=True, confidence=0.8))\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                740,
                2780
              ],
              "id": "191690de-60e6-40fc-bde3-73b6f4d8b369",
              "name": "Execute Command6",
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}/.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "24ac11f1-4a45-427d-89fc-5048a85205a3",
              "name": "Save Screenshot21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                3240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Boton-Descargar-LS.png', grayscale=True, confidence=0.8))\""
              },
              "id": "8b894706-6639-44ca-afb3-157607bd03a2",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                3240
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3c8d78ef-07b0-48d2-bc57-90ee744a9ebe",
              "name": "Coordinate Parser29",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "7d55bf4e-c376-4d0d-8c39-bbf4219aedcd",
              "name": "Click35",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Descarga\n**Busca y presiona el \nbotón de descarga**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3200
              ],
              "typeVersion": 1,
              "id": "8ef5cc66-d62a-4ea0-8c92-e387ebef5c27",
              "name": "Sticky Note28"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "0d5d32a6-2424-4ad1-826a-79d4421e063b",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -320,
                -120
              ],
              "id": "b7f598db-7b7c-4502-a728-b1f84b0db497",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1020,
                -120
              ],
              "id": "9a26d9a9-5ffc-4f55-ae1b-9aba952fba79",
              "name": "Supabase2",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -700,
                120
              ],
              "id": "662c2cd8-f22f-44c9-af06-43cf49f356c5",
              "name": "Supabase7",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase3').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                800,
                360
              ],
              "id": "8e723a4e-a2e6-4c91-bd73-24cbfdaebd95",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                500,
                360
              ],
              "id": "ea118862-f821-41d5-9bd5-1349e343be6d",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;import time; time.sleep(5); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}/.n8n\\Screenshots\\LS\\Contrasena-LS.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "9781a71b-b60e-43a0-8a30-83b2ba3c4f3b",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                360
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://portalasegurado.papps.lasegunda.com.ar'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "832bcbe4-3b89-4ff0-8a6b-31d49e16cc8f",
              "name": "Close&Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -700,
                -440
              ],
              "alwaysOutputData": true
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open to Browser": {
              "main": [
                [
                  {
                    "node": "Open Browser To",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open Browser To": {
              "main": [
                []
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Ingresa Secret",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Click28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click28": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields2": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ingresa Secret": {
              "main": [
                [
                  {
                    "node": "Locate INICIAR",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate INICIAR": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser15": {
              "main": [
                [
                  {
                    "node": "Execute Command2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Execute Command3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command2": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser16": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Scroll": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser17": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "Click60",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click24": {
              "main": [
                [
                  {
                    "node": "Execute Command5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser20": {
              "main": [
                [
                  {
                    "node": "Click25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click25": {
              "main": [
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot15": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser21": {
              "main": [
                [
                  {
                    "node": "Click29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click29": {
              "main": [
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot16": {
              "main": [
                [
                  {
                    "node": "Locate On Screen16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen16": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser22",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Coordinate Parser22": {
              "main": [
                [
                  {
                    "node": "Click30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click30": {
              "main": [
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Locate On Screen17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen17": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser23": {
              "main": [
                [
                  {
                    "node": "Click31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click31": {
              "main": [
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot18": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser24": {
              "main": [
                [
                  {
                    "node": "Click32",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click32": {
              "main": [
                [
                  {
                    "node": "Save Screenshot25",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot19": {
              "main": [
                [
                  {
                    "node": "Locate On Screen19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen19": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser25": {
              "main": [
                [
                  {
                    "node": "Click33",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click33": {
              "main": [
                [
                  {
                    "node": "Save Screenshot20",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot20": {
              "main": [
                [
                  {
                    "node": "Locate On Screen20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen20": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser26": {
              "main": [
                [
                  {
                    "node": "Click34",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click34": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser18": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click26": {
              "main": [
                [
                  {
                    "node": "Execute Command7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Execute Command6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser27": {
              "main": [
                [
                  {
                    "node": "Click26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser28": {
              "main": [
                [
                  {
                    "node": "Click27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click27": {
              "main": [
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Command7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot22": {
              "main": [
                [
                  {
                    "node": "Locate On Screen21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen21": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser30": {
              "main": [
                [
                  {
                    "node": "Click36",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click36": {
              "main": [
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot23": {
              "main": [
                [
                  {
                    "node": "Locate On Screen22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen22": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser31": {
              "main": [
                [
                  {
                    "node": "Click37",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click37": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot24": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser32": {
              "main": [
                [
                  {
                    "node": "Click38",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click38": {
              "main": [
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Locate On Screen5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser32",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot25": {
              "main": [
                [
                  {
                    "node": "Execute Command",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser24",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Save Screenshot25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot26": {
              "main": [
                [
                  {
                    "node": "Click42",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser33": {
              "main": [
                [
                  {
                    "node": "Click41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click41": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click42": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser33",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot27": {
              "main": [
                [
                  {
                    "node": "Click44",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser34": {
              "main": [
                [
                  {
                    "node": "Click43",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click43": {
              "main": [
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click44": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser34",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot28": {
              "main": [
                [
                  {
                    "node": "Click46",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser35": {
              "main": [
                [
                  {
                    "node": "Click45",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click45": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click46": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser35",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot29": {
              "main": [
                [
                  {
                    "node": "Click48",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser36": {
              "main": [
                [
                  {
                    "node": "Click47",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click47": {
              "main": [
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click48": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser36",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click60": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Execute Command6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot21": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser29": {
              "main": [
                [
                  {
                    "node": "Click35",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click35": {
              "main": [
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Edit Fields2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase7": {
              "main": [
                []
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "eef232bd-6edf-4c7a-97c1-8d4df7e1c09e",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-03-31T11:50:51.492Z",
          "updatedAt": "2025-05-09T12:39:57.000Z",
          "id": "bqGmONpzQmNdZohL",
          "name": "BOT-Manager",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                660,
                840
              ],
              "id": "1a4ba1bc-9fe1-4447-b0fa-d0bd8c8981f8",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "name": "Descarga",
                "description": "Call this workflow when you are ready to upload the documents",
                "workflowId": {
                  "__rl": true,
                  "value": "JQaUFfHy4jVE74HE",
                  "mode": "list",
                  "cachedResultName": "N8N-LS-CNRyLD"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                900,
                1080
              ],
              "id": "466ce60e-5339-4309-b8d7-ef2998c40906",
              "name": "Carga Bunge"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=Tu tarea es mantener actualizada la carga de documentanción.\nUSA UNA SOLA HERRAMIENTA A LA VEZ\nSI UNA DE ELLAS FALLA, DETENTE, no sigas sin toda la informacion necesaria, pero si si no existe un documento.\n* Tenés la herramienta \"Pendientes\" donde necesitas UNICAMENTE iniciar el RPA, sin mandarle nada.\nUna vez que tengas los documentos que se adeudan tu tarea es conseguirlos. Te interesan los documentos pago poliza acc personales, poliza acc personales e inscripcionautonomo. USA EXACTAMENTE ESTOS NOMBRES QUE TE DI!. SOLO TENES QUE AVANZAR CON LOS QUE VENCEN EN MENOS DE 10 DIAS.\n* Tenés la herramienta \"File existe\" para usarla tenés que mandarle los documentos pendientes si o si. De ella vas a recibir los que no existan,SI NO RECIBIS EL NOMBRE DE UN DOCUMENTO, ENTONCES EXISTE, SOLO IMPORTA LOS QUE TRAJISTE DE PENDIENTES, el resto no importa si le falta algo, no lo evalues.\nEn caso que algun documento no exista REALIZA SU DESCARGA.\n* Tenes la herramienta \"N8N-CNR-LD\" para descargar los documentos de CNR y Pago Poliza acc personales.\n* Tenes la herramienta \"PendRecepcion\" para ver que documentos ya se cargaron a planta y estan en proceso de aprobacion, estos no debemos volver a cargar, .\n* Tenes la herramienEN ESTE PROCESO TE DEVUELVEN SOLO LOS QUE ESTAN PENDIENTES DE APROBACIONta \"PendEnvio\" para ver que documentos tienen una solicitud de carga y asi saber cuales no debemos generar.\n* Tenés la herramienta \"Generar\" para poder generar las solicitudes de carga para los archivos que falten y no esten pendientes a recepcion. MANDA LA LISTA QUE CONSEGUISTE DE LA HERRAMINETA PENDIENTE, TANTO \"pagopolizaaccpersonales\" COMO TAMBIEN \"inscripcionautonomo\" ESCRIBILOS EXACTAMENTE ASI, exeptuando los que no existan, esten pendientes a recepcion o ya tengan una solicitud de carga generada. usa formato tipo {\n  \"query\": \"delpino nicolas abel, inscripcionautonomo, 20\\ndonaire pablo ruben, ppolizaaccpe, 12\\nferreyra julian andres, ppolizaaccpe, 18\"\n}\n \nEjecutalos en orden y 1 a la vez. Solo vas a ejecutarlos 1 vez así que manda todos los documentos a generar y todas las personas que lo necesitan JUNTOS.\nprimero pendientes, luego file exist, luego pendientes recepcion, luego pendientes envio y ultimo generar\nPOR ESTA VEZ PROBA LLAMAR AL GENERAR\nDa en el output la listas obtenidas de las diferentes hereamientas y como las analizaste.",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 1.7,
              "position": [
                800,
                840
              ],
              "id": "1305f18e-9fe6-446a-860e-77b39e286969",
              "name": "AI Agent1"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4o-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                740,
                1080
              ],
              "id": "8f7adcbe-6a62-48b5-b3b4-187095abd406",
              "name": "OpenAI Chat Model1",
              "credentials": {
                "openAiApi": {
                  "id": "qlIkWQVxXLADKIor",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "name": "Descarga",
                "description": "Call this workflow when you need to download CNR or Pago polisa acc personales documents for the personal, only when you are ask to upload the document and it doenst exist",
                "workflowId": {
                  "__rl": true,
                  "value": "JQaUFfHy4jVE74HE",
                  "mode": "list",
                  "cachedResultName": "N8N-LS-CNRyLD"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                840,
                640
              ],
              "id": "fac84e06-a92f-4570-923c-bde40404ee99",
              "name": "N8N-CNR-LS"
            },
            {
              "parameters": {
                "name": "PendientesEnvio",
                "description": "Call this tool to get a table of documents with generated solicitud to be uploaded in the site",
                "workflowId": {
                  "__rl": true,
                  "value": "QBnriGcCTfdJDwXM",
                  "mode": "list",
                  "cachedResultName": "Pendientes-Recepcion-ControlDocumentario copy"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                1100,
                500
              ],
              "id": "24cfce26-15b9-4291-893b-1f7e99080cd9",
              "name": "PendEnvio"
            },
            {
              "parameters": {
                "name": "Generar",
                "description": "Call this tool to create an upload document solicitud for the documents that have to be upload.\nSend the names of the personal that need their documents upload and the document in question",
                "workflowId": {
                  "__rl": true,
                  "value": "DbwBS0zefv26xaJX",
                  "mode": "list",
                  "cachedResultName": "GenerarControlDocumentario"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [
                    {
                      "id": "query",
                      "displayName": "query",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "canBeUsedToMatch": true,
                      "type": "string",
                      "removed": false
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                1200,
                500
              ],
              "id": "748f5831-d0de-4f0d-8dde-bc16ec7f0dcc",
              "name": "Generar"
            },
            {
              "parameters": {
                "name": "PendientesRecepcion",
                "description": "Call this tool to get a table of documents needed to be uploaded so our personal is able to work in diferent industrial sites",
                "workflowId": {
                  "__rl": true,
                  "value": "QBnriGcCTfdJDwXM",
                  "mode": "list",
                  "cachedResultName": "Pendientes-Recepcion-ControlDocumentario copy"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                1000,
                500
              ],
              "id": "0e4c7729-35ff-4d2f-9acc-bacdf2a3d1b6",
              "name": "PendRecep"
            },
            {
              "parameters": {
                "name": "Fileexist",
                "description": "Call this workflow when you know which documents need to be upload to check if they exist or we dont have them yet. \nAca usa los nombres PPolizaAccPe, PolizaAccPe, inscripcionautonomo",
                "workflowId": {
                  "__rl": true,
                  "value": "1aJKQtkbFifzy717",
                  "mode": "list",
                  "cachedResultName": "File exist"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                900,
                500
              ],
              "id": "84f33fa5-fa35-44e5-8804-140c5f199dc9",
              "name": "File exist"
            },
            {
              "parameters": {
                "name": "Pendientes",
                "description": "Call this tool to get a table of documents needed to be uploaded so our personal is able to work in diferent industrial sites",
                "workflowId": {
                  "__rl": true,
                  "value": "aVIs8uvnkVfzIrDd",
                  "mode": "list",
                  "cachedResultName": "Pendientes ControlDocumentario"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                800,
                500
              ],
              "id": "9fca7bea-d72f-4dc9-94b7-99b1a65a9249",
              "name": "Pendientes"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4o-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                640,
                500
              ],
              "id": "108bf57c-2f9c-425b-a13f-6bcf61f95c85",
              "name": "OpenAI Chat Model",
              "credentials": {
                "openAiApi": {
                  "id": "qlIkWQVxXLADKIor",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=Tu tarea es mantener actualizada la carga de documentanción.\nUSA UNA SOLA HERRAMIENTA A LA VEZ\nSI UNA DE ELLAS FALLA, DETENTE, no sigas sin toda la informacion necesaria, pero si si no existe un documento.\n* Tenés la herramienta \"Pendientes\" donde necesitas UNICAMENTE iniciar el RPA, sin mandarle nada.\nUna vez que tengas los documentos que se adeudan tu tarea es conseguirlos. Te interesan los documentos pago poliza acc personales, poliza acc personales e inscripcionautonomo. USA EXACTAMENTE ESTOS NOMBRES QUE TE DI!. SOLO TENES QUE AVANZAR CON LOS QUE VENCEN EN MENOS DE 10 DIAS.\n* Tenés la herramienta \"File existe\" para usarla tenés que mandarle los documentos pendientes si o si. De ella vas a recibir los que no existan,SI NO RECIBIS EL NOMBRE DE UN DOCUMENTO, ENTONCES EXISTE, SOLO IMPORTA LOS QUE TRAJISTE DE PENDIENTES, el resto no importa si le falta algo, no lo evalues.\nEn caso que algun documento no exista REALIZA SU DESCARGA.\n* Tenes la herramienta \"N8N-CNR-LD\" para descargar los documentos de CNR y Pago Poliza acc personales.\n* Tenes la herramienta \"PendRecepcion\" para ver que documentos ya se cargaron a planta y estan en proceso de aprobacion, estos no debemos volver a cargar, .\n* Tenes la herramienEN ESTE PROCESO TE DEVUELVEN SOLO LOS QUE ESTAN PENDIENTES DE APROBACIONta \"PendEnvio\" para ver que documentos tienen una solicitud de carga y asi saber cuales no debemos generar.\n* Tenés la herramienta \"Generar\" para poder generar las solicitudes de carga para los archivos que falten y no esten pendientes a recepcion. MANDA LA LISTA QUE CONSEGUISTE DE LA HERRAMINETA PENDIENTE, TANTO \"pagopolizaaccpersonales\" COMO TAMBIEN \"inscripcionautonomo\" ESCRIBILOS EXACTAMENTE ASI, exeptuando los que no existan, esten pendientes a recepcion o ya tengan una solicitud de carga generada. usa formato tipo {\n  \"query\": \"delpino nicolas abel, inscripcionautonomo, 20\\ndonaire pablo ruben, ppolizaaccpe, 12\\nferreyra julian andres, ppolizaaccpe, 18\"\n}\n \nEjecutalos en orden y 1 a la vez. Solo vas a ejecutarlos 1 vez así que manda todos los documentos a generar y todas las personas que lo necesitan JUNTOS.\nprimero pendientes, luego file exist, luego pendientes recepcion, luego pendientes envio y ultimo generar\nPOR ESTA VEZ PROBA LLAMAR AL GENERAR\nDa en el output la listas obtenidas de las diferentes hereamientas y como las analizaste.",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 1.7,
              "position": [
                780,
                200
              ],
              "id": "72b48b56-25b2-4984-8ae7-764d04181062",
              "name": "AI Agent"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Carga Bunge": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model1": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "PendEnvio": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "PendRecep": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "File exist": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Pendientes": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "61de022c-739a-4d66-8e01-6dd8685e29e4",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-05-20T13:58:32.775Z",
          "updatedAt": "2025-07-18T14:45:10.000Z",
          "id": "dC0EMtFTAfqS6CMv",
          "name": "Form-Carga",
          "active": true,
          "nodes": [
            {
              "parameters": {
                "formTitle": "Carga Pagos Monotributo",
                "formDescription": "Seleccione su nombre y aprete siguiente, luego podrá cargar su archivo.",
                "formFields": {
                  "values": [
                    {
                      "fieldLabel": "Nombre",
                      "fieldType": "dropdown",
                      "fieldOptions": {
                        "values": [
                          {
                            "option": "Pago Monotributo - DELPINO NICOLAS ABEL"
                          },
                          {
                            "option": "Pago Monotributo - ROBLEDO DANIEL"
                          },
                          {
                            "option": "Pago Monotributo - QUIROZ JAMES"
                          },
                          {
                            "option": "Pago Monotributo - FERREYRA JULIAN ANDRES"
                          },
                          {
                            "option": "Pago Monotributo - MARCELO GAMALERO"
                          },
                          {
                            "option": "Pago Monotributo - DONAIRE PABLO RUBEN"
                          },
                          {
                            "option": "Pago Monotributo - RUSSO FEDERICO MANUEL"
                          },
                          {
                            "option": "Pago Monotributo - CHIAVON GERARDO XAVIER"
                          },
                          {
                            "option": "Pago Monotributo - FERREYRA FACUNDO AMILCAR"
                          },
                          {
                            "option": "Pago Monotributo - CUNNINGHAM MARTIN"
                          },
                          {
                            "option": "Pago Monotributo - MASSA AGUSTIN"
                          },
                          {
                            "option": "Pago Monotributo - GOROSITO AGUSTIN"
                          },
                          {
                            "option": "Pago Monotributo - AGUSTIN BENITEZ"
                          },
                          {
                            "option": "Pago Monotributo - SCAGLIA ROMINA"
                          },
                          {
                            "option": "Pago Monotributo - VARGAS JUAN MANUEL"
                          },
                          {
                            "option": "Pago Monotributo - GONZALEZ TOMAS FRANCISCO"
                          },
                          {
                            "option": "Pago monotributo - DELPINO NICOLÁS ABEL"
                          },
                          {
                            "option": "Pago Monotributo - CESPEDES ESTEBAN"
                          },
                          {
                            "option": "Pago Monotributo - BONVECHI AGUSTIN ANDRES"
                          },
                          {
                            "option": "Pago Monotributo - CARRIZO JUAN MANUEL"
                          },
                          {
                            "option": "Pago Monotributo - LEUNDA NOELI"
                          },
                          {
                            "option": "Pago Monotributo - TERAN ALVARENGA SIMON"
                          },
                          {
                            "option": "Pago Monotributo - ACEVEDO JONATHAN"
                          },
                          {
                            "option": "Pago Monotributo - SOSO ALVARO"
                          },
                          {
                            "option": "Pago Monotributo - SAAVEDRA ELIAS"
                          },
                          {
                            "option": "Pago Monotributo - BRIAN EZEQUIEL VAN WELLE"
                          },
                          {
                            "option": "Pago Monotributo - SANTIAGO FOURCADE"
                          }
                        ]
                      },
                      "requiredField": true
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.formTrigger",
              "typeVersion": 2.2,
              "position": [
                380,
                -220
              ],
              "id": "74632823-527d-40e1-a06f-8507bd925959",
              "name": "On form submission",
              "webhookId": "f86d789b-9d69-4ba1-9c63-e15b94c6a3e0"
            },
            {
              "parameters": {
                "formFields": {
                  "values": [
                    {
                      "fieldLabel": "IMPORTANTE: SUBIR ÚNICAMENTE COMPROBANTES DE PAGO DEL MES CORRIENTE Y EN FORMATO PDF",
                      "fieldType": "file",
                      "multipleFiles": false,
                      "acceptFileTypes": "pdf, .pdf",
                      "requiredField": true
                    }
                  ]
                },
                "limitWaitTime": true,
                "resumeAmount": 5,
                "resumeUnit": "minutes",
                "options": {}
              },
              "type": "n8n-nodes-base.form",
              "typeVersion": 1,
              "position": [
                560,
                -220
              ],
              "id": "f1c75f06-7fc6-42a1-8c77-dd7ba4fe9212",
              "name": "Form",
              "webhookId": "e36d8db2-0d1d-4bb6-a74f-dfe986c90c52"
            },
            {
              "parameters": {
                "inputDataFieldName": "=IMPORTANTE__SUBIR__NICAMENTE_COMPROBANTES_DE_PAGO_DEL_MES_CORRIENTE_Y_EN_FORMATO_PDF",
                "name": "={{ $('On form submission').item.json.Nombre }}",
                "driveId": {
                  "__rl": true,
                  "mode": "list",
                  "value": "My Drive"
                },
                "folderId": {
                  "__rl": true,
                  "value": "={{ $('Google Drive3').item.json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                900,
                -200
              ],
              "id": "dbd3b0dd-0fc0-4c9d-892e-4e0603668859",
              "name": "Google Drive1",
              "retryOnFail": true,
              "maxTries": 5,
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import os; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now(); from datetime import datetime; mesdirec = current_date.strftime('%m - %B %Y'); year=current_date.strftime('%Y');stdout = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize()); mes = current_date.strftime('%B'); print(fr'{stdout}')\""
              },
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                80,
                -20
              ],
              "id": "3433ccee-3ee1-47e1-97f9-f58eed1dce82",
              "name": "Execute Command"
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "queryString": "={{ $('Execute Command').item.json.stdout }}",
                "limit": 1,
                "filter": {
                  "folderId": {
                    "__rl": true,
                    "value": "={{ $json.id }}",
                    "mode": "id"
                  }
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                400,
                -20
              ],
              "id": "2e5e367d-4870-4383-885e-e03eb84b04aa",
              "name": "Google Drive",
              "retryOnFail": true,
              "maxTries": 5,
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "queryString": "=ARCA",
                "limit": 1,
                "filter": {
                  "folderId": {
                    "__rl": true,
                    "value": "={{ $json.id }}",
                    "mode": "id"
                  }
                },
                "options": {
                  "fields": [
                    "id",
                    "name"
                  ]
                }
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                560,
                -20
              ],
              "id": "a6dbacb1-dd71-4179-ab5e-bb287dbb5fbe",
              "name": "Google Drive2",
              "retryOnFail": true,
              "maxTries": 5,
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "queryString": "=Pago Monotributo",
                "limit": 1,
                "filter": {
                  "folderId": {
                    "__rl": true,
                    "value": "={{ $json.id }}",
                    "mode": "id"
                  }
                },
                "options": {
                  "fields": [
                    "id",
                    "name"
                  ]
                }
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                720,
                -20
              ],
              "id": "44571cc8-9c5f-4371-bb88-f28b5b1c98a2",
              "name": "Google Drive3",
              "retryOnFail": true,
              "maxTries": 5,
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "queryString": "={{ new Date().getFullYear() }}",
                "limit": 1,
                "filter": {
                  "folderId": {
                    "__rl": true,
                    "value": "1a1zOitMYUE3_2FrKggj3qxQ_0B92izXx",
                    "mode": "id"
                  }
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                240,
                -20
              ],
              "id": "e273165a-54f4-420c-9758-9e7f6ee33975",
              "name": "Google Drive4",
              "retryOnFail": true,
              "maxTries": 5,
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "bqi6TTRaGBJIhFFV",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "mode": "combine",
                "combineBy": "combineAll",
                "options": {}
              },
              "type": "n8n-nodes-base.merge",
              "typeVersion": 3.1,
              "position": [
                760,
                -200
              ],
              "id": "6364673f-aa94-416a-838a-e82745c7ff81",
              "name": "Merge"
            }
          ],
          "connections": {
            "On form submission": {
              "main": [
                [
                  {
                    "node": "Form",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Form": {
              "main": [
                [
                  {
                    "node": "Execute Command",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Merge",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Command": {
              "main": [
                [
                  {
                    "node": "Google Drive4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive": {
              "main": [
                [
                  {
                    "node": "Google Drive2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive2": {
              "main": [
                [
                  {
                    "node": "Google Drive3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive3": {
              "main": [
                [
                  {
                    "node": "Merge",
                    "type": "main",
                    "index": 1
                  }
                ]
              ]
            },
            "Google Drive4": {
              "main": [
                [
                  {
                    "node": "Google Drive",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Google Drive1": {
              "main": [
                []
              ]
            },
            "Merge": {
              "main": [
                [
                  {
                    "node": "Google Drive1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "callerPolicy": "workflowsFromSameOwner",
            "executionTimeout": 600
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {
            "On form submission": [
              {
                "json": {
                  "Nombre": "Pago Monotributo - GONZZALES TOMAS",
                  "submittedAt": "2025-07-14T06:56:47.177-04:00",
                  "formMode": "production"
                }
              }
            ]
          },
          "versionId": "5f94cfbb-4bcb-448e-8df2-9b7bee2b5dd6",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-02-25T17:19:07.513Z",
          "updatedAt": "2025-06-02T13:31:30.000Z",
          "id": "dYVcl9OY8baVLRcL",
          "name": "N8N-Constancia-ARCA",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "555f2ff8-e3d8-46f7-a6d9-05f2aa3ef6bf",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -1280,
                -80
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
                      "name": "Web Browser",
                      "value": "chrome",
                      "type": "string"
                    },
                    {
                      "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
                      "name": "URL",
                      "value": "https://auth.afip.gob.ar/contribuyente_/login.xhtml",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "a3113264-26b8-4b0e-a202-2a0c48935184",
              "name": "Open to Browser",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -720,
                -260
              ],
              "notesInFlow": false,
              "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
            },
            {
              "parameters": {
                "command": "=start {{ $json['Web Browser'] }} {{ $json.URL }}"
              },
              "id": "749ca9d4-abff-4bb6-99aa-f55a868288b4",
              "name": "Open Browser To",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -520,
                -260
              ],
              "notesInFlow": true,
              "notes": "New Window start \"\" {{ $json['Web Browser'] }} --new-window {{ $json.URL }}\n"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Pantalla-Inicio.png')\""
              },
              "id": "b81a2cbd-eb2b-4fee-a4ad-a6b6132972f9",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                -120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\\\.n8n\\\\Screenshots\\\\LookUp.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "003c25d4-93d8-4011-8d3f-06602c809e50",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                -120
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error(\"Invalid input format\");\n}\n"
              },
              "id": "900509a1-2969-4bdf-b6e8-fb1d4e789f90",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                480,
                -120
              ],
              "alwaysOutputData": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y +45}})\" "
              },
              "id": "604573e2-0ac1-40c4-90e7-b197e2bbd51c",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                -120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x -130}}, {{ $('Coordinate Parser4').item.json.y -20}}); pyautogui.typewrite('{{ $('Supabase').item.json['Usuario AR']}}')\""
              },
              "id": "6552298b-68e1-4733-ae13-96b7e464a6c5",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                -120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "a3731e26-a541-40af-b9fc-483dcd645936",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Inicio-1.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "ef923e92-aaab-4ee5-b0eb-9cb345335a63",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                100
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9a967027-0767-49af-9aa0-7ef5e215e6d4",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                480,
                100
              ],
              "alwaysOutputData": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser').item.json.x }}, {{ $('Coordinate Parser').item.json.y}})\" "
              },
              "id": "4cface7f-6110-41fc-b85d-5255d132a618",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click(958, 410); pyautogui.typewrite(r'{{ $('If').item.json['Secret AR'] }}')\""
              },
              "id": "b2d42d08-973b-4d57-84a4-1034ee93c45c",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                100
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "e93f7f9d-5667-477a-b2ad-46bd6f6c1c37",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c24880a4-ab41-4c9f-a919-e35a2aa314a2",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                740,
                1240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.press('down'); pyautogui.press('enter')\""
              },
              "id": "ee6bb3ad-db81-4219-a0b4-5088ee5c158f",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click(958, 410); pyautogui.typewrite('Monotributo adhes')\""
              },
              "id": "742b700b-c90a-41ae-86f4-50daaa676c73",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                920,
                1240
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "914ce4b2-efba-4275-9704-8a5a3b216c07",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time;direc = '{{$('Edit Fields').item.json.direc}}'; time.sleep(2);img = ImageGrab.grab(); img.save(fr'{direc}\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "fee29d91-8ddd-4b89-84ac-8e6dc1494a18",
              "name": "Save Screenshot5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1880
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9133c5eb-79dc-40a5-990c-a2545e75058f",
              "name": "Coordinate Parser5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                920,
                1880
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "efd7ba7a-757a-4857-9c22-5b8c9a297c26",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Barra de Busqueda\n**Escribe monotributo en la\n barra de busqueda y entra** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1200
              ],
              "typeVersion": 1,
              "id": "de021589-b8ad-4ec1-a123-0f076bb30082",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "content": "## Submenu Constancia\n**Busca el botón \nConstancia y entra al submenú** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1420
              ],
              "typeVersion": 1,
              "id": "9c00acb6-d82f-4789-9f93-7ea947b087eb",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "content": "## Boton Constancia\n**Busca y presiona el \nsegundo botón Constancia**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1640
              ],
              "typeVersion": 1,
              "id": "2c33cbe8-ab19-423d-8f91-4df1d346478e",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "content": "## Imprimir Pantalla\n**Presiona el botón \nImprimir Pantalla**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                1860
              ],
              "typeVersion": 1,
              "id": "030e36a1-1b21-49c1-afbf-5b1c468acc65",
              "name": "Sticky Note4"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Secreto**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                80
              ],
              "typeVersion": 1,
              "id": "c4538702-e66e-43c9-9cde-9a4037882269",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "dbd373c5-b03b-45e4-aa7b-46800093ace2",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2820
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Imprimir.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "21df185c-6ec1-4c0d-990e-4c85a9754fa3",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                2820
              ],
              "retryOnFail": true,
              "alwaysOutputData": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "25a38719-b2f3-43ec-afa0-92639bcb4f88",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                2820
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;import datetime; import time; time.sleep(4); pyautogui.click({{$json.x}}, {{$json.y}})\""
              },
              "id": "97ddb209-5a26-4165-b90b-375d92c507e0",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2820
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Imprimir \n**Presiona el botón Imprimir \nen el Pop-Up que se genera \nal presionar Imprimir Pantalla**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2800
              ],
              "typeVersion": 1,
              "id": "85e68ab2-1260-4e4e-b463-e22c3f4f54fb",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(4);img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "24e27cb5-12db-46cc-9cd9-2ad2359f3b96",
              "name": "Save Screenshot8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3040
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Barra-Guardar-Nombre.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "66c1a892-e581-48d7-9b4b-49fafdcc22be",
              "name": "Locate On Screen8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3040
              ],
              "retryOnFail": true,
              "alwaysOutputData": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f777b5e7-9764-4ced-8622-4a0742546f5f",
              "name": "Coordinate Parser8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                3040
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale;from datetime import datetime;locale.setlocale(locale.LC_TIME, 'es_ES'); current_date = datetime.now(); current_date = datetime.now();year=current_date.strftime('%Y');mesdirec = current_date.strftime('%m - %B %Y'); mesdirec = mesdirec.replace(mesdirec.split(' - ')[1], mesdirec.split(' - ')[1].capitalize());nombre= '{{ $('Loop Over Items').item.json.Nombre }}';pyautogui.doubleClick({{ $('Coordinate Parser8').item.json.x+80}}, {{ $('Coordinate Parser8').item.json.y }});import time; time.sleep(4); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{year}\\{mesdirec}\\ARCA\\Inscripcion Autonomo Monotributo\\Inscripcion Autonomo Monotributo-{nombre}-{mesdirec}.pdf')\""
              },
              "id": "6d5e9c02-bba2-4605-b3a3-dcd81a6296b8",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3040
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Dirección\n**Ingresa la dirección \ndonde se va a guardar \nel archivo**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3020
              ],
              "typeVersion": 1,
              "id": "ac62282e-c4f5-43bc-99fc-3bc176093634",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "76271901-34fb-45c1-9774-f8dee13c96b1",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -720,
                -100
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -920,
                -160
              ],
              "id": "206ed2ac-43bb-41a5-872b-e4115fb18c12",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "273ac429-9526-42bf-860a-3de6ecdb5965",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3920
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ARCA\\WindowFormulariodeImpresion.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "24aad463-017e-4c01-b2da-b05746e6d005",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3920
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "cd0acffb-5c78-4b9d-8a31-c6941b2c6dd1",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                3920
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "f1a81434-2bbb-47cd-88ef-710463f73ed1",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3920
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar pestañas\n**Cierra la pestaña \nFormularios** ",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3900
              ],
              "typeVersion": 1,
              "id": "f50e3efc-57b2-4d28-812d-127e73a6bee2",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "237fb7b1-95eb-4a45-b613-f2f88b842022",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                4360
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\Logo-Perfil.png', grayscale=True, confidence=0.7))\""
              },
              "id": "b524e748-07a4-4d15-9469-ba329fe6a76b",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                4360
              ],
              "retryOnFail": true,
              "alwaysOutputData": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "24ed1fe6-1b60-486e-a01b-078dc2d0f5d6",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                4360
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
              },
              "id": "058fc9d5-1d85-41da-9be3-a511311e420a",
              "name": "Click17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4360
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Presiona el logo de \nPerrfil en ARCA**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4340
              ],
              "typeVersion": 1,
              "id": "d26889e2-760e-43a1-b9ad-4add1b1f57a3",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "loose",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "5314cb79-8c92-4c1a-90e7-4156ca2a00b4",
                      "leftValue": "={{ $('Supabase').item.json['Usuario AR'] }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    },
                    {
                      "id": "64cfe917-6ae9-4347-8ac4-af0952f5a7eb",
                      "leftValue": "={{ $('Supabase').item.json['Secret AR'] }}",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "notEquals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "looseTypeValidation": true,
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -520,
                -100
              ],
              "id": "180a9497-36f0-4494-8658-999629228c5a",
              "name": "If"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "b724f411-4009-462b-8ab5-4d102c92eb87",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3260
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "69b1989c-5a61-4ea8-8bd1-089fbe7404e3",
              "name": "Coordinate Parser12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                3260
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "ad88700e-2fed-4e6a-983f-4ee1a7888560",
              "name": "Click18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3260
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Guardar-Botón \n**Presiona el botón Guardar** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3240
              ],
              "typeVersion": 1,
              "id": "d05b82ff-64b3-4f94-99d9-8e9df4a17bf6",
              "name": "Sticky Note11"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "3a7ce2e5-d6d4-4bf6-b296-5bc7a1935943",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                4580
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\CerrarSesion-Perfil.png', grayscale=True, confidence=0.7))\""
              },
              "id": "4aaa1bd5-9231-4b8a-a1e4-756b7dd87582",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                4580
              ],
              "retryOnFail": true,
              "alwaysOutputData": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a54fad35-88f3-4e52-a62e-3a7cc1326f1f",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                4580
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y}})\""
              },
              "id": "f4fc97b0-438a-4c9e-a283-f0a3bfdf719c",
              "name": "Click19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4580
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar Sesion\n**Selecciona la opción \nCerrar Sesión**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4560
              ],
              "typeVersion": 1,
              "id": "6c682518-8fec-441b-97ab-d8ae6c1581df",
              "name": "Sticky Note12"
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -1280,
                -260
              ],
              "id": "1865d898-1e3a-438c-84df-feb33b4a8191",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "4708bc9f-8d9f-44b8-854c-5573b8f219bd",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                4140
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ARCA\\WindowARCA.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "b0da3124-bfa9-47da-9025-62fadc918e5e",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                4140
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "09880275-054e-491b-8475-f0bc9d362805",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                940,
                4140
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "806ab14e-3605-4c7d-9ea1-af8127ebc656",
              "name": "Click20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                4140
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Cerrar pestañas\n**Cierra pestaña de\n Constancias**",
                "height": 180,
                "width": 1460,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                4120
              ],
              "typeVersion": 1,
              "id": "99cf6dbd-0529-4f6d-9425-14588f48ed94",
              "name": "Sticky Note13"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Imprimir-Pantalla.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "178b372a-6d34-4afb-99c6-a907f33ade35",
              "name": "Click21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                420,
                1880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "caf3f86f-a365-4a55-9210-1df2cea2af22",
              "name": "Coordinate Parser15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                280,
                2120
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "97791a20-f151-4b16-85cc-9f26fa2a2038",
              "name": "Click22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                420,
                2120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Opcion-Monotributo.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "3e43691f-1b2d-4cfb-bda4-a40896219147",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                2340
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "68935a99-86a6-4c65-9403-0e0628dbd441",
              "name": "Coordinate Parser16",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                420,
                2340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "a5b9357a-ab0d-4b2f-bb25-e004e6395dc1",
              "name": "Click23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Consultar.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "0ce7ae01-11dc-40e7-8fa4-3cea8fdf5b9b",
              "name": "Locate On Screen16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                280,
                2560
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9562d3f8-af23-442f-a096-ddbc7a390fa9",
              "name": "Coordinate Parser17",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                460,
                2560
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "3559919e-7ed8-4809-9b54-98378de81749",
              "name": "Click24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                2560
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "340297c0-0bf8-45d7-ab59-6f9c6a5cd992",
              "name": "Save Screenshot15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "d8eebce0-b2e7-4ff1-bb53-633ec7257d7a",
              "name": "Save Screenshot16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2560
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ARCA\\Seleccion-Constancia.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "273f1a9a-a2e1-4dfb-abe3-199c3d4224a4",
              "name": "Click25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                2120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Imprimir Pantalla\n**Chequea la existencia del caso\nen el cual existen varios documentos\npara imprimir y selecciona la \nconstancia, es un caso que no \nsiempre se da por eso esta línea \nes mas larga, luego Presiona el botón\n Imprimir**",
                "height": 680,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                2080
              ],
              "typeVersion": 1,
              "id": "b82e1fe1-9e5c-4751-bd78-7ec9a724374c",
              "name": "Sticky Note14"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                -140
              ],
              "typeVersion": 1,
              "id": "2c080a8c-4799-400e-aa04-c099b0949be1",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "content": "## Cambio de Clave Error\n**En caso de solicitar \ncambio de clave, manda\nun mensaje avisando \nla situación**",
                "height": 260,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                600
              ],
              "typeVersion": 1,
              "id": "390f8e5f-e93e-47e6-8503-b3e47076d6f5",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\CambiarClave.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "96f7b585-6c23-4193-ac4f-25ff15cf4df9",
              "name": "Click26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "55bac5f5-1f99-4d6d-b9d5-3a9bd873f569",
              "name": "Coordinate Parser18",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                920,
                660
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "34f92fd8-3188-423d-8ada-fa5e16eee487",
              "name": "Click27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                660
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Cancelar-CambiarClave.png', grayscale=True, confidence=0.8))\""
              },
              "id": "f1af2c9f-e189-42c9-b098-86ad61062fdb",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                760,
                660
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "content": "## Usuario/Clave Incorrecto\n**En caso de que el usuario\no la contrasena no funcionen\nlo suma a la lista de errores**",
                "height": 260,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                300
              ],
              "typeVersion": 1,
              "id": "64fc82c6-e6cd-4ab8-aabd-425cf21afc6a",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\ClaveoUsuarioIncorrecto.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "5710e2f1-34ce-4ab8-ab44-459bd612d38f",
              "name": "Click28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                400
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "=Constancias",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "8cb6aa79-24ce-49a3-b123-3271e73ca049",
              "name": "Find OCR Word Input",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                460,
                1460
              ],
              "notesInFlow": false,
              "notes": "Optional parser that helps manage the output of local ocr"
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "b373dd4d-234c-434e-b9a9-b35fe57c1b9e",
              "name": "OCR Word",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                600,
                1460
              ],
              "notesInFlow": false,
              "onError": "continueRegularOutput",
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json;direc = '{{$('Edit Fields').item.json.direc}}'; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = fr'{direc}\\.n8n\\Screenshots\\ARCA\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(3).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 6'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "fb6892a9-13f5-4f3c-b437-b4a89dcb4a1c",
              "name": "Local OCR Tesseract",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                1460
              ],
              "notesInFlow": false,
              "onError": "continueRegularOutput",
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundPhrase.words[0].x }}, {{ $json.foundPhrase.words[0].y }})\""
              },
              "id": "f9f74a8b-6358-4eae-a152-78e59a7526f4",
              "name": "Click29",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; time.sleep(2);img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "cf3bbf21-9f9f-4d41-afc7-47217f8ee996",
              "name": "Save Screenshot7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1680
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ARCA\\Boton-Constancia-2.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "448fc45b-4240-454a-8dbc-e10b88358599",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                420,
                1680
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d1bf793f-896f-492c-84c7-9793ded60ded",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                900,
                1680
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\""
              },
              "id": "412f47ee-45c5-4aac-95ee-8660a95c81a4",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                1680
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "dab991d9-4c7f-42a5-b3e1-dc0bee83556a",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3260
              ],
              "retryOnFail": true,
              "alwaysOutputData": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "3f54cc69-1458-46dd-878e-0d875ff25fe9",
              "name": "Save Screenshot26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3480
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "089e1c69-7a5d-4c5a-8fc9-c1748cb3590d",
              "name": "Coordinate Parser33",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3480
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser33').item.json.x }}, {{ $('Coordinate Parser33').item.json.y }})\""
              },
              "id": "9ac90b70-cfb4-472c-9cb2-2d2ac7aa37c5",
              "name": "Click41",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3480
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Desea Remplazar?\n**Presiona el botón Si** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3460
              ],
              "typeVersion": 1,
              "id": "096a85e2-cf47-4067-a14f-608b36e2c95b",
              "name": "Sticky Note33"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\LS\\Si-LS.png', grayscale=True, confidence=0.7))\""
              },
              "id": "008fe236-9720-4bd5-8551-69ccfa1c0ed0",
              "name": "Click42",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3480
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "b09f7855-00c2-4bbb-bcf8-12c2b6663fe4",
              "name": "Save Screenshot28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                3700
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "06d273a7-b433-4cd1-b94e-d3d15ef15f8e",
              "name": "Coordinate Parser35",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                880,
                3700
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $('Coordinate Parser35').item.json.x +100}}, {{ $('Coordinate Parser35').item.json.y }})\""
              },
              "id": "2c626dfb-bfae-4087-b436-f961ab09c7cf",
              "name": "Click45",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                3700
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## En caso de Loop\n**Cancela hasta que siga** ",
                "height": 180,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                3680
              ],
              "typeVersion": 1,
              "id": "998f7907-6307-4efc-91b4-a67ea392bd8e",
              "name": "Sticky Note35"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Boton-Guardar-Guardar.png', grayscale=True, confidence=0.7))\""
              },
              "id": "098a4160-a93a-4228-b6fc-2a5015c37637",
              "name": "Click46",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                300,
                3700
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Captcha Error\n**Just that**",
                "height": 260,
                "width": 1460,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -200,
                900
              ],
              "typeVersion": 1,
              "id": "81a57a55-54bf-4f6d-aaea-a31f91d3502c",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; import time; time.sleep(8);print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Captcha-Incorrecto.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "8b78e416-8144-465c-86a8-078cd3fdeaa6",
              "name": "Click30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                120,
                1000
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab();direc = '{{$('Edit Fields').item.json.direc}}'; img.save(fr'{direc}\\.n8n\\\\Screenshots\\\\ARCA\\\\WorkingScreen.png')\""
              },
              "id": "122ef7de-dd54-44ff-920e-b32a73b98090",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1340,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\WindowARCA.png', grayscale=True, confidence=0.4))\"\n"
              },
              "id": "44003116-71ec-4881-9572-b3559bf80945",
              "name": "Locate On Screen17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1500,
                960
              ],
              "retryOnFail": true,
              "alwaysOutputData": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ce3b23ec-f85f-4a90-bfb0-cfaf4b8f7c8d",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1660,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui, math;direc = '{{$('Edit Fields').item.json.direc}}'; reference_point = ({{ $json.x +50}}, {{ $json.y}}); matches = list(pyautogui.locateAllOnScreen(fr'{direc}\\.n8n\\\\Screenshots\\\\Boton-Close.png')); closest_match = min(matches, key=lambda match: math.sqrt((pyautogui.center(match)[0] - reference_point[0])**2 + (pyautogui.center(match)[1] - reference_point[1])**2)); pyautogui.click(pyautogui.center(closest_match))\""
              },
              "id": "f314e997-4725-4489-beb9-76bdcc34482f",
              "name": "Click31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1800,
                960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
                      "name": "Web Browser",
                      "value": "chrome",
                      "type": "string"
                    },
                    {
                      "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
                      "name": "URL",
                      "value": "https://auth.afip.gob.ar/contribuyente_/login.xhtml",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "b0d7c786-d32b-4cd6-9e47-7f701cc2631f",
              "name": "Open to Browser1",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                1980,
                960
              ],
              "notesInFlow": false,
              "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
            },
            {
              "parameters": {
                "command": "=start {{ $json['Web Browser'] }} {{ $json.URL }}"
              },
              "id": "b4bf6c3c-8032-49e9-9dcc-c7b468f77614",
              "name": "Open Browser To1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2160,
                960
              ],
              "notesInFlow": true,
              "notes": "New Window start \"\" {{ $json['Web Browser'] }} --new-window {{ $json.URL }}\n"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ARCA\\Barra-Busqueda.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "850e4817-e819-4775-a256-07155c8af35f",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                420,
                1240
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -340,
                -120
              ],
              "id": "1254ba0e-860f-483b-b0bf-3ddbbef2d5ad",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -1060,
                -160
              ],
              "id": "145a0c8d-44c1-433d-b8f4-f68ae47ee73e",
              "name": "Supabase2",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase3').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                660,
                400
              ],
              "id": "4a8651ad-faa0-4398-8b44-c882018c5525",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Usuario/Contraseña Incorrecto",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                520,
                400
              ],
              "id": "91eb2f3e-b299-43c3-9bfc-87501f54240f",
              "name": "Edit Fields2"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                380,
                400
              ],
              "id": "e78e9613-3639-4ee8-9289-d733cd3aff43",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase6').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                660,
                980
              ],
              "id": "84935cb7-8229-4bef-a045-9384604271e5",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Captcha",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                520,
                980
              ],
              "id": "c50415c3-6ad6-4cbd-aae0-c3828cc98b1f",
              "name": "Edit Fields3"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                380,
                980
              ],
              "id": "0d582da8-825f-462a-9712-0b1d6b935e5a",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -720,
                120
              ],
              "id": "a0fd9035-a412-45e3-9b2b-2fab3f541349",
              "name": "Supabase7",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase9').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                600,
                660
              ],
              "id": "7abe7d59-7d27-4c8e-b422-8b3820b34638",
              "name": "Supabase8",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=Empleado: {{$('Loop Over Items').item.json['Nombre']}} - Error: Nesecita un cambio de contrasena",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                460,
                660
              ],
              "id": "cb1ad97d-25d6-4911-8f17-9b9197c21388",
              "name": "Edit Fields4"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                320,
                660
              ],
              "id": "550d8cdc-038f-47da-8bbd-fc5eae7e7ad6",
              "name": "Supabase9",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://auth.afip.gob.ar/contribuyente_/login.xhtml'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "b97ad18c-daab-4c75-a73e-6e1f8abb5b69",
              "name": "Close&Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -720,
                -400
              ],
              "alwaysOutputData": true
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open to Browser": {
              "main": [
                [
                  {
                    "node": "Open Browser To",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open Browser To": {
              "main": [
                []
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Click28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Local OCR Tesseract",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot5": {
              "main": [
                [
                  {
                    "node": "Click25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser5": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot8": {
              "main": [
                [
                  {
                    "node": "Locate On Screen8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser8": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click17": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser12": {
              "main": [
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click18": {
              "main": [
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click19": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click20": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click21": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser5",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Coordinate Parser15": {
              "main": [
                [
                  {
                    "node": "Click22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser16": {
              "main": [
                [
                  {
                    "node": "Click23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click22": {
              "main": [
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen16": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser17": {
              "main": [
                [
                  {
                    "node": "Click24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click23": {
              "main": [
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot15": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot16": {
              "main": [
                [
                  {
                    "node": "Locate On Screen16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click25": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click24": {
              "main": [
                [
                  {
                    "node": "Click21",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click26": {
              "main": [
                [
                  {
                    "node": "Supabase9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser18": {
              "main": [
                [
                  {
                    "node": "Click27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click27": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click28": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Find OCR Word Input": {
              "main": [
                [
                  {
                    "node": "OCR Word",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Word": {
              "main": [
                [
                  {
                    "node": "Click29",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract": {
              "main": [
                [
                  {
                    "node": "Find OCR Word Input",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click29": {
              "main": [
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot7": {
              "main": [
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot26": {
              "main": [
                [
                  {
                    "node": "Click42",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser33": {
              "main": [
                [
                  {
                    "node": "Click41",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click41": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click42": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser33",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot28": {
              "main": [
                [
                  {
                    "node": "Click46",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser35": {
              "main": [
                [
                  {
                    "node": "Click45",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click45": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click46": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser35",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click30": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Locate On Screen17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen17": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click31": {
              "main": [
                [
                  {
                    "node": "Open to Browser1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open to Browser1": {
              "main": [
                [
                  {
                    "node": "Open Browser To1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open Browser To1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields2": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Edit Fields2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields3": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields4": {
              "main": [
                [
                  {
                    "node": "Supabase8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase9": {
              "main": [
                [
                  {
                    "node": "Edit Fields4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase8": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "3cfe52ef-c9f2-43c3-a46d-8aa42ac3f90f",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-02-25T13:53:34.441Z",
          "updatedAt": "2025-02-25T17:46:32.000Z",
          "id": "fMgWtuKwJXtJedAE",
          "name": "Challenge Working",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "cbb41ab3-72da-488c-919b-fe000bc7c394",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -1180,
                340
              ]
            },
            {
              "parameters": {
                "command": "=start {{ $json['Web Browser'] }} {{ $json.URL }}"
              },
              "id": "b030364b-f974-4886-adf8-b8ee9ccd3418",
              "name": "Open Browser To1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -840,
                340
              ],
              "notesInFlow": true
            },
            {
              "parameters": {
                "operation": "html",
                "options": {}
              },
              "id": "abc4c869-b482-4491-a157-a938cc732dff",
              "name": "Extract from File",
              "type": "n8n-nodes-base.extractFromFile",
              "typeVersion": 1,
              "position": [
                -140,
                340
              ]
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "ba5de8e6-1df2-4816-bf6f-f29bc2dd4473",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                60,
                160
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6d5f9615-c1cd-4efa-8386-cb69a5f2574b",
                      "name": "Web Browser",
                      "value": "msedge",
                      "type": "string"
                    },
                    {
                      "id": "27b7a872-4ffe-4db1-beae-c364d274c8d0",
                      "name": "URL",
                      "value": "https://rpachallenge.com/",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "a201c987-4674-4168-8e26-9e5afff59546",
              "name": "Open to Browser",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -1020,
                340
              ],
              "notesInFlow": false,
              "notes": "#Browser names: Edge=msedge Chrome=chrome Firefox=firefox"
            },
            {
              "parameters": {
                "url": "https://rpachallenge.com/assets/downloadFiles/challenge.xlsx",
                "options": {
                  "response": {
                    "response": {
                      "responseFormat": "file"
                    }
                  }
                }
              },
              "id": "1f44a44c-1b0a-4eaa-baab-f542bff7a0a0",
              "name": "Get RPA Data",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -280,
                340
              ]
            },
            {
              "parameters": {
                "content": "## Email",
                "height": 343.0861018728989,
                "width": 1082.1595090310907
              },
              "id": "56c35394-cd41-4ea2-917a-151dbfc86292",
              "name": "Sticky Note8",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                380,
                260
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "0ad81de7-6df6-45f0-83b6-c31635d533d7",
              "name": "OCR Find Email & Parse",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                820,
                700
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "801762b3-17cf-43f2-8c2e-58dbf243c485",
              "name": "Add Values to coordinates",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                960,
                700
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['First Name'] }}')\""
              },
              "id": "146992b4-5057-44b5-b404-3adec159d11c",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1120,
                700
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## First Name\n",
                "height": 343.0861018728989,
                "width": 1077.5774118855604
              },
              "id": "8cbaf070-fd79-46e2-a7d5-c759078f5f08",
              "name": "Sticky Note9",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                380,
                620
              ]
            },
            {
              "parameters": {
                "content": "## Last Name\n\n",
                "height": 343.0861018728989,
                "width": 1087.8026955349853
              },
              "id": "a88c652a-32f9-4fe3-8673-5b130492122e",
              "name": "Sticky Note10",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                380,
                980
              ]
            },
            {
              "parameters": {
                "content": "## Company Name\n",
                "height": 343.0861018728989,
                "width": 1078.4475887120027
              },
              "id": "520acca0-949b-4035-b85e-3236467e074f",
              "name": "Sticky Note11",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                380,
                1320
              ]
            },
            {
              "parameters": {
                "content": "## Phone Number\n",
                "height": 343.0861018728989,
                "width": 1083.573208068673
              },
              "id": "f2384160-779d-4d50-bf43-8f5cad295e72",
              "name": "Sticky Note12",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                380,
                1660
              ]
            },
            {
              "parameters": {
                "content": "## Role In Company",
                "height": 343.0861018728989,
                "width": 1081.4584643355167
              },
              "id": "1195741c-6023-4cd1-9559-001242917d69",
              "name": "Sticky Note13",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                380,
                2020
              ]
            },
            {
              "parameters": {
                "content": "## Address",
                "height": 343.0861018728989,
                "width": 1072.999489402891
              },
              "id": "812a0df2-6011-4bf8-974f-6a0dfa2d6867",
              "name": "Sticky Note14",
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                380,
                2440
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "First Name",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "7b4eff92-053f-44fc-8360-f06a8dec9e9f",
              "name": "Edit Fields",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                660,
                700
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; img = ImageGrab.grab(); img.save(r'C:\\Users\\simon\\.n8n\\Screenshots\\MainScreen.png')\""
              },
              "id": "e59c702e-ed3f-45a2-82f6-b94cc747af43",
              "name": "Take Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                100,
                380
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = r'C:\\Users\\simon\\.n8n\\Screenshots\\MainScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(2).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 11'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "800f3bbf-f42b-446b-b29d-0f8920aee16d",
              "name": "OCR10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                240,
                380
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "dbade548-ba23-482c-b5aa-905d54ef856c",
              "name": "OCR Find Email & Parse7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                780,
                380
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "97968ea7-8c8a-4b9b-a492-11f4ef847c16",
              "name": "Add Values to coordinates7",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                940,
                380
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json.Email }}')\""
              },
              "id": "35a4ffaa-3b52-434e-9af9-8ed16378a3b7",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1100,
                380
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Email",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "c1ac8bfd-f9a7-433a-8932-e124b1b86be8",
              "name": "Edit Fields1",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                600,
                380
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "1ac74d01-796e-4ef5-86fe-e9e8fa22ed1d",
              "name": "OCR Find Email & Parse1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                800,
                1120
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "e0403b34-025b-4d0b-867f-34b3e25a4037",
              "name": "Add Values to coordinates1",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                940,
                1120
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Last Name",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "cebcac7b-061f-4373-a3d8-5adf5eebf7f8",
              "name": "Edit Fields2",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                660,
                1120
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "2a84c16c-62ff-4fc0-8ac9-5fe0ba91302c",
              "name": "OCR Find Email & Parse2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                820,
                1460
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "22d5fc66-cc8d-4eb1-b312-b4ed037f561d",
              "name": "Add Values to coordinates2",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                960,
                1460
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['Company Name'] }}')\""
              },
              "id": "c5ea0287-9aad-4853-ac69-abece00b8d23",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1140,
                1460
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Company Name",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "5dc6e81e-aa0c-4805-8c81-5e81fd3e449a",
              "name": "Edit Fields3",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                680,
                1460
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "8805b605-ffc9-42d5-903c-74689c9c9ff2",
              "name": "OCR Find Email & Parse3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                800,
                1840
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "f9c02891-315c-4734-abf3-2bc28f6ba5d6",
              "name": "Add Values to coordinates3",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                960,
                1840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['Phone Number'] }}')\""
              },
              "id": "0051b125-9955-4e0b-a7a9-921de6dbeed1",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1140,
                1840
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Phone Number",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "3883799f-75ba-475a-a17c-481a82715970",
              "name": "Edit Fields4",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                660,
                1840
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "060d113a-704a-492d-b531-0d59c5cc3521",
              "name": "OCR Find Email & Parse4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                800,
                2220
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "94763c60-9d14-4c54-b9c9-58f6e9da5b1d",
              "name": "Add Values to coordinates4",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                940,
                2220
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['Role in Company'] }}')\""
              },
              "id": "2294ccd6-da1e-458b-93b9-4357753e9f7d",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1120,
                2220
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Role In Company",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "0eefb495-2f8b-495c-b700-8226adcdf86c",
              "name": "Edit Fields5",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                660,
                2220
              ]
            },
            {
              "parameters": {
                "jsCode": "// Function to normalize text for case-insensitive comparison\nfunction normalizeText(text) {\n  return String(text).toLowerCase().trim();\n}\n\n// Function to check if a word matches at word boundaries\nfunction isWordBoundaryMatch(searchWord, textWord) {\n  const normalizedSearchWord = normalizeText(searchWord);\n  const normalizedTextWord = normalizeText(textWord);\n  \n  // Check if the search word is at the start of the text word\n  if (normalizedTextWord.startsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is at the end of the text word\n  if (normalizedTextWord.endsWith(normalizedSearchWord)) {\n    return true;\n  }\n  \n  // Check if the search word is a whole word within the text word\n  const regex = new RegExp(`\\\\b${normalizedSearchWord}\\\\b`);\n  return regex.test(normalizedTextWord);\n}\n\n// Function to calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Function to find words close to each other\nfunction findCloseWords(data, searchWords, maxDistance = 100) {\n  const normalizedSearchWords = searchWords.map(normalizeText);\n  const wordMatches = normalizedSearchWords.map(word => []);\n\n  // Find all matches for each search word\n  data.forEach(item => {\n    normalizedSearchWords.forEach((searchWord, index) => {\n      if (isWordBoundaryMatch(searchWord, item.text)) {\n        wordMatches[index].push(item);\n      }\n    });\n  });\n\n  // Find the best combination of matches\n  const combinations = cartesianProduct(wordMatches);\n  let bestMatch = null;\n  let minTotalDistance = Infinity;\n\n  combinations.forEach(combo => {\n    if (combo.every(item => item)) {\n      const totalDistance = calculateTotalDistance(combo);\n      if (totalDistance < minTotalDistance && totalDistance <= maxDistance * (combo.length - 1)) {\n        minTotalDistance = totalDistance;\n        bestMatch = combo;\n      }\n    }\n  });\n\n  return bestMatch;\n}\n\n// Helper function to calculate total distance between a set of words\nfunction calculateTotalDistance(words) {\n  let totalDistance = 0;\n  for (let i = 1; i < words.length; i++) {\n    totalDistance += distance(words[i-1].x, words[i-1].y, words[i].x, words[i].y);\n  }\n  return totalDistance;\n}\n\n// Helper function to generate cartesian product of arrays\nfunction cartesianProduct(arrays) {\n  return arrays.reduce((acc, array) => \n    acc.flatMap(x => array.map(y => [...x, y])),\n    [[]]\n  );\n}\n\n// Get the input from the previous node\nconst input = $input.all()[0].json;\n\n// The phrase we're searching for (accessed from the input)\nconst searchPhrase = input['Find Phrase'];\n\n// Maximum distance between words (adjust as needed)\nconst maxDistance = 100;\n\nlet parsedData, result;\n\ntry {\n  // Parse the OCR data from the stdout field\n  parsedData = JSON.parse(input.stdout);\n  const searchWords = searchPhrase.split(' ');\n  const foundItems = findCloseWords(parsedData, searchWords, maxDistance);\n  \n  if (foundItems) {\n    result = {\n      phrase: searchPhrase,\n      words: foundItems\n    };\n  } else {\n    result = { error: `Phrase \"${searchPhrase}\" not found in OCR results` };\n  }\n} catch (error) {\n  result = { error: 'Failed to parse OCR results or find phrase', details: error.message };\n}\n\nreturn {\n  json: {\n    foundPhrase: result\n  }\n};"
              },
              "id": "06635a11-2d64-442d-8288-55d9c61846fe",
              "name": "OCR Find Email & Parse5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                800,
                2620
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1d0c9069-5508-4905-ba7c-493d0fbbfb29",
                      "name": "foundWord.x",
                      "value": "={{ $json.foundPhrase.words[0].x+40 }}",
                      "type": "number"
                    },
                    {
                      "id": "c69d8e56-3060-4648-85d7-30b706ee9348",
                      "name": "foundWord.y",
                      "value": "={{ $json.foundPhrase.words[0].y+40 }}",
                      "type": "number"
                    }
                  ]
                },
                "options": {}
              },
              "id": "c6fd2f55-82c4-4057-afbb-c5bb1df62904",
              "name": "Add Values to coordinates5",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                960,
                2620
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json.Address }}')\""
              },
              "id": "4dc8bc92-a06b-4dea-b1d0-8719a2e9b18d",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1120,
                2620
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3daf3ec7-8025-458d-99d5-4ae8e8dced72",
                      "name": "Find Phrase",
                      "value": "Address",
                      "type": "string"
                    },
                    {
                      "id": "9a6e51c9-6c5b-4df1-acbc-3f4e70de4399",
                      "name": "stdout",
                      "value": "={{ $('OCR10').first().json.stdout }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "6d3a1a71-ef0a-4c5b-abce-ff953db61bf4",
              "name": "Edit Fields6",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                660,
                2620
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\Submit-Buttom.PNG', grayscale=False, confidence=0.85))\" #Make sure Pillow is installed Use r prefix so backslash is used as character"
              },
              "id": "adec7cc5-0802-4baa-85ca-760a4911a12f",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1520,
                2620
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\" "
              },
              "id": "94b45df5-9e51-435e-ade8-777bdbe44197",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1920,
                2620
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c086a884-6abb-4c65-b1e7-fd1df6733bad",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1740,
                2620
              ]
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "249db473-eafe-4b78-a962-1021367efd69",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -500,
                340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\simon\\.n8n\\Screenshots\\Start-Button.PNG', grayscale=False, confidence=0.85))\" #Make sure Pillow is installed Use r prefix so backslash is used as character"
              },
              "id": "c8eea726-faa2-40f8-a4b2-138a92001658",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -660,
                340
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.x }}, {{ $json.y }})\" "
              },
              "id": "1e0037f4-9b0f-41eb-a0da-be2b45265764",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -280,
                560
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; pyautogui.click({{ $json.foundWord.x }}, {{ $json.foundWord.y }}); pyautogui.typewrite('{{ $('Extract from File').item.json['Last Name '] }}')\""
              },
              "id": "1d9134f4-0d37-43ee-9be0-9770ba5f37b0",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1120,
                1120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                1040,
                180
              ],
              "id": "e2b5de5c-160f-489b-bb30-f8f15c290239",
              "name": "Sticky Note"
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                1260,
                180
              ],
              "id": "f9c40f60-30d1-4a2e-b264-13ccb2f9f73e",
              "name": "Sticky Note1"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Open to Browser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open Browser To1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Extract from File": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Open to Browser": {
              "main": [
                [
                  {
                    "node": "Open Browser To1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get RPA Data": {
              "main": [
                [
                  {
                    "node": "Extract from File",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Edit Fields2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Take Screenshot11": {
              "main": [
                [
                  {
                    "node": "OCR10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR10": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse7": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates7": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields1": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse1": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates1": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields2": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse2": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates2": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Edit Fields4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields3": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse3": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates3": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Edit Fields5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields4": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse4": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates4": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Edit Fields6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields5": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Find Email & Parse5": {
              "main": [
                [
                  {
                    "node": "Add Values to coordinates5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Values to coordinates5": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields6": {
              "main": [
                [
                  {
                    "node": "OCR Find Email & Parse5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Get RPA Data",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Take Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "93495ea9-7d86-44a5-be9c-c69fe9bf4191",
          "triggerCount": 0,
          "tags": [
            {
              "createdAt": "2025-02-25T13:53:03.729Z",
              "updatedAt": "2025-02-25T13:53:03.729Z",
              "id": "9fssgBnptdZHZ04W",
              "name": "updated library"
            },
            {
              "createdAt": "2025-02-25T13:53:03.740Z",
              "updatedAt": "2025-02-25T13:53:03.740Z",
              "id": "f0G6tZbPfSP7GNtT",
              "name": "Testing"
            }
          ]
        }
      },
      {
        "json": {
          "createdAt": "2025-05-26T14:15:41.724Z",
          "updatedAt": "2025-05-27T19:51:05.000Z",
          "id": "nq1jw4QANuhy4EbZ",
          "name": "Vencimientos-ControlDocumentario TEST V2",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "2d566db3-52f4-4161-b2ca-7c50ebe1f3e8",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -80,
                80
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                440,
                80
              ],
              "id": "1aeb1d6f-558e-4050-a66c-d8495ecfbe12",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -40,
                260
              ],
              "id": "4197bfbb-d020-4612-af69-609438f738f2",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "f15f38eb-eb83-4089-a329-795f6d87c97b",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                80
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "8ba5b12d-1843-4b02-8f51-477ec221e272",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                80
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4e9c58cc-2c54-43bc-a054-3a7c8940a05d",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                80
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y }}); pyautogui.typewrite('30716401622'); pyautogui.typewrite(['escape'])\""
              },
              "id": "7df59b4e-174b-4003-8303-639232566224",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                80
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                60
              ],
              "typeVersion": 1,
              "id": "906e2dcd-1842-45d8-be7f-f3675a726380",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "14700b31-5574-45ec-a7e3-f85e188e5008",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "a406dec8-d4f5-4ee8-b98b-f956137a9744",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                300
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d4419a04-ba44-47de-ba51-026a2d575e9b",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                300
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser').item.json.x}}, {{ $('Coordinate Parser').item.json.y }}); pyautogui.typewrite('TR33Ingresos*')\""
              },
              "id": "4147bff3-50ed-4860-93f5-483d47a6be9a",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                280
              ],
              "typeVersion": 1,
              "id": "ad1f2314-e48b-4017-afb1-f36ee3ac061d",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "42e0b965-1775-4a10-8b2c-238fcb4d40e3",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "efb52671-424a-4a17-825a-9d20ca083092",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                520
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "53c76d7f-39bf-4125-81ec-7bcc8fc89d2e",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                520
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser1').item.json.x }}, {{ $('Coordinate Parser1').item.json.y }})\""
              },
              "id": "22edda5a-6b95-490d-a497-4f3a8230cc88",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                500
              ],
              "typeVersion": 1,
              "id": "e383dd26-8ba5-4280-aa48-312b5226606c",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "306df418-6553-474f-9aae-856386c2505f",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                740
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "92dc437a-d85a-4745-b0fb-a281d890c775",
              "name": "Locate On Screen3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                740
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "8d323ec2-c667-4d8e-99bf-713013138383",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                740
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser2').item.json.x }}, {{ $('Coordinate Parser2').item.json.y }})\""
              },
              "id": "806ea7e9-52f8-4f2f-b287-4bd8858ed838",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                740
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                720
              ],
              "typeVersion": 1,
              "id": "f63e2225-28cf-4b58-b414-651a4caa9cb7",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "874662c5-515b-4b32-a639-7ddf2ed6d87d",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "20b7b8f5-0e4d-4fcf-b297-f7e9b10097f8",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                960
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "4adeb6be-71c9-4ed7-b659-6e6dda02917b",
              "name": "Coordinate Parser3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                960
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser3').item.json.x}}, {{ $('Coordinate Parser3').item.json.y }})\""
              },
              "id": "3245608d-1140-4ff3-baf9-326e3a4f220c",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                940
              ],
              "typeVersion": 1,
              "id": "86add4b4-a57f-4fb7-800d-67621edc8a84",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "ecf1944e-81ec-46a5-86c0-87d4ff6e8a49",
              "name": "Save Screenshot5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                1180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Vencimientos-CD.png', grayscale=False, confidence=0.9))\"\n"
              },
              "id": "bd953eef-51ba-4b74-b334-b7e3ef6e8990",
              "name": "Locate On Screen5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1180
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "c964c6c6-6f06-4534-8a3f-d6606adff9fb",
              "name": "Coordinate Parser5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                1180
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser5').item.json.x}}, {{ $('Coordinate Parser5').item.json.y }})\""
              },
              "id": "ab26da97-ee12-46fe-bf06-0be4019f3e77",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1420,
                1180
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                1160
              ],
              "typeVersion": 1,
              "id": "3e43340d-6e7c-4cf0-9431-d42045e16072",
              "name": "Sticky Note4"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "98984561-1f0e-4568-92a2-904c1b02c42a",
              "name": "Save Screenshot7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                1400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "d7ff17fc-7b72-4871-9d46-57ed8f0f2bd4",
              "name": "Locate On Screen7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1060,
                1400
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "352c4a79-df4d-4dab-996a-79ce34584250",
              "name": "Coordinate Parser7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1220,
                1400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser8').item.json.x }}, {{ $('Coordinate Parser8').item.json.y}})\""
              },
              "id": "4fe69654-1231-4d24-b8f3-29f6c128209f",
              "name": "Click7",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                1400
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## DropDown SJS\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                1380
              ],
              "typeVersion": 1,
              "id": "b2dc427a-97db-49da-a401-a9797f03b05c",
              "name": "Sticky Note6"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "ee263e43-e353-4ae1-bca0-f25c785d7d0e",
              "name": "Save Screenshot8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1540,
                1400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-SJS2-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "ffdfd6cd-0f78-4674-8f04-92adb92f9ee9",
              "name": "Locate On Screen8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1700,
                1400
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e7484298-0818-4222-a160-dffe15fc76a9",
              "name": "Coordinate Parser8",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1860,
                1400
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser7').item.json.x }}, {{ $('Coordinate Parser7').item.json.y }})\""
              },
              "id": "fc7a3c17-4e53-45a9-8a39-413cd8248764",
              "name": "Click10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1380,
                1400
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "46285f03-eefd-48e2-85fa-d6c9273c170d",
              "name": "Save Screenshot10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                900,
                1620
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "58796d4c-f0d7-43a7-86c1-61749bbfd4ce",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1620
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "5497a60b-d9e5-42ee-a4ef-5ac1a1459b21",
              "name": "Coordinate Parser12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                1620
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser12').item.json.x }}, {{ $('Coordinate Parser12').item.json.y }})\""
              },
              "id": "2dcda6c0-6ea3-409f-b4bd-8a8cbef13ae1",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                1620
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                1600
              ],
              "typeVersion": 1,
              "id": "c0d13199-00b9-424a-9885-12162d0370d6",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 140,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                580,
                1820
              ],
              "typeVersion": 1,
              "id": "0e5580b9-cc42-45b1-a69d-94af131962dc",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'ctl00_ContentPlaceHolderMain_tbVencimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
              },
              "id": "0ab03141-2410-42f5-836e-2e4d07bf00c5",
              "name": "Get Table - V1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1080,
                1840
              ]
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Función para calcular los días restantes hasta la fecha\nfunction calcularDiasRestantes(fechaStr) {\n  const [dia, mes, año] = fechaStr.split('/');  // Convertir la fecha a [día, mes, año]\n  const fecha = new Date(`${año}-${mes}-${dia}`);  // Crear el objeto Date (formato: YYYY-MM-DD)\n  const hoy = new Date();  // Fecha actual\n\n  // Calculamos la diferencia en milisegundos\n  const diferencia = fecha - hoy;\n  const diasRestantes = Math.floor(diferencia / (1000 * 60 * 60 * 24));\n\n  return diasRestantes;\n}\n\n// Mapear las posiciones a los encabezados correspondientes\nconst headers = [\n  \"DNI\", \"Nombre\", \"Estado\", \"DNI\", \"ExámenMédico\", \"PolizaAccPer\", \"PPolizaAccPe\", \"LicenciaCond\", \"IndDepSegSJS\", \"OCAsocPLSJS\", \"Incr-Aut-Mon\", \"IndGralSeg\", \"Anexo1BUNGE\", \"NotaSubCont.\"\n];\n\n// Establecer la salida como el array de objetos con la fecha comparada y días restantes\nreturn lines.map(line => {\n  // Procesamos la columna 'fila' de cada línea\n  const fila = line.fila;\n\n  // Arreglo para almacenar las fechas que estén a 7 días o menos\n  const fechasCercanas = [];\n\n  // Solo nos interesan las posiciones 5, 6 y 10 (fechas de los documentos)\n  const indicesFechas = [5, 6, 10];\n\n  // Recorremos las posiciones 5, 6 y 10 para verificar los días restantes\n  indicesFechas.forEach(index => {\n    const fecha = fila[index];\n\n    if (fecha !== 'n/a') {\n      const diasRestantes = calcularDiasRestantes(fecha);\n      if (diasRestantes <= 10 && diasRestantes >= 0) {\n        // El encabezado de la posición es el nombre del documento\n        const documento = headers[index];  // Obtenemos el nombre del encabezado correspondiente a la posición\n\n        fechasCercanas.push({\n          nombre: fila[1],  // Nombre de la persona en la posición 1\n          documento: documento,  // Nombre del encabezado (en vez de la fecha)\n          diasRestantes: diasRestantes  // Cuántos días faltan\n        });\n      }\n    }\n  });\n\n  // Si existen fechas cercanas (7 días o menos), devolvemos esa información como un objeto dentro de 'json'\n  if (fechasCercanas.length > 0) {\n    return { json: { fechasCercanas } };  // Aseguramos que 'json' sea un objeto\n  } else {\n    // Si no hay fechas cercanas, no devolvemos nada\n    return null;\n  }\n}).filter(line => line !== null);  // Filtramos las líneas que no contienen fechas cercanas"
              },
              "id": "d0ec2560-83ba-4321-8cc8-96ea0fbcec52",
              "name": "Divide html columns5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1240,
                1840
              ]
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
              },
              "id": "6c62804c-8bb9-4aea-90f2-52a6a4bc9512",
              "name": "OpenBrowserCmd",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                160,
                80
              ],
              "alwaysOutputData": false,
              "executeOnce": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "="
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                900,
                1840
              ],
              "id": "9873a89f-a4b4-43d4-859f-03d3f755c304",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const documentTypeMap = {}; // This map will collect ALL names for each document type across ALL input items\n\nfor (const item of items) {\n  if (item.json && item.json.fechasCercanas) {\n    for (const fechaCercana of item.json.fechasCercanas) {\n      const documentType = fechaCercana.documento;\n      const name = fechaCercana.nombre;\n\n      if (documentType) {\n        if (!documentTypeMap[documentType]) {\n          documentTypeMap[documentType] = []; // Initialize array for this document type if not seen yet\n        }\n        if (name && !documentTypeMap[documentType].includes(name)) {\n          documentTypeMap[documentType].push(name); // Add name if not already present for this docType\n        }\n      }\n    }\n  }\n}\n\nconst output = [];\n// Now, create an output item for each unique document type found in the entire input\nfor (const docType in documentTypeMap) {\n  if (documentTypeMap.hasOwnProperty(docType)) {\n    const namesString = documentTypeMap[docType].join(', '); // Join all collected names for this docType\n    output.push({\n      json: {\n        query: `${docType}: ${namesString}` // Format as \"DocumentType: Name1, Name2, ...\"\n      }\n    });\n  }\n}\n\nreturn output;"
              },
              "id": "28287bbb-6c74-4cf2-866f-c6ea5d2ef7e1",
              "name": "Divide html columns",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1400,
                1840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';import time; time.sleep(4); print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6) is not None)\""
              },
              "id": "04a98307-bc44-481b-8f09-291c6f07d02f",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1860,
                1200
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6d032dad-66f7-4760-8421-7531ba564039",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                2020,
                1200
              ],
              "id": "d0c9abca-8aef-4b78-8a97-80c682fb747b",
              "name": "If"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com",
                "subject": "BOT - Proximos Vencimientos - BUNGE",
                "emailType": "text",
                "message": "={{ $json.resumenFechas }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                1720,
                1840
              ],
              "id": "4d4afd55-cd72-4fa3-b1f9-2c9d21a707d3",
              "name": "Gmail",
              "webhookId": "c19da1bf-dc16-4557-be89-71444c358f34",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Combinar y reemplazar documentos\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Convertir en texto legible\nlet resumen = 'Fechas cercanas:\\n\\n';\n\nfor (const fecha of todasLasFechas) {\n  resumen += `👤 ${fecha.nombre}\\n📄 ${fecha.documento}\\n📅 En ${fecha.diasRestantes} días\\n\\n`;\n}\n\nreturn [\n  {\n    json: {\n      resumenFechas: resumen.trim()\n    }\n  }\n];"
              },
              "id": "23f30985-701a-48e2-81a2-946c5a425fa8",
              "name": "Divide html columns2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1560,
                1840
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "198893e8-4a16-43c4-9c99-932048be72c8",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2020,
                1840
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2660,
                80
              ],
              "id": "1bc54d27-8758-4cc9-9801-84397c23ca14",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "986fbdef-2a95-41ed-9cbf-f74bd302cbad",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                80
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "7252f37c-a0f1-44df-95be-5097a3f4042b",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                80
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "15a3f169-c710-4ea4-a804-28d220e92e7a",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                80
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser6').item.json.x }}, {{ $('Coordinate Parser6').item.json.y }}); pyautogui.typewrite('30716401622'); pyautogui.typewrite(['escape'])\""
              },
              "id": "149449e3-7dcc-4ece-bed5-36b0ab08e318",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                80
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                60
              ],
              "typeVersion": 1,
              "id": "39c4b917-c9e8-4093-93f3-48aae89c69bb",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8e295614-2204-4f7d-b6d3-8d5b2e9ec0ce",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields3').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "630d17e5-073c-4174-b73c-a4985a0acca4",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                300
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f8dc936d-9ff5-4e38-8346-8406890dbfd5",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                300
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser9').item.json.x}}, {{ $('Coordinate Parser9').item.json.y }}); pyautogui.typewrite('TR33Ingresos*')\""
              },
              "id": "16001d86-0b57-4fad-9431-b8f07c3b03f6",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                280
              ],
              "typeVersion": 1,
              "id": "665513a8-1c2e-431b-becd-f0eb4997e01b",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "69ae03fd-4ba0-4250-8e16-c3027a78b6b2",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "3a509d35-c47a-41d1-a108-699297dc9454",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                520
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "d2f9fce3-3854-4493-9de4-93cfd11f9d51",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                520
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser10').item.json.x }}, {{ $('Coordinate Parser10').item.json.y }})\""
              },
              "id": "75ba86aa-d907-4051-a9f2-ccf757977f79",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                500
              ],
              "typeVersion": 1,
              "id": "35cdfa85-7e27-439c-8542-ca8a205e217e",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "88a41b62-e1a2-4b0b-842a-f1691ebf942b",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                740
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "268aef53-e88d-4c71-b8e6-402c0d8483d9",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                740
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "e1df2c3a-8d63-4d1b-a562-154906640794",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                740
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser11').item.json.x }}, {{ $('Coordinate Parser11').item.json.y }})\""
              },
              "id": "c2e3ddc0-ea33-48b2-9c94-e00b78ea8ef6",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                740
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                720
              ],
              "typeVersion": 1,
              "id": "64b83f6b-08fa-456e-b7ef-4ec35be19901",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "12da8ae3-818a-4d46-bfac-f6c0d189528e",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                1180
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "1f377156-21da-4aef-b244-ccadbf96f5ae",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                1180
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "8fd57f96-713b-41f5-9f97-10f09094e75c",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                1180
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser13').item.json.x}}, {{ $('Coordinate Parser13').item.json.y }})\""
              },
              "id": "d47c31d0-e856-401c-9d62-867f34c22251",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                1180
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                1160
              ],
              "typeVersion": 1,
              "id": "7e3aa3ab-7613-4567-85ac-ccd44a9c2f55",
              "name": "Sticky Note11"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "f9edc9a9-0a23-44c1-9f90-7bc8f0da39d4",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                1400
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Vencimientos-CD.png', grayscale=False, confidence=0.9))\"\n"
              },
              "id": "b84d91fb-d571-429e-8f4d-31bdc45cb7d6",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                1400
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9b0b2374-ec90-4952-8d32-6ba4ec541b0e",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                1400
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser14').item.json.x}}, {{ $('Coordinate Parser14').item.json.y }})\""
              },
              "id": "4758075c-2855-4092-b58f-6965d13327cd",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3640,
                1400
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                1380
              ],
              "typeVersion": 1,
              "id": "dd692106-c3e3-42ee-a2de-e11b91221513",
              "name": "Sticky Note12"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "5dc67026-617b-4ac4-84c4-f0cc8c8fe082",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                1640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "836d0d9c-8f5e-4e10-adb4-d4abfe696277",
              "name": "Locate On Screen18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                1640
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f2f53aff-7bee-4ed1-a0b8-7748158f3b69",
              "name": "Coordinate Parser17",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                1640
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser17').item.json.x }}, {{ $('Coordinate Parser17').item.json.y }})\""
              },
              "id": "00a618d2-5a3f-4445-90dc-4e78376d2650",
              "name": "Click18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4240,
                1640
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                1620
              ],
              "typeVersion": 1,
              "id": "c43b7b2c-8272-42ce-83b4-2ab29b1ac090",
              "name": "Sticky Note14"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                1840
              ],
              "typeVersion": 1,
              "id": "3dc35d1e-70f8-4719-9fb0-aeaf36b61cb5",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'ctl00_ContentPlaceHolderMain_tbVencimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
              },
              "id": "9ff28a45-4bf1-42be-9e4c-d097023547d6",
              "name": "Get Table - V",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3300,
                1860
              ]
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Función para calcular los días restantes hasta la fecha\nfunction calcularDiasRestantes(fechaStr) {\n  const [dia, mes, año] = fechaStr.split('/');  // Convertir la fecha a [día, mes, año]\n  const fecha = new Date(`${año}-${mes}-${dia}`);  // Crear el objeto Date (formato: YYYY-MM-DD)\n  const hoy = new Date();  // Fecha actual\n\n  // Calculamos la diferencia en milisegundos\n  const diferencia = fecha - hoy;\n  const diasRestantes = Math.floor(diferencia / (1000 * 60 * 60 * 24));\n\n  return diasRestantes;\n}\n\n// Mapear las posiciones a los encabezados correspondientes\nconst headers = [\n  \"DNI\", \"Nombre\", \"Estado\", \"DNI\", \"ExámenMédico\", \"PolizaAccPer\", \"PPolizaAccPe\", \"LicenciaCond\", \"IndDepSegSJS\", \"OCAsocPLSJS\", \"Incr-Aut-Mon\", \"IndGralSeg\", \"Anexo1BUNGE\", \"NotaSubCont.\"\n];\n\n// Establecer la salida como el array de objetos con la fecha comparada y días restantes\nreturn lines.map(line => {\n  // Procesamos la columna 'fila' de cada línea\n  const fila = line.fila;\n\n  // Arreglo para almacenar las fechas que estén a 7 días o menos\n  const fechasCercanas = [];\n\n  // Solo nos interesan las posiciones 5, 6 y 10 (fechas de los documentos)\n  const indicesFechas = [5, 6, 10];\n\n  // Recorremos las posiciones 5, 6 y 10 para verificar los días restantes\n  indicesFechas.forEach(index => {\n    const fecha = fila[index];\n\n    if (fecha !== 'n/a') {\n      const diasRestantes = calcularDiasRestantes(fecha);\n      if (diasRestantes <= 10 && diasRestantes >= 0) {\n        // El encabezado de la posición es el nombre del documento\n        const documento = headers[index];  // Obtenemos el nombre del encabezado correspondiente a la posición\n\n        fechasCercanas.push({\n          nombre: fila[1],  // Nombre de la persona en la posición 1\n          documento: documento,  // Nombre del encabezado (en vez de la fecha)\n          diasRestantes: diasRestantes  // Cuántos días faltan\n        });\n      }\n    }\n  });\n\n  // Si existen fechas cercanas (7 días o menos), devolvemos esa información como un objeto dentro de 'json'\n  if (fechasCercanas.length > 0) {\n    return { json: { fechasCercanas } };  // Aseguramos que 'json' sea un objeto\n  } else {\n    // Si no hay fechas cercanas, no devolvemos nada\n    return null;\n  }\n}).filter(line => line !== null);  // Filtramos las líneas que no contienen fechas cercanas"
              },
              "id": "14e9ff85-ca5e-45c1-bfb5-3d659fe51bd4",
              "name": "Divide html columns6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3460,
                1860
              ]
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
              },
              "id": "48f8a120-1669-4599-ab2e-1343a36a00c7",
              "name": "OpenBrowserCmd1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2380,
                80
              ],
              "alwaysOutputData": false,
              "executeOnce": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "="
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                3120,
                1860
              ],
              "id": "ae84c861-b887-46bd-82e5-cfabc96e8156",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Crear una única lista combinada de fechasCercanas\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Devolver un único item con json.fechasCercanas\nreturn [\n  {\n    json: {\n      fechasCercanas: todasLasFechas\n    }\n  }\n];"
              },
              "id": "27a74c09-d2f8-4c22-b19c-f978bdc641ad",
              "name": "Divide html columns1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3640,
                1720
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';import time; time.sleep(4); print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-PlantaPSM-CD.png', grayscale=True, confidence=0.6) is not None)\""
              },
              "id": "cfa631b7-de93-4837-966a-cf20a7f4833d",
              "name": "Locate On Screen19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4080,
                1420
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6d032dad-66f7-4760-8421-7531ba564039",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                4240,
                1420
              ],
              "id": "5ba9cc7e-9029-44ae-ac60-6fe358472369",
              "name": "If1"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                2520,
                80
              ],
              "id": "f255eea0-048c-4136-9e40-7deb54feda2b",
              "name": "Edit Fields3"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com",
                "subject": "BOT - Proximos Vencimientos - T6",
                "emailType": "text",
                "message": "={{ $json.resumenFechas }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                3940,
                1860
              ],
              "id": "4f1a9aad-e8fd-4ae2-a63a-b4c050388b2f",
              "name": "Gmail1",
              "webhookId": "b8429562-37bd-422c-b53a-510b4f0f6489",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const documentoMap = {\n  \"Incr-Aut-Mon\": \"Inscripcion Autonomo\",\n  \"PPolizaAccPe\": \"Pago poliza acc. personales\",\n  \"PolizaAccPer\": \"Poliza accidentes personales\",\n  // Podés agregar más acá si necesitás\n};\n\nfunction reemplazarDocumentos(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(reemplazarDocumentos);\n  } else if (typeof obj === 'object' && obj !== null) {\n    const nuevoObj = {};\n    for (const key in obj) {\n      if (key === 'documento' && documentoMap[obj[key]]) {\n        nuevoObj[key] = documentoMap[obj[key]];\n      } else {\n        nuevoObj[key] = reemplazarDocumentos(obj[key]);\n      }\n    }\n    return nuevoObj;\n  }\n  return obj;\n}\n\n// Combinar y reemplazar documentos\nconst todasLasFechas = [];\n\nfor (const item of items) {\n  const datos = reemplazarDocumentos(item.json);\n  if (Array.isArray(datos.fechasCercanas)) {\n    todasLasFechas.push(...datos.fechasCercanas);\n  }\n}\n\n// Convertir en texto legible\nlet resumen = 'Fechas cercanas:\\n\\n';\n\nfor (const fecha of todasLasFechas) {\n  resumen += `👤 ${fecha.nombre}\\n📄 ${fecha.documento}\\n📅 En ${fecha.diasRestantes} días\\n\\n`;\n}\n\nreturn [\n  {\n    json: {\n      resumenFechas: resumen.trim()\n    }\n  }\n];"
              },
              "id": "63bc940c-012d-478d-a799-ad74181bc3fb",
              "name": "Divide html columns3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3780,
                1860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "561859bf-6a50-4301-af67-6721e0e2befa",
              "name": "Click19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4080,
                1860
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                300,
                80
              ],
              "id": "4a2e294f-1faa-4883-b2b4-8b6677788827",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields3').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "cea8f321-8bd1-43f5-bbb8-89a1948bd0b1",
              "name": "Save Screenshot18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-BUNGE-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f03dae97-06c2-4839-8170-f7e98bbd7222",
              "name": "Locate On Screen20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3260,
                960
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b9b6f191-f630-4d55-acd1-25bbcff63911",
              "name": "Coordinate Parser18",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3420,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser18').item.json.x }}, {{ $('Coordinate Parser18').item.json.y }})\""
              },
              "id": "38f6a3c4-1a24-4d55-9b1f-bf9b97fcd0be",
              "name": "Click20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3560,
                960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## De Bunge a T6\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                2800,
                940
              ],
              "typeVersion": 1,
              "id": "6ce1e2a4-e3b5-4cdf-bafb-d04e430f287d",
              "name": "Sticky Note18"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields3').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "abea5ff1-1b2f-4002-9f86-46b7cd77dfc6",
              "name": "Save Screenshot19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3760,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields3').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Terminal 6-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "651226d1-01a5-4a0a-8674-11e5c2605bf9",
              "name": "Locate On Screen21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3900,
                960
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ba92be8b-135c-4624-a581-18550afcf2d0",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                4060,
                960
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser19').item.json.x }}, {{ $('Coordinate Parser19').item.json.y }})\""
              },
              "id": "bce6da1e-5923-4ac9-a668-56b0af42fcee",
              "name": "Click21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                4200,
                960
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "field": "weeks",
                      "triggerAtDay": [
                        3
                      ],
                      "triggerAtHour": 7,
                      "triggerAtMinute": null
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                -40,
                -80
              ],
              "id": "f0423092-cd25-40a3-98bf-f03436a446bb",
              "name": "Schedule Trigger"
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "DbwBS0zefv26xaJX",
                  "mode": "list",
                  "cachedResultName": "GenerarControlDocumentario"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "query": "={{ $json.query }}"
                  },
                  "matchingColumns": [
                    "query"
                  ],
                  "schema": [
                    {
                      "id": "query",
                      "displayName": "query",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "canBeUsedToMatch": true,
                      "type": "string",
                      "removed": false
                    }
                  ],
                  "attemptToConvertTypes": true,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                1560,
                2180
              ],
              "id": "c8005bcd-a43d-4006-bc1b-cfde0ea3d5f2",
              "name": "Execute Workflow",
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "jsCode": "const outputData = {};\n\nfor (const item of items) {\n  if (item.json && item.json.fechasCercanas) {\n    for (const fechaCercana of item.json.fechasCercanas) {\n      const documentType = fechaCercana.documento;\n      const name = fechaCercana.nombre;\n\n      if (documentType) {\n        if (!outputData[documentType]) {\n          outputData[documentType] = [];\n        }\n        if (name && !outputData[documentType].includes(name)) {\n          outputData[documentType].push(name);\n        }\n      }\n    }\n  }\n}\n\nreturn [{\n  json: outputData\n}];"
              },
              "id": "489707ad-300d-438a-99d9-422583304ef7",
              "name": "Divide html columns4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1400,
                1720
              ]
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                1400,
                2060
              ],
              "id": "aed17669-1377-4805-98ee-d2f028ec4e79",
              "name": "Loop Over Items"
            },
            {
              "parameters": {
                "jsCode": "const documentTypeMap = {}; // This map will collect ALL names for each document type across ALL input items\n\nfor (const item of items) {\n  if (item.json && item.json.fechasCercanas) {\n    for (const fechaCercana of item.json.fechasCercanas) {\n      const documentType = fechaCercana.documento;\n      const name = fechaCercana.nombre;\n\n      if (documentType) {\n        if (!documentTypeMap[documentType]) {\n          documentTypeMap[documentType] = []; // Initialize array for this document type if not seen yet\n        }\n        if (name && !documentTypeMap[documentType].includes(name)) {\n          documentTypeMap[documentType].push(name); // Add name if not already present for this docType\n        }\n      }\n    }\n  }\n}\n\nconst output = [];\n// Now, create an output item for each unique document type found in the entire input\nfor (const docType in documentTypeMap) {\n  if (documentTypeMap.hasOwnProperty(docType)) {\n    const namesString = documentTypeMap[docType].join(', '); // Join all collected names for this docType\n    output.push({\n      json: {\n        query: `${docType}: ${namesString}` // Format as \"DocumentType: Name1, Name2, ...\"\n      }\n    });\n  }\n}\n\nreturn output;"
              },
              "id": "0fd5ffa6-7550-48b1-bcee-39def076255f",
              "name": "Divide html columns7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3620,
                1860
              ]
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "DbwBS0zefv26xaJX",
                  "mode": "list",
                  "cachedResultName": "GenerarControlDocumentario"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "query": "={{ $json.query }}"
                  },
                  "matchingColumns": [
                    "query"
                  ],
                  "schema": [
                    {
                      "id": "query",
                      "displayName": "query",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "canBeUsedToMatch": true,
                      "type": "string",
                      "removed": false
                    }
                  ],
                  "attemptToConvertTypes": true,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                3780,
                2200
              ],
              "id": "345c58b6-c914-41fe-964e-689a99355b0c",
              "name": "Execute Workflow1",
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                3620,
                2080
              ],
              "id": "d24e3e0e-0ebe-4206-b722-21a493b029d4",
              "name": "Loop Over Items1"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                []
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Locate On Screen3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser3": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot5": {
              "main": [
                [
                  {
                    "node": "Locate On Screen5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser5": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot7": {
              "main": [
                [
                  {
                    "node": "Locate On Screen7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen7": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser7": {
              "main": [
                [
                  {
                    "node": "Click10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click7": {
              "main": [
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot8": {
              "main": [
                [
                  {
                    "node": "Locate On Screen8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen8": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser8": {
              "main": [
                [
                  {
                    "node": "Click7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click10": {
              "main": [
                [
                  {
                    "node": "Save Screenshot8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser12": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Table - V1": {
              "main": [
                [
                  {
                    "node": "Divide html columns5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns5": {
              "main": [
                [
                  {
                    "node": "Divide html columns",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Get Table - V1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Save Screenshot7",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Gmail": {
              "main": [
                []
              ]
            },
            "Divide html columns2": {
              "main": [
                []
              ]
            },
            "Click12": {
              "main": [
                []
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Locate On Screen19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Locate On Screen18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen18": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser17": {
              "main": [
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click18": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Table - V": {
              "main": [
                [
                  {
                    "node": "Divide html columns6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns6": {
              "main": [
                [
                  {
                    "node": "Divide html columns7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd1": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Get Table - V",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns1": {
              "main": [
                [
                  {
                    "node": "Divide html columns3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen19": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields3": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Gmail1": {
              "main": [
                [
                  {
                    "node": "Click19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns3": {
              "main": [
                [
                  {
                    "node": "Gmail1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot18": {
              "main": [
                [
                  {
                    "node": "Locate On Screen20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen20": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser18": {
              "main": [
                [
                  {
                    "node": "Click20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click20": {
              "main": [
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot19": {
              "main": [
                [
                  {
                    "node": "Locate On Screen21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen21": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click21": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                []
              ]
            },
            "Execute Workflow": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [],
                [
                  {
                    "node": "Execute Workflow",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns7": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Workflow1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items1": {
              "main": [
                [],
                [
                  {
                    "node": "Execute Workflow1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "0a630c7b-3dd3-4fb9-98dc-538b0e5d64da",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-05-09T12:40:15.237Z",
          "updatedAt": "2025-08-04T17:30:14.000Z",
          "id": "oqL5PXAhDyC78wG5",
          "name": "BOT-Descargas",
          "active": true,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                460,
                900
              ],
              "id": "40d28ba1-96c8-4df8-b9d6-94bff10d1570",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=Sos un util asistente con la tarea de utilizar las herramientas de descarga de documentacion y notificar como salió su ejecucion.\nAsegurate de ejecutar una a la vez y solo una vez.\n\nContas con las siguientes herramientas:\n* Polizas: Descarga las polizas de La Segunda.\n* CNRyLD: Descarga las CNR y Libre Deuda de La Segunda.\n* CCMA: Descarga el CCMA de ARCA.\n* Constancia: Descarga las constancias de ARCA.\n\nEjecuta estas herramientas UNA A LA VEZ y SOLO UNA VEZ. Luego al recibir el output de cada una notifica si funcionaron correctamente o especifica los errores en caso de que existan.\n\nQuiero que devuelvas el texto con saltos de línea reales. NO uses \"\\n\", sino saltos de línea reales. Ejemplo de formato:\n\nAdjunto el reporte de cargas del día:\n- N8N-LS-Polizas: Error:\n         The 'JSON Output' in item 0 contains invalid JSON ❌\n- N8N-CCMA-ARCA: \n         Empleado: FERREYRA FACUNDO AMILCAR - Error: Captcha ❌\n         Empleado: QUIROZ JAMES - Error: Captcha ❌\n- N8N-LS-Polizas: Carga exitosa. ✅\n...\n\nPor favor, no dude en contactar el area de investigación y desarrollo si necesita más información.\n\nSaludos cordiales,\"\n\n* El output que des es el body del mail que se manda, estructuralo acorde",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 1.7,
              "position": [
                800,
                840
              ],
              "id": "06aa1e3d-b999-435b-ad7b-d4ea6a24125d",
              "name": "AI Agent1"
            },
            {
              "parameters": {
                "name": "Polizas",
                "description": "Call this workflow when you are ready to upload the documents",
                "workflowId": {
                  "__rl": true,
                  "value": "b4fSsxoSqjFjDgsj",
                  "mode": "list",
                  "cachedResultName": "N8N-LS-Polizas"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                760,
                1100
              ],
              "id": "1f99311f-ef93-4663-9ae9-f0a8e478be1c",
              "name": "N8N-LS-Polizas"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4o-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                600,
                1100
              ],
              "id": "f69a4873-ad8a-4d85-88ff-d0d688413c8c",
              "name": "OpenAI",
              "credentials": {
                "openAiApi": {
                  "id": "qlIkWQVxXLADKIor",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "name": "CNRyLD",
                "description": "Call this workflow when you are ready to upload the documents",
                "workflowId": {
                  "__rl": true,
                  "value": "JQaUFfHy4jVE74HE",
                  "mode": "list",
                  "cachedResultName": "N8N-LS-CNRyLD"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                900,
                1100
              ],
              "id": "b8cfd9cd-dda2-40ec-b4d4-161898771a51",
              "name": "N8N-LS-CNRyLD"
            },
            {
              "parameters": {
                "name": "CCMA",
                "description": "Call this workflow when you are ready to upload the documents",
                "workflowId": {
                  "__rl": true,
                  "value": "MU3ylDsM0vwHrbDf",
                  "mode": "list",
                  "cachedResultName": "N8N-CCMA-ARCA"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                1060,
                1100
              ],
              "id": "7afbbe69-97ba-420a-bc1c-5c95b5f09428",
              "name": "N8N-CCMA-ARCA"
            },
            {
              "parameters": {
                "name": "Constancia",
                "description": "Call this workflow when you are ready to upload the documents",
                "workflowId": {
                  "__rl": true,
                  "value": "dYVcl9OY8baVLRcL",
                  "mode": "list",
                  "cachedResultName": "N8N-Constancia-ARCA"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                1220,
                1100
              ],
              "id": "82ef7820-0aaa-4139-95ae-3014c75baf08",
              "name": "N8N-Constancia-ARCA"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=Tu tarea es mantener actualizada la carga de documentanción.\nUSA UNA SOLA HERRAMIENTA A LA VEZ\nSI UNA DE ELLAS FALLA, DETENTE, no sigas sin toda la informacion necesaria, pero si si no existe un documento.\n* Tenés la herramienta \"Pendientes\" donde necesitas UNICAMENTE iniciar el RPA, sin mandarle nada.\nUna vez que tengas los documentos que se adeudan tu tarea es conseguirlos. Te interesan los documentos pago poliza acc personales, poliza acc personales e inscripcionautonomo. USA EXACTAMENTE ESTOS NOMBRES QUE TE DI!. SOLO TENES QUE AVANZAR CON LOS QUE VENCEN EN MENOS DE 10 DIAS.\n* Tenés la herramienta \"File existe\" para usarla tenés que mandarle los documentos pendientes si o si. De ella vas a recibir los que no existan,SI NO RECIBIS EL NOMBRE DE UN DOCUMENTO, ENTONCES EXISTE, SOLO IMPORTA LOS QUE TRAJISTE DE PENDIENTES, el resto no importa si le falta algo, no lo evalues.\nEn caso que algun documento no exista REALIZA SU DESCARGA.\n* Tenes la herramienta \"N8N-CNR-LD\" para descargar los documentos de CNR y Pago Poliza acc personales.\n* Tenes la herramienta \"PendRecepcion\" para ver que documentos ya se cargaron a planta y estan en proceso de aprobacion, estos no debemos volver a cargar, .\n* Tenes la herramienEN ESTE PROCESO TE DEVUELVEN SOLO LOS QUE ESTAN PENDIENTES DE APROBACIONta \"PendEnvio\" para ver que documentos tienen una solicitud de carga y asi saber cuales no debemos generar.\n* Tenés la herramienta \"Generar\" para poder generar las solicitudes de carga para los archivos que falten y no esten pendientes a recepcion. MANDA LA LISTA QUE CONSEGUISTE DE LA HERRAMINETA PENDIENTE, TANTO \"pagopolizaaccpersonales\" COMO TAMBIEN \"inscripcionautonomo\" ESCRIBILOS EXACTAMENTE ASI, exeptuando los que no existan, esten pendientes a recepcion o ya tengan una solicitud de carga generada. usa formato tipo {\n  \"query\": \"delpino nicolas abel, inscripcionautonomo, 20\\ndonaire pablo ruben, ppolizaaccpe, 12\\nferreyra julian andres, ppolizaaccpe, 18\"\n}\n \nEjecutalos en orden y 1 a la vez. Solo vas a ejecutarlos 1 vez así que manda todos los documentos a generar y todas las personas que lo necesitan JUNTOS.\nprimero pendientes, luego file exist, luego pendientes recepcion, luego pendientes envio y ultimo generar\nPOR ESTA VEZ PROBA LLAMAR AL GENERAR\nDa en el output la listas obtenidas de las diferentes hereamientas y como las analizaste.",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 1.7,
              "position": [
                780,
                200
              ],
              "id": "fbb1b277-78ca-4edc-a0dd-97b61ef43d29",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4o-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                640,
                500
              ],
              "id": "17c295f9-c717-4be2-a2a8-692da9fba8c7",
              "name": "OpenAI Chat Model",
              "credentials": {
                "openAiApi": {
                  "id": "qlIkWQVxXLADKIor",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "name": "Pendientes",
                "description": "Call this tool to get a table of documents needed to be uploaded so our personal is able to work in diferent industrial sites",
                "workflowId": {
                  "__rl": true,
                  "value": "aVIs8uvnkVfzIrDd",
                  "mode": "list",
                  "cachedResultName": "Pendientes ControlDocumentario"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                800,
                500
              ],
              "id": "79953fe5-0f2e-4901-bb6d-1cc563d2ffd3",
              "name": "Pendientes"
            },
            {
              "parameters": {
                "name": "Fileexist",
                "description": "Call this workflow when you know which documents need to be upload to check if they exist or we dont have them yet. \nAca usa los nombres PPolizaAccPe, PolizaAccPe, inscripcionautonomo",
                "workflowId": {
                  "__rl": true,
                  "value": "1aJKQtkbFifzy717",
                  "mode": "list",
                  "cachedResultName": "File exist"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                900,
                500
              ],
              "id": "60a48afc-0244-4c7e-b5f0-471f15566003",
              "name": "File exist"
            },
            {
              "parameters": {
                "name": "PendientesRecepcion",
                "description": "Call this tool to get a table of documents needed to be uploaded so our personal is able to work in diferent industrial sites",
                "workflowId": {
                  "__rl": true,
                  "value": "QBnriGcCTfdJDwXM",
                  "mode": "list",
                  "cachedResultName": "Pendientes-Recepcion-ControlDocumentario copy"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                1000,
                500
              ],
              "id": "08177562-0e20-4bb7-a42d-030cf099d79f",
              "name": "PendRecep"
            },
            {
              "parameters": {
                "name": "Generar",
                "description": "Call this tool to create an upload document solicitud for the documents that have to be upload.\nSend the names of the personal that need their documents upload and the document in question",
                "workflowId": {
                  "__rl": true,
                  "value": "DbwBS0zefv26xaJX",
                  "mode": "list",
                  "cachedResultName": "GenerarControlDocumentario"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [
                    {
                      "id": "query",
                      "displayName": "query",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "canBeUsedToMatch": true,
                      "type": "string",
                      "removed": false
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                1200,
                500
              ],
              "id": "8154b32e-b5b9-4b5a-86a2-394157f434f9",
              "name": "Generar"
            },
            {
              "parameters": {
                "name": "PendientesEnvio",
                "description": "Call this tool to get a table of documents with generated solicitud to be uploaded in the site",
                "workflowId": {
                  "__rl": true,
                  "value": "QBnriGcCTfdJDwXM",
                  "mode": "list",
                  "cachedResultName": "Pendientes-Recepcion-ControlDocumentario copy"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                1100,
                500
              ],
              "id": "49671a5d-98dc-477e-b57a-e9de51a4a783",
              "name": "PendEnvio"
            },
            {
              "parameters": {
                "name": "Descarga",
                "description": "Call this workflow when you need to download CNR or Pago polisa acc personales documents for the personal, only when you are ask to upload the document and it doenst exist",
                "workflowId": {
                  "__rl": true,
                  "value": "JQaUFfHy4jVE74HE",
                  "mode": "list",
                  "cachedResultName": "N8N-LS-CNRyLD"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {},
                  "matchingColumns": [],
                  "schema": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "typeVersion": 2,
              "position": [
                840,
                640
              ],
              "id": "5c35d5e3-d01e-40c1-9b82-4c804b6aa281",
              "name": "N8N-CNR-LS"
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com, a.benitez@treeingenieria.com, administracion@treeingenieria.com",
                "subject": "BOT-Descargas",
                "emailType": "text",
                "message": "={{ $json.output }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                1360,
                880
              ],
              "id": "ffbb946e-eecd-44bf-a058-aae1f175523a",
              "name": "Gmail",
              "webhookId": "6bc2c596-6b0a-4077-9a64-a43f3b27b4d7",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com",
                "subject": "BOT-Descargas",
                "emailType": "text",
                "message": "={{ $json.output }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                1360,
                700
              ],
              "id": "1d445b3f-a9e0-427a-bcc1-53dd4513e677",
              "name": "Testing",
              "webhookId": "6bc2c596-6b0a-4077-9a64-a43f3b27b4d7",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "field": "cronExpression",
                      "expression": "0 0 2 1 *"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                460,
                740
              ],
              "id": "23d7819c-2638-42c0-b350-31a058c5398a",
              "name": "Schedule Trigger"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "N8N-LS-Polizas": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "N8N-LS-CNRyLD": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "N8N-CCMA-ARCA": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "N8N-Constancia-ARCA": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Pendientes": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "File exist": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "PendRecep": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "PendEnvio": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent1": {
              "main": [
                [
                  {
                    "node": "Testing",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "f17e9a24-c766-4a25-8949-2568bf215ac4",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-04-10T17:00:49.928Z",
          "updatedAt": "2025-05-08T19:06:05.000Z",
          "id": "pN8ruk5JaSXHuJUK",
          "name": "Pendientes-Carga-ControlDocumentario",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "af114be8-9f8a-4d81-93ae-6c7a123831fe",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -720,
                -220
              ]
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -260,
                -120
              ],
              "id": "3696f42e-dfee-4d95-be86-a57793db2d46",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -720,
                -40
              ],
              "id": "85ebbe52-1e6e-45dc-8717-f42f2357ad78",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "7c90155d-82cc-40f1-af28-71bf2f0a7c91",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                -120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "82e3ddb8-d152-436f-acfd-13b8be1cd44e",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                360,
                -120
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ee231181-7699-426f-8873-ecdfbd591fa7",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                520,
                -120
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y }}); pyautogui.typewrite('30716401622')\""
              },
              "id": "5abf89f3-ade1-423a-bc4d-d255dc25585e",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                -120
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                -140
              ],
              "typeVersion": 1,
              "id": "f2c007a1-e223-43d6-a2df-f4f7b02de699",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "c4d32dae-e386-45e4-bc7a-6a03651b4d15",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "fc15e3fb-bb56-44dd-86bf-98c4a6377e79",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                360,
                100
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "6408b238-61a2-4df0-bd67-def0f6735324",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                520,
                100
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser').item.json.x}}, {{ $('Coordinate Parser').item.json.y }}); pyautogui.typewrite('TR33Ingresos*')\""
              },
              "id": "e4e86f29-f5c1-4da2-bcc8-76e395dccf50",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                100
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                80
              ],
              "typeVersion": 1,
              "id": "522d12ac-aa24-4bae-9cac-582874fed4bc",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "6b6f93ab-72e1-4aec-a187-ffd8aee86ba9",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                320
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "fd4f8fb1-0d28-460f-9466-6e20b8febe70",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                360,
                320
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "801960c7-8151-4d7b-b5cc-3beb81eff6bf",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                520,
                320
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser1').item.json.x }}, {{ $('Coordinate Parser1').item.json.y }})\""
              },
              "id": "471d293c-14d9-46df-9fc3-2f1dbc4313d0",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                320
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                300
              ],
              "typeVersion": 1,
              "id": "26111b7f-b86c-41ef-b488-95db762a1d09",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "799ca538-ec22-4962-a17e-9552def5c31c",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                540
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "90f58a25-4919-4117-b562-8f7cfa47d972",
              "name": "Locate On Screen3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                360,
                540
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "76f13532-a54c-410b-983a-def70180407b",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                520,
                540
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser2').item.json.x }}, {{ $('Coordinate Parser2').item.json.y }})\""
              },
              "id": "0a9e2b19-7246-4162-995f-8e25efe329c2",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                540
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                520
              ],
              "typeVersion": 1,
              "id": "9e5f2815-1e86-4da6-973c-39625f017b2d",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "30a51f23-5935-4988-9496-cc2b1bd89e36",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "cc984e4f-ad88-4747-9874-0cf4826ad61f",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                360,
                760
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9cb452eb-6642-483f-8cbd-bc2040ae16ab",
              "name": "Coordinate Parser3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                520,
                760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser3').item.json.x}}, {{ $('Coordinate Parser3').item.json.y }})\""
              },
              "id": "56666ac5-d33b-4229-b8c5-6c64c8a45357",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                760
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion\n**Rellenar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                740
              ],
              "typeVersion": 1,
              "id": "3ae78969-5fd0-4b53-9c68-3fc914e0e662",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                2060
              ],
              "typeVersion": 1,
              "id": "cc3d5dc4-11e5-43c1-a9de-59b247161197",
              "name": "Sticky Note10"
            },
            {
              "parameters": {
                "executeOnce": false,
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\"\n"
              },
              "id": "4460b47d-514f-4733-9e78-d12179f11e61",
              "name": "OpenBrowserCmd",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                -540,
                -120
              ],
              "alwaysOutputData": false,
              "executeOnce": false,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                540,
                2080
              ],
              "id": "3342de09-5e86-4bf6-a7b7-322523f74d16",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $json.Texto }};{{ $('Get Table - V').item.json.stdout }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                660,
                2080
              ],
              "id": "0d64186d-a019-4275-9bcb-10028a045ea3",
              "name": "Supabase2",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "="
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                180,
                2080
              ],
              "id": "d7c9dd7e-db3b-4aa9-a294-cee86acc8b12",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Documentos"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1300,
                2080
              ],
              "id": "74000649-afd1-47dc-8f7f-a8f7be13e4e0",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(2);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "83a6f687-5066-401e-ba0a-aa026bfc806b",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1160,
                2080
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab); driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [[cell.text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for cell in row.find_elements(By.TAG_NAME, 'td')] for row in rows if row.find_elements(By.TAG_NAME, 'td')]; [print(json.dumps({'fila': item})) for item in data]\""
              },
              "id": "f9f7d36b-7702-49ff-92d0-cf0543ae6ace",
              "name": "Get Table - V",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                2080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "2e96bb1e-4915-40a3-b403-da4ebefdb508",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AreaTrabajo-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "42d4a094-356f-42f4-91b1-8d040eb59705",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                360,
                980
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9cbb1268-569d-47d8-8069-c3475130d090",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                520,
                980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser6').item.json.x }}, {{ $('Coordinate Parser6').item.json.y }})\""
              },
              "id": "6c8cfac1-a8c6-4595-8779-ff8c6f11ff64",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                700,
                980
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                960
              ],
              "typeVersion": 1,
              "id": "d74f83f8-a4f4-42cc-b6af-752e7c2a8327",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "546e55be-4ff2-402b-b02a-82b16ad7ebdc",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                1200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "5fb05737-0b59-486f-b4da-42ea6d2e7fd7",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                340,
                1200
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1f3dc1ee-3018-45b3-9275-382d06da356f",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                500,
                1200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser10').item.json.x }}, {{ $('Coordinate Parser10').item.json.y}})\""
              },
              "id": "2625b877-e45d-4da8-923b-6d98d56546c1",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                1200
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## DropDown SJS\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                1180
              ],
              "typeVersion": 1,
              "id": "319f5624-fb2d-48cf-924b-73dd887e5b63",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "642b53ad-e7f2-41a6-b971-8f4aa071c97b",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                820,
                1200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-SJS-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "a152fdfc-ea0d-4dd6-ada6-05d5479b4c39",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                980,
                1200
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "0feed18c-5510-4f85-b2dd-9d7361340088",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1140,
                1200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser9').item.json.x }}, {{ $('Coordinate Parser9').item.json.y }})\""
              },
              "id": "66205aa9-2f98-4232-86ff-3c43b4dce500",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                660,
                1200
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Estados-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "d7468dff-459c-4447-b2d3-9612df3b6ee4",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                340,
                1420
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "88d1a8a4-e03b-4a4a-82e9-36855f93d388",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                500,
                1420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser11').item.json.x }}, {{ $('Coordinate Parser11').item.json.y}})\""
              },
              "id": "d692710a-dfbf-4614-9ed8-2c1410b75d3f",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                1420
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                1400
              ],
              "typeVersion": 1,
              "id": "2c6a739f-234e-4296-9fce-3eac01c4b9ea",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "dde78115-7bc1-4403-b2d2-fabd40aa16b0",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                1420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser13').item.json.x }}, {{ $('Coordinate Parser13').item.json.y }}); time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser13').item.json.x }}, {{ $('Coordinate Parser13').item.json.y }})\""
              },
              "id": "90a7c719-a1a8-4940-a152-23d367c8a5c9",
              "name": "Click 11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                660,
                1640
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "19d3dfe9-9cf6-4f3b-b3c9-33b634386b89",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                1640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-SeleccionarTodos-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "f1aaa744-e871-4139-81a6-4fa6678a1dc1",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                340,
                1640
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3bab3e1a-c995-4b23-a9ec-122d219c1775",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                500,
                1640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.click({{ $('Coordinate Parser14').item.json.x -15}}, {{ $('Coordinate Parser14').item.json.y }})\""
              },
              "id": "4366f0da-f466-43a3-8557-1286ca1df9a1",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                1640
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion de Estados\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                1620
              ],
              "typeVersion": 1,
              "id": "14bc0058-107a-4ed3-98d1-e5f31d1d9f5b",
              "name": "Sticky Note11"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(0.5);direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-PendEnvio-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "2130288e-c562-4b92-9677-958a26c653ab",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                980,
                1640
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "912d3fff-3b37-497b-9e77-b7bd63351c76",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1140,
                1640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "192514ea-eee5-40c0-965d-c3e8d6c54665",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                180,
                1860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "8bd12310-6899-4e59-923d-51c632f4cf60",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                360,
                1860
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "0aee3528-5d0e-4ede-a4a8-7382358e48f8",
              "name": "Coordinate Parser15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                520,
                1860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser15').item.json.x }}, {{ $('Coordinate Parser15').item.json.y }})\""
              },
              "id": "b29879c9-5a49-462f-aac4-a696b3b36def",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1300,
                1860
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -140,
                1840
              ],
              "typeVersion": 1,
              "id": "d40957be-61d2-40c8-8c55-6d0ae9259782",
              "name": "Sticky Note12"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import time; time.sleep(4);direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Distritos-CD.png', grayscale=True, confidence=0.6) is not None)\"\n"
              },
              "id": "40b372e0-a789-4857-a243-8696a0648995",
              "name": "Locate On Screen16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1140,
                1000
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1de11e8e-1b46-4798-b4fe-c0d9c0f2bac0",
                      "leftValue": "={{ $json.stdout }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                1300,
                1000
              ],
              "id": "3bbfc1e1-323d-4e0d-9eeb-49cd9e866d94",
              "name": "If"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -400,
                -120
              ],
              "id": "2a9403a1-4df3-42e3-b9e6-db3371d4c6f8",
              "name": "Edit Fields"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "OpenBrowserCmd",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Locate On Screen3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser3": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Supabase2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase2": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Get Table - V",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click 11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click 11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser15": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Table - V": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen16": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "2511769a-dc83-42c6-8881-d8a47f58f93b",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-05-23T13:31:59.847Z",
          "updatedAt": "2025-07-14T13:55:06.000Z",
          "id": "sKItisoN4WjUR0bh",
          "name": "N8N-BackUp-2",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "content": "## Subworkflow",
                "height": 732,
                "width": 1791,
                "color": 6
              },
              "id": "10835d01-1bd7-463d-b120-128973495f51",
              "name": "Sticky Note",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -860,
                -220
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "29925b9b-2784-4011-b1ca-ee55aba7b994",
              "name": "Execute Workflow Trigger",
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "position": [
                -800,
                160
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
                      "name": "Done",
                      "type": "boolean",
                      "value": true
                    }
                  ]
                },
                "options": {}
              },
              "id": "55931150-5ecd-46fe-b1de-24b4c38a8300",
              "name": "Return",
              "type": "n8n-nodes-base.set",
              "position": [
                740,
                140
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "url": "={{ $json.download_url }}",
                "options": {}
              },
              "id": "84b414b0-fcdf-4831-ac71-7a54d91a05fe",
              "name": "Get File",
              "type": "n8n-nodes-base.httpRequest",
              "position": [
                -220,
                -80
              ],
              "typeVersion": 4.2
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
                      "operator": {
                        "type": "string",
                        "operation": "empty",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.content }}",
                      "rightValue": ""
                    },
                    {
                      "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
                      "operator": {
                        "type": "string",
                        "operation": "notExists",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.error }}",
                      "rightValue": ""
                    }
                  ]
                },
                "options": {}
              },
              "id": "db0d5bb9-0471-431d-9115-cc60193d0401",
              "name": "If file too large",
              "type": "n8n-nodes-base.if",
              "position": [
                -400,
                -80
              ],
              "typeVersion": 2
            },
            {
              "parameters": {},
              "id": "d3f4de78-443c-4bbe-9f97-9ed0d4f8eb5f",
              "name": "Merge Items",
              "type": "n8n-nodes-base.merge",
              "position": [
                -400,
                140
              ],
              "typeVersion": 2
            },
            {
              "parameters": {
                "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
              },
              "id": "cdfa488d-5a1d-462b-9bfa-5650d21babae",
              "name": "isDiffOrNew",
              "type": "n8n-nodes-base.code",
              "position": [
                -220,
                140
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "dataType": "string",
                "value1": "={{$json.github_status}}",
                "rules": {
                  "rules": [
                    {
                      "value2": "same"
                    },
                    {
                      "value2": "different",
                      "output": 1
                    },
                    {
                      "value2": "new",
                      "output": 2
                    }
                  ]
                }
              },
              "id": "60807492-4618-49e9-8885-c1bde065f535",
              "name": "Check Status",
              "type": "n8n-nodes-base.switch",
              "position": [
                100,
                120
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "f8c7f8e3-a199-4d2c-8a1d-828368fe0f27",
              "name": "Same file - Do nothing",
              "type": "n8n-nodes-base.noOp",
              "position": [
                420,
                -20
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "10bf2f7e-11b3-40b7-addc-dbb411c4377e",
              "name": "File is different",
              "type": "n8n-nodes-base.noOp",
              "position": [
                340,
                140
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "1bae8f62-a5bb-4a0f-9b35-ff249a82cabc",
              "name": "File is new",
              "type": "n8n-nodes-base.noOp",
              "position": [
                340,
                300
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "resource": "file",
                "owner": {
                  "__rl": true,
                  "value": "=SimonTeralv",
                  "mode": ""
                },
                "repository": {
                  "__rl": true,
                  "value": "=n8n-backup",
                  "mode": ""
                },
                "filePath": "={{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
                "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
                "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
              },
              "id": "ce97e9a6-1852-4375-a41b-b848ba56572d",
              "name": "Create new file",
              "type": "n8n-nodes-base.github",
              "position": [
                500,
                300
              ],
              "typeVersion": 1,
              "webhookId": "5633e810-24ea-4bbc-98dc-a595110ec5f7",
              "credentials": {
                "githubApi": {
                  "id": "lo1aXDz0LTmkrmZH",
                  "name": "GitHub account"
                }
              }
            },
            {
              "parameters": {
                "resource": "file",
                "operation": "edit",
                "owner": {
                  "__rl": true,
                  "value": "=SimonTeralv",
                  "mode": ""
                },
                "repository": {
                  "__rl": true,
                  "value": "=n8n-backup",
                  "mode": ""
                },
                "filePath": "={{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
                "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
                "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
              },
              "id": "3bd8ea7a-f591-4767-8627-46337c178dcf",
              "name": "Edit existing file",
              "type": "n8n-nodes-base.github",
              "position": [
                500,
                140
              ],
              "typeVersion": 1,
              "webhookId": "08f0f05e-647a-4e7b-a057-1d8053e51953",
              "credentials": {
                "githubApi": {
                  "id": "lo1aXDz0LTmkrmZH",
                  "name": "GitHub account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
                      "name": "subPath",
                      "type": "string",
                      "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "id": "d0ff9a5b-fd89-4093-a2da-7825289bc3a5",
              "name": "Create sub path",
              "type": "n8n-nodes-base.set",
              "position": [
                -60,
                140
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "resource": "file",
                "operation": "get",
                "owner": {
                  "__rl": true,
                  "value": "SimonTeralv",
                  "mode": "name"
                },
                "repository": {
                  "__rl": true,
                  "value": "n8n-backup",
                  "mode": "name"
                },
                "filePath": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
                "asBinaryProperty": false,
                "additionalParameters": {}
              },
              "id": "cb5ad054-f362-4c5a-8612-f792d3629137",
              "name": "Get file data",
              "type": "n8n-nodes-base.github",
              "position": [
                -600,
                -80
              ],
              "typeVersion": 1,
              "alwaysOutputData": true,
              "webhookId": "2614e8f8-53f3-409d-ba5e-23bb90a1a100",
              "credentials": {
                "githubApi": {
                  "id": "lo1aXDz0LTmkrmZH",
                  "name": "GitHub account"
                }
              },
              "continueOnFail": true
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
                      "name": "repo_owner",
                      "type": "string",
                      "value": "=SimonTeralv"
                    },
                    {
                      "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
                      "name": "repo_name",
                      "type": "string",
                      "value": "=n8n-backup"
                    },
                    {
                      "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
                      "name": "repo_path",
                      "type": "string",
                      "value": "="
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "id": "3244a309-dfe1-44db-801f-21f14a3cffbe",
              "name": "Config",
              "type": "n8n-nodes-base.set",
              "position": [
                -600,
                160
              ],
              "typeVersion": 3.4
            }
          ],
          "connections": {
            "Execute Workflow Trigger": {
              "main": [
                [
                  {
                    "node": "Config",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get File": {
              "main": [
                [
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If file too large": {
              "main": [
                [
                  {
                    "node": "Get File",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Merge Items": {
              "main": [
                [
                  {
                    "node": "isDiffOrNew",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "isDiffOrNew": {
              "main": [
                [
                  {
                    "node": "Create sub path",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Check Status": {
              "main": [
                [
                  {
                    "node": "Same file - Do nothing",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "File is different",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "File is new",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Same file - Do nothing": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "File is different": {
              "main": [
                [
                  {
                    "node": "Edit existing file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "File is new": {
              "main": [
                [
                  {
                    "node": "Create new file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Create new file": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit existing file": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Create sub path": {
              "main": [
                [
                  {
                    "node": "Check Status",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get file data": {
              "main": [
                [
                  {
                    "node": "If file too large",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Config": {
              "main": [
                [
                  {
                    "node": "Get file data",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 1
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "b4f97b3d-069d-41af-96d0-526a9fda6454",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-03-21T15:19:35.951Z",
          "updatedAt": "2025-07-17T11:36:45.000Z",
          "id": "sf6Q8o3rnLdk87WT",
          "name": "ControlDocumentario-Carga-Terminal 6",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "0cda41e0-7cda-4c35-8413-0e924f0c124a",
              "name": "When clicking ‘Test workflow’",
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -460,
                200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "6ac0978f-b7d1-445e-a972-95c6a7168572",
              "name": "Save Screenshot",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "95aeb12c-5726-46d4-8074-64b03217fd78",
              "name": "Locate On Screen",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                200
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b5254044-f782-4ccc-bc6f-d2d94671e9ea",
              "name": "Coordinate Parser4",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                200
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser4').item.json.x }}, {{ $('Coordinate Parser4').item.json.y }}); pyautogui.typewrite('30716401622'); time.sleep(1); pyautogui.typewrite(['escape'])\""
              },
              "id": "9953cf79-63cb-4c0f-9165-570e55f33da2",
              "name": "Click",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                200
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "operation": "getAll",
                "tableId": "Usuarios-Personal"
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                180,
                200
              ],
              "id": "32dfda8a-391d-455a-9b2a-04c63ce66aca",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                180
              ],
              "typeVersion": 1,
              "id": "0248adbf-499e-4b32-800b-c50b6549d8dc",
              "name": "Sticky Note15"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "46d94d94-13f2-47b4-8fcf-f7665015e397",
              "name": "Save Screenshot1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Inicio-Sesion-Secret-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "8c3f8ac6-27b6-4230-a2a8-b6db7004c475",
              "name": "Locate On Screen1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                420
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2be91f4c-0460-4071-96be-d183772a1d6d",
              "name": "Coordinate Parser",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                420
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser').item.json.x}}, {{ $('Coordinate Parser').item.json.y }}); pyautogui.typewrite('TR33Ingresos#')\""
              },
              "id": "a2cb21a3-52c1-4f02-8247-f087e753230e",
              "name": "Click1",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                420
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Login\n**Ingresa Contraseña del Usuario**\n",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                400
              ],
              "typeVersion": 1,
              "id": "9598c9c8-e14d-446f-bd59-b9d8ad39b1c8",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "3bd7e123-5476-4f6a-b9eb-d157fd9d65ee",
              "name": "Save Screenshot2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "5d2fccfc-8afc-4530-ba98-47fc989b9464",
              "name": "Locate On Screen2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                640
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "29a6b52e-84a6-41fd-a6b1-b64a24fc147f",
              "name": "Coordinate Parser1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                640
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser1').item.json.x }}, {{ $('Coordinate Parser1').item.json.y }})\""
              },
              "id": "4f701d89-9827-40fe-a79e-610da7848913",
              "name": "Click2",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                640
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Presiona el botón Ingresar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                620
              ],
              "typeVersion": 1,
              "id": "43ff0831-a983-492a-b2f2-7714ab053134",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "03a6f5d9-7c52-4a58-b7f7-ad553cc24d17",
              "name": "Save Screenshot3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Aceptar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "5c9c6d8c-fdd7-411a-8d2e-ff3dfd506d41",
              "name": "Locate On Screen3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                860
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9eeab6f8-d540-4554-a11a-476012fcca67",
              "name": "Coordinate Parser2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                860
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser2').item.json.x }}, {{ $('Coordinate Parser2').item.json.y }})\""
              },
              "id": "87346d8d-a27d-4b11-95b3-80c381c86869",
              "name": "Click3",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                860
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Botón Aceptar\n**Presiona Aceptar en la pop up**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                840
              ],
              "typeVersion": 1,
              "id": "1dfb0702-5d19-483d-b1da-47df53cfe534",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "23f544e2-65b9-4451-809e-94058115d33f",
              "name": "Save Screenshot4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Ingresar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "62f1e4d1-e281-40ee-bb52-c0bd3a516a74",
              "name": "Locate On Screen4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                1300
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "a641aebf-b471-4f3e-9560-44a54c251f8b",
              "name": "Coordinate Parser3",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                1300
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser3').item.json.x}}, {{ $('Coordinate Parser3').item.json.y }})\""
              },
              "id": "8fa6e820-4317-46a6-968e-680f483202db",
              "name": "Click4",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                1300
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Ingresar\n**Presiona el botón Ingresar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1280
              ],
              "typeVersion": 1,
              "id": "089341c3-26d9-4f3d-bbe3-f2b32fb2ce70",
              "name": "Sticky Note3"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "0ff9ece3-63cd-4a14-be40-1279c45db268",
              "name": "Save Screenshot6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AreaTrabajo-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "c354e69b-4c1b-40c5-b0d6-88a465116b68",
              "name": "Locate On Screen6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                1520
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9461a017-a7c0-4b17-8917-cc4e45191037",
              "name": "Coordinate Parser6",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                1520
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser6').item.json.x }}, {{ $('Coordinate Parser6').item.json.y }})\""
              },
              "id": "e9158f1e-7002-4ab5-b5c9-7c45b8f0ac90",
              "name": "Click6",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1360,
                1520
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Area de trabajo\n**Cambia al menú \nArea de Trabajo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1500
              ],
              "typeVersion": 1,
              "id": "5d17ee18-da1b-4496-b91c-b2ea48686a60",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "923185fc-1e39-494f-83b2-98efc663a9b5",
              "name": "Save Screenshot9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-SeleccionarTodos-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "79e83bf3-c4a8-428e-9388-64f6f4352369",
              "name": "Locate On Screen10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                940,
                1980
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "613b7b2f-1808-43f2-a805-15630214422e",
              "name": "Coordinate Parser9",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1100,
                1980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.click({{ $('Coordinate Parser10').item.json.x -25}}, {{ $('Coordinate Parser10').item.json.y }})\""
              },
              "id": "8c8c27d9-4b6d-4c08-83fa-40efa94f2a35",
              "name": "Click8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                1980
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion de Estados\n**Selecciona los documentos\npendientes**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1960
              ],
              "typeVersion": 1,
              "id": "8c46a54b-0b07-4ebd-910c-6b9d25c1e1d9",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(0.5); direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-PendEnvio-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "486d1522-934b-46b5-b159-0bb186300e2a",
              "name": "Locate On Screen11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1580,
                1980
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b53c2ca0-110a-44a1-aeee-9b8f0be37e4f",
              "name": "Coordinate Parser10",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1740,
                1980
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "13ea9ef2-6288-43c4-9d3e-eef6efef052d",
              "name": "Save Screenshot11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Estados-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "d8fc86d6-cceb-4b52-991b-cdf45e81b652",
              "name": "Locate On Screen13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                940,
                1760
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "010896d8-8e2d-49da-be0a-fd3beb2a925e",
              "name": "Coordinate Parser11",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1100,
                1760
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser11').item.json.x }}, {{ $('Coordinate Parser11').item.json.y}})\""
              },
              "id": "f20923c9-495c-4928-9c16-cd1055261c0e",
              "name": "Click9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                1760
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccion de Estados\n**Deselecciona los estados\n de los documentos**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1740
              ],
              "typeVersion": 1,
              "id": "ebc72d9e-d967-4596-b9a9-f8faf94f6340",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser9').item.json.x }}, {{ $('Coordinate Parser9').item.json.y }}); time.sleep(0.5);pyautogui.click({{ $('Coordinate Parser9').item.json.x }}, {{ $('Coordinate Parser9').item.json.y }})\""
              },
              "id": "838d2f39-6f0d-459a-a8f4-fa75e1e7af21",
              "name": "Click 11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1260,
                1980
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "ac0a38a0-e1a1-482e-ae3e-36f8f67a5329",
              "name": "Save Screenshot10",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                2200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Buscar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "6a544c31-8b76-4430-aa57-d9e2763a8ace",
              "name": "Locate On Screen9",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                960,
                2200
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ce393a0a-d668-49a3-859f-3a9b37fadca7",
              "name": "Coordinate Parser12",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1120,
                2200
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser12').item.json.x }}, {{ $('Coordinate Parser12').item.json.y }})\""
              },
              "id": "5c4a98bb-5ae4-4d1b-b2fc-fe72be3d8df7",
              "name": "Click11",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1900,
                2200
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Presiona el botón buscar**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                2180
              ],
              "typeVersion": 1,
              "id": "d45d2571-2426-429c-a659-a9bb41323f75",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "command": "=powershell -Command \"Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', '--user-data-dir=C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile', 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "f2450b44-876e-4226-9f11-0a8e82a5971f",
              "name": "OpenBrowserCmd",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                60
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1); img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "74f1f51b-d812-4447-9c97-0094c2efa15e",
              "name": "Save Screenshot13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                2880
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Boton-InscripMono-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "9422faab-fcda-4aab-9a26-742f9451356e",
              "name": "Locate On Screen14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2420,
                2880
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ce00a55d-08c0-4b25-8443-04f20032fb4e",
              "name": "Coordinate Parser14",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2580,
                2880
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click(827, {{ $('Supabase12').item.json.valor +24}})\""
              },
              "id": "26c0bfc2-c53f-45dd-b710-eaca047e1014",
              "name": "Click13",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                2880
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pytesseract; from PIL import Image, ImageEnhance, ImageFilter; import cv2; import numpy as np; import json;direc = '{{$('Edit Fields').item.json.direc}}'; pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'; image_path = fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png'; image = Image.open(image_path).convert('L'); image = ImageEnhance.Contrast(image).enhance(3).filter(ImageFilter.EDGE_ENHANCE); img_np = np.array(image); _, binary = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU); data = pytesseract.image_to_data(binary, output_type=pytesseract.Output.DICT, config=r'--oem 3 --psm 3'); results = [{'text': text, 'confidence': data['conf'][i], 'x': data['left'][i], 'y': data['top'][i], 'width': data['width'][i], 'height': data['height'][i]} for i, text in enumerate(data['text']) if text.strip() and data['conf'][i] > 60]; print(json.dumps(results, indent=2))\""
              },
              "id": "ffc991eb-aa2c-4da2-9a36-a0cecb091ed8",
              "name": "Local OCR Tesseract",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2980,
                2660
              ],
              "notesInFlow": false,
              "onError": "continueRegularOutput",
              "notes": "Get Text and coordinates from Image using local OCR\n\nUses PyTesseract, an open source ocr software to detect the text of an image and the specific coordinates of that text"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(3);direc = '{{$('Edit Fields').item.json.direc}}'; img = pyautogui.screenshot(region=(320,{{ $('Supabase12').item.json.valor }}, 200, 50)); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png')\""
              },
              "id": "a9407cd4-1a77-4fb1-95d6-6ce977bb77a5",
              "name": "Save Screenshot17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2840,
                2660
              ]
            },
            {
              "parameters": {
                "jsCode": "const input = $input.all()[0].json;\n\nconst nombresPermitidos = [\n  \"CUNNINGHAM MARTIN\", \"FERREYRA FACUNDO AMILCAR\", \"CESPEDES ESTEBAN\",\n  \"QUIROZ JAMES\", \"DONAIRE PABLO RUBEN\", \"GOROSITO AGUSTIN\",\n  \"ROBLEDO HECTOR DANIEL\", \"FERREYRA JULIAN ANDRES\", \"MARCELO GAMALERO\",\n  \"RUSSO FEDERICO MANUEL\", \"MASSA AGUSTIN\", \"CHIAVON GERARDO XAVIER\",\n  \"TERAN ALVARENGA SIMON\", \"DELPINO NICOLAS ABEL\", \"CARRIZO JUAN MANUEL\",\n  \"ACEVEDO JONATHAN\", \"BONVECHI AGUSTIN ANDRES\", \"BRIAN EZEQUIEL VAN WELLE\", \"GONZALEZ TOMAS FRANCISCO\"\n];\n\nconst palabrasExcluidas = [\"ARGENTINA\", \"ARGENTINO\", \"EMPLEADOR\", \"-\", \"DNI\", \"CUIL\", \"CUIT\"];\n\nfunction normalizar(texto) {\n  return texto\n    .toUpperCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/\\s+/g, \" \")\n    .trim();\n}\n\nfunction levenshtein(a, b) {\n  const dp = Array.from({ length: a.length + 1 }, () => Array(b.length + 1).fill(0));\n  for (let i = 0; i <= a.length; i++) dp[i][0] = i;\n  for (let j = 0; j <= b.length; j++) dp[0][j] = j;\n  for (let i = 1; i <= a.length; i++) {\n    for (let j = 1; j <= b.length; j++) {\n      dp[i][j] = a[i - 1] === b[j - 1]\n        ? dp[i - 1][j - 1]\n        : Math.min(dp[i - 1][j - 1] + 1, dp[i][j - 1] + 1, dp[i - 1][j] + 1);\n    }\n  }\n  return dp[a.length][b.length];\n}\n\n// Parsear OCR\nlet palabrasOCR;\ntry {\n  const jsonStr = input.stdout.replace(/\\\\n/g, \"\").replace(/\\\\\"/g, '\"');\n  palabrasOCR = JSON.parse(jsonStr);\n} catch (error) {\n  return {\n    json: {\n      error: \"Error al convertir el string a JSON\",\n      details: error.message\n    }\n  };\n}\n\n// Limpiar palabras\nconst palabrasValidas = palabrasOCR\n  .map(p => normalizar(p.text))\n  .filter(t => t.length > 1 && !palabrasExcluidas.some(e => t.includes(e)));\n\nif (palabrasValidas.length === 0) {\n  return {\n    json: {\n      mensaje: \"No se detectó ningún texto OCR útil\",\n      palabrasOCR\n    }\n  };\n}\n\n// Comparar cada palabra OCR contra palabras de nombres permitidos\nlet mejorNombre = null;\nlet maxCoincidencias = 0;\n\nfor (const nombre of nombresPermitidos) {\n  const palabrasNombre = normalizar(nombre).split(\" \");\n  let coincidencias = 0;\n\n  for (const palabraOCR of palabrasValidas) {\n    for (const palabraNombre of palabrasNombre) {\n      const distancia = levenshtein(palabraOCR, palabraNombre);\n      if (\n        palabraOCR.length > 3 &&\n        distancia <= 1\n      ) {\n        coincidencias++;\n        break; // Una coincidencia por palabra OCR es suficiente\n      }\n    }\n  }\n\n  if (coincidencias > maxCoincidencias) {\n    maxCoincidencias = coincidencias;\n    mejorNombre = nombre;\n  }\n}\n\nreturn {\n  json: maxCoincidencias > 0\n    ? {\n        nombreAsignado: mejorNombre,\n        palabrasOCR: palabrasValidas,\n        coincidencias: maxCoincidencias\n      }\n    : {\n        mensaje: \"No se detectó ningún nombre válido\",\n        palabrasOCR: palabrasValidas\n      }\n};\n"
              },
              "id": "143ec728-dd31-4e18-9adb-91ff446a07be",
              "name": "OCR Word2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                3120,
                2660
              ],
              "notesInFlow": false,
              "onError": "continueRegularOutput",
              "notes": "Required with Parser"
            },
            {
              "parameters": {
                "content": "## Lectura de la solicitud\n**Lee la solicitud en pantalla**",
                "height": 200,
                "width": 1580,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                2620
              ],
              "typeVersion": 1,
              "id": "80b96511-afd8-4e9b-a8a6-26defebf16c8",
              "name": "Sticky Note13"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "e2e91508-76f4-4702-b3fb-779e6fe85fc5",
              "name": "Save Screenshot14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                3560
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser15').item.json.x }}, {{ $('Coordinate Parser15').item.json.y }})\""
              },
              "id": "14213781-9a72-4996-b3ad-3b3e908f6f73",
              "name": "Click14",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                3560
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton seleccionar Archivo\n**Presiona el botón**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                3540
              ],
              "typeVersion": 1,
              "id": "46cd5451-8a71-4caf-8cfa-cccece432f37",
              "name": "Sticky Note14"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(5); img = ImageGrab.grab(); img.save(r'C:\\\\Users\\\\Uusario Nuevo Prueba\\\\.n8n\\\\Screenshots\\\\ControlDocumentario\\\\WorkingScreen.png')\""
              },
              "id": "48da4c1a-df33-4756-9465-ad950f8c47cd",
              "name": "Save Screenshot33",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                3780
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\Barra-Abrir-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "cbb7ed62-c6b0-4964-91fb-bc450acb56e9",
              "name": "Locate On Screen24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2400,
                3780
              ],
              "retryOnFail": true,
              "disabled": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "258ccbd3-f90d-410a-a77b-7108e5168e2f",
              "name": "Coordinate Parser40",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2560,
                3780
              ],
              "disabled": true
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                3760
              ],
              "typeVersion": 1,
              "id": "67d5bb96-7b52-428a-8e78-e470b65b47db",
              "name": "Sticky Note41"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "1278e655-1366-4eb8-ad47-023b83c86dcf",
              "name": "Coordinate Parser15",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2580,
                3560
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-SeleccionarArchivo-CD.png', grayscale=True, confidence=0.6))\""
              },
              "id": "7cad60ea-126a-491d-b7ad-f6dcb1eed7ce",
              "name": "Locate On Screen15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2420,
                3560
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(1);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "b745cb9d-0bf7-45ca-a656-2d2eadcab47b",
              "name": "Save Screenshot15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                3340
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-AdjuntarArchivo-CD.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "5da27db7-b76a-4210-bd33-5aaf6ba4b487",
              "name": "Locate On Screen16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2420,
                3340
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f7de9414-d86c-495e-b519-7a56d35034fb",
              "name": "Coordinate Parser16",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2580,
                3340
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser16').item.json.x }}, {{ $('Coordinate Parser16').item.json.y }})\""
              },
              "id": "ddc34bb3-c90d-40d2-8458-dab25d145ef5",
              "name": "Click15",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                3340
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Adjuntar Archivo\n**Intenta presionar el botón Adjuntar archivo,\nEn caso que no pueda significa\nque no está en una tarea,\nPor lo que sigue con el siguiente documento**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                3320
              ],
              "typeVersion": 1,
              "id": "2214920c-721e-48dd-8697-539697743361",
              "name": "Sticky Note16"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(0);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-WorkingScreen-CD.png')\""
              },
              "id": "39a110c5-ea82-48b0-9c57-2bef85a83ea7",
              "name": "Save Screenshot16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2220,
                2420
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Barra-Buscar-CD.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "4909d4bf-d6b0-4e7a-8d84-c0673fc282b9",
              "name": "Locate On Screen17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2360,
                2420
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "9db2450a-ce1b-4739-9d89-984097cbf052",
              "name": "Coordinate Parser17",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2520,
                2420
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser17').item.json.x +50}}, {{ $('Coordinate Parser17').item.json.y }});pyautogui.click({{ $('Coordinate Parser17').item.json.x +50}}, {{ $('Coordinate Parser17').item.json.y }}); pyautogui.typewrite('{{ $('Loop Over Items3').item.json.documento }}'); time.sleep(5);pyautogui.doubleClick(300,450);pyautogui.click(300,450)\""
              },
              "id": "cc52c29d-3e6a-4527-aa6e-4c501461189d",
              "name": "Click16",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3120,
                2420
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar\n**Ingresa Nombre de los \ndocumentos a cargar**",
                "height": 180,
                "width": 1580,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                2400
              ],
              "typeVersion": 1,
              "id": "861f6a42-7eec-4e39-a7ae-78d92e48e761",
              "name": "Sticky Note17"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "57f60d4f-b535-406f-a1a5-088be9b5b277",
              "name": "Save Screenshot19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2040,
                4480
              ]
            },
            {
              "parameters": {
                "content": "## En caso que No exista\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                4460
              ],
              "typeVersion": 1,
              "id": "cc43cf26-754c-419c-8a91-aaab62a33ad2",
              "name": "Sticky Note18"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Abrir-NoExiste-CD.png', grayscale=True, confidence=0.5))\""
              },
              "id": "53e506e3-32ad-4e5e-9525-9cfabc046a45",
              "name": "Locate On Screen18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2220,
                4480
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "batchSize": "=1",
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                1100,
                2400
              ],
              "id": "69096798-0b9a-43ae-b368-d3f17a18dbe9",
              "name": "Loop Over Items3"
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"documento[0]\":\"Poliza accidentes personales\",\n  \"documento[1]\": \"Monotributo y pago\"\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                780,
                2400
              ],
              "id": "ab70c3b6-f76f-4bb3-b24c-ff9028d131b0",
              "name": "Edit Fields2"
            },
            {
              "parameters": {
                "fieldToSplitOut": "documento",
                "options": {}
              },
              "type": "n8n-nodes-base.splitOut",
              "typeVersion": 1,
              "position": [
                940,
                2400
              ],
              "id": "2156b6b9-3208-4450-9dd8-ca53bfaf1eed",
              "name": "Split Out"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab; from datetime import date; import datetime; import time; import pyautogui; time.sleep(5);direc = '{{$('Edit Fields').item.json.direc}}'; img = pyautogui.screenshot(region=(650,405, 550, 300)); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen.png')\""
              },
              "id": "3441c1b3-fdc4-478b-9c1f-0d9656f4eb42",
              "name": "Save Screenshot20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                4920
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Prius-AdjuntarTodos.png', grayscale=True, confidence=0.6))\"\n"
              },
              "id": "46bb4f7d-ac6e-4813-aabb-605937f6f7aa",
              "name": "Locate On Screen19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2420,
                4920
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "cdd42ff6-60f2-4018-9047-47bd71e19e6c",
              "name": "Coordinate Parser19",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2620,
                4920
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser19').item.json.x +460}}, {{ $('Coordinate Parser19').item.json.y +550}})\""
              },
              "id": "ec785b17-f5be-4bbe-881f-eb3a3613ad4a",
              "name": "Click18",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                4920
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Adjuntar Archivo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                4900
              ],
              "typeVersion": 1,
              "id": "31c02c13-f731-4139-830f-a7cec3f24bec",
              "name": "Sticky Note19"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "4870c664-6285-4da3-92eb-a91377f90621",
              "name": "Save Screenshot21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2580,
                4480
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Volver-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "be379d31-5418-41de-bea2-3a411c4aee8e",
              "name": "Locate On Screen20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2760,
                4480
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "f49a4c6d-7af5-4a92-ba4e-f5d01e2a93c8",
              "name": "Coordinate Parser20",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2940,
                4480
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser20').item.json.x }}, {{ $('Coordinate Parser20').item.json.y }})\""
              },
              "id": "0df5f446-e6eb-467d-a516-e360d91990e8",
              "name": "Click19",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                4480
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## En caso que No exista\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                4680
              ],
              "typeVersion": 1,
              "id": "c217dedb-984c-4481-bc5c-83780a21808f",
              "name": "Sticky Note20"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "8b880a4b-68c5-4e3e-b8e3-bd432fd26c2e",
              "name": "Save Screenshot22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                4700
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Volver-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "ee0b13ca-69ab-4903-a73d-a2b6e8aab396",
              "name": "Locate On Screen21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2420,
                4700
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3e54bc4b-0be5-48ef-9bb2-7d8b5744256d",
              "name": "Coordinate Parser21",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2580,
                4700
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser21').item.json.x }}, {{ $('Coordinate Parser21').item.json.y }}); time.sleep(3)\""
              },
              "id": "a549fe36-8538-4d17-a79c-7e504b743769",
              "name": "Click20",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2800,
                4700
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(4); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "99675574-3c8f-4a41-8904-0bf2ff55bf35",
              "name": "Save Screenshot23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                5140
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Continuar-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "8b08af75-2a30-4f48-bcbd-a052ec135348",
              "name": "Locate On Screen22",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2420,
                5140
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "560ab734-55c7-4b0f-ac59-34fd20e04d0b",
              "name": "Coordinate Parser22",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2580,
                5140
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser22').item.json.x }}, {{ $('Coordinate Parser22').item.json.y }})\""
              },
              "id": "4e5ee323-f257-42d9-b189-2b6eddbb276f",
              "name": "Click21",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                5140
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Boton Adjuntar Archivo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                5120
              ],
              "typeVersion": 1,
              "id": "85ec6eba-ae16-4d66-994d-958bfb8b0e2b",
              "name": "Sticky Note21"
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  const parsedLine = JSON.parse(line);\n  return parsedLine;  // Puedes procesar más si es necesario\n});\n\n// Establecer la salida como el array de objetos\nreturn lines.map(line => {\n  return { json: line };  // Formateamos cada línea como un objeto JSON\n});"
              },
              "id": "42bfda69-b4e0-4be5-8179-376cf6c41e19",
              "name": "Divide html columns2",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2700,
                2660
              ],
              "disabled": true
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(1);pyautogui.typewrite(['esc']);pyautogui.typewrite(['esc'])\""
              },
              "id": "f04c52c6-b13c-47fc-8bb2-afc8afe19937",
              "name": "Click17",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2400,
                4480
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(5); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab);driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [row.find_elements(By.TAG_NAME, 'td')[3].text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for row in rows if len(row.find_elements(By.TAG_NAME, 'td')) > 3 and row.find_elements(By.TAG_NAME, 'td')[3].text.strip()]; [print(json.dumps({'columna_4': item})) for item in data]\""
              },
              "id": "61f8f5c6-e47e-4512-b634-185f1321b7b8",
              "name": "Get Table8",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2540,
                2660
              ],
              "disabled": true
            },
            {
              "parameters": {
                "content": "## Seleccion solicitud\n**Presiuona la primer solicitud**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                2860
              ],
              "typeVersion": 1,
              "id": "a0a8bed8-c6d8-4923-97d7-6ceaaabfa5e0",
              "name": "Sticky Note24"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "={{ $('Supabase6').item.json.valor +1}}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2220,
                2660
              ],
              "id": "58f09fa5-8c2b-4f13-b3f2-239fdaa33300",
              "name": "Supabase1",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"import time, json; from selenium import webdriver; from selenium.webdriver.chrome.options import Options; from selenium.webdriver.common.by import By; time.sleep(2); opt = Options(); opt.add_experimental_option('debuggerAddress', 'localhost:1313'); driver = webdriver.Chrome(options=opt); active_tab = driver.window_handles[0]; driver.switch_to.window(active_tab);driver.switch_to.window(driver.current_window_handle); time.sleep(1); table = driver.find_element(By.ID, 'tblRequerimientos'); rows = table.find_elements(By.TAG_NAME, 'tr'); data = [row.find_elements(By.TAG_NAME, 'td')[3].text.replace('\\n', ' ').strip().encode('ascii', 'ignore').decode('ascii') for row in rows if len(row.find_elements(By.TAG_NAME, 'td')) > 3 and row.find_elements(By.TAG_NAME, 'td')[3].text.strip()]; [print(json.dumps({'columna_4': item})) for item in data]\""
              },
              "id": "fb854f57-4bb4-4740-ba8e-0f499f27de55",
              "name": "Get Table12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1060,
                2660
              ]
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Start-Pixel"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "=470"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                780,
                2660
              ],
              "id": "483cde09-e7e8-4535-81c2-9f4ac3050327",
              "name": "Supabase4",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Loop-Index"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "valor",
                      "fieldValue": "=0"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                920,
                2660
              ],
              "id": "f9bb39ce-1665-461c-b7a7-33bb4fabbe53",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Obtener el texto desde el nodo anterior\nconst rawData = $json[\"stdout\"];\n\n// Separar las líneas\nconst lines = rawData.split(\"\\n\").map(line => {\n  // Procesar cada línea como un objeto\n  try {\n    const parsedLine = JSON.parse(line);\n    return parsedLine;  // Puedes procesar más si es necesario\n  } catch (e) {\n    return null;  // Manejo de error si una línea no es JSON válido\n  }\n}).filter(line => line !== null);  // Filtramos valores nulos si no se pudo parsear alguna línea\n\n// Establecer la salida como el número de items\nreturn [\n  {\n    json: {\n      itemCount: lines.length  // Devolvemos el número de objetos procesados\n    }\n  }\n];\n"
              },
              "id": "424bbc92-af76-4fe9-9db5-2812b6bc120c",
              "name": "Divide html columns7",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1200,
                2660
              ]
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Start-Pixel"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2380,
                2660
              ],
              "id": "517f8ef0-500b-435a-91c8-3bf266ad02eb",
              "name": "Supabase12",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6bec7028-141e-4c88-91ff-254fd5d268bf",
                      "leftValue": "={{ $('Divide html columns7').item.json.itemCount }}",
                      "rightValue": "={{ $('Supabase6').item.json.valor -1}}",
                      "operator": {
                        "type": "number",
                        "operation": "gt"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                1540,
                2660
              ],
              "id": "c29bfacf-4180-4f14-aa97-aae7de444681",
              "name": "If"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Loop-Index"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1400,
                2660
              ],
              "id": "aca0e38a-c527-46bc-92f5-5db44da06eab",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2);direc = '{{$('Edit Fields').item.json.direc}}'; img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "1f6dc1ea-7fe6-4a96-a2dc-ed7294d018a1",
              "name": "Save Screenshot5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                780,
                1080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-BUNGE-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "dde2c2b7-581a-423f-bd50-9da663d0faa7",
              "name": "Locate On Screen5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                920,
                1080
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "3452a082-e605-44cc-8122-1e73cf78f017",
              "name": "Coordinate Parser5",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1080,
                1080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser5').item.json.x }}, {{ $('Coordinate Parser5').item.json.y }})\""
              },
              "id": "7db16651-0e96-4aca-b567-823c0b6b2c64",
              "name": "Click5",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1220,
                1080
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## De Bunge a T6\n**Selecciona Terminal 6 entre \nlas opciones de plantas**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                460,
                1060
              ],
              "typeVersion": 1,
              "id": "c02ca9b1-e867-4bf7-80df-2b8f068cefb1",
              "name": "Sticky Note4"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(2); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "3f76033d-bd39-4ae8-ac9e-ade09107a23c",
              "name": "Save Screenshot12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1420,
                1080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Terminal 6-CD.png', grayscale=True, confidence=0.8))\"\n"
              },
              "id": "6cbd8e98-7271-4470-9894-30150e148c08",
              "name": "Locate On Screen12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1560,
                1080
              ],
              "retryOnFail": true
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "2c0220fc-7ea9-42fa-a7f3-be0e1439b480",
              "name": "Coordinate Parser13",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1720,
                1080
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(0);pyautogui.click({{ $('Coordinate Parser13').item.json.x }}, {{ $('Coordinate Parser13').item.json.y }})\""
              },
              "id": "10dcc5e8-ca0a-4d8d-a50f-fdb51cf79a27",
              "name": "Click12",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1860,
                1080
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $('Loop Over Items3').item.json.documento }}",
                            "rightValue": "Poliza accidentes personales",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "a5f6a6a0-49a4-4cac-b763-a19052173cce"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "poliza"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "1733e446-c337-45b9-bd6c-a65b8912055d",
                            "leftValue": "={{ $('Loop Over Items3').item.json.documento }}",
                            "rightValue": "Monotributo y pago",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Mono y Pago"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                2720,
                3780
              ],
              "id": "09f56bd5-18f3-49cb-b082-36276278a5c8",
              "name": "Switch"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('OCR Word2').item.json.Nombre}}'; time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\LA SEGUNDA\\Merge LA SEGUNDA'); time.sleep(2);pyautogui.typewrite(['enter'])\""
              },
              "id": "8c2363e3-bb7f-4bd8-861a-f14041fac46b",
              "name": "Ruta Poliza",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                3780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; import locale; locale.setlocale(locale.LC_TIME, 'es_ES');from datetime import datetime; current_date = datetime.now(); import time; numero = current_date.strftime('%m'); mes = current_date.strftime('%B').capitalize();anio = current_date.strftime('%Y');nombre= '{{$('OCR Word2').item.json.Nombre}}'; time.sleep(1); pyautogui.doubleClick(240, 963); time.sleep(5);pyautogui.typewrite(['backspace']); time.sleep(0); pyautogui.typewrite(fr'G:\\.shortcut-targets-by-id\\1Og8spmPVbHsBTZ42rh-L5K9GOHJyggk9\\INGRESOS A PLANTA\\DOCUMENTOS DE INGRESO\\ARCA - SEGURO\\{anio}\\{numero} - {mes} {anio}\\ARCA\\Merge ARCA'); time.sleep(2);pyautogui.typewrite(['enter'])\""
              },
              "id": "53ef4f4c-8346-4d5e-880e-9ed0a40f9835",
              "name": "Ruta Mono y Pago",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2920,
                3780
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "acf54165-3ee6-4969-beb4-b869d6593fce",
              "name": "Save Screenshot27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2040,
                4020
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Buscar-En-CD.png', grayscale=True, confidence=0.8))\""
              },
              "id": "fcf2f0cd-b340-43ab-99fb-e7fa4f5fe17f",
              "name": "Locate On Screen26",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                4020
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "b42b404c-9532-4731-ba5e-b3e7c6eadeb2",
              "name": "Coordinate Parser25",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2420,
                4020
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time;  nombre='{{$('OCR Word2').item.json.nombreAsignado}}'; time.sleep(0);pyautogui.click({{ $('Coordinate Parser25').item.json.x }}, {{ $('Coordinate Parser25').item.json.y }});time.sleep(1);pyautogui.typewrite(fr'{nombre}')\""
              },
              "id": "709a9da0-1920-49db-97f6-80888398c263",
              "name": "Click30",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                4020
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Buscar-Dirección\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                3980
              ],
              "typeVersion": 1,
              "id": "ca7bce87-27e1-4eae-a0d2-4dbc5b80fbd5",
              "name": "Sticky Note25"
            },
            {
              "parameters": {
                "command": "=python -c \"from PIL import ImageGrab;from datetime import date; import datetime; import time; time.sleep(3); direc = '{{$('Edit Fields').item.json.direc}}';img = ImageGrab.grab(); img.save(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\WorkingScreen-CD.png')\""
              },
              "id": "e10d0a96-3ceb-4365-b5fd-562f0e2bc6d7",
              "name": "Save Screenshot28",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2040,
                4260
              ]
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;direc = '{{$('Edit Fields').item.json.direc}}'; print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\pdf-save-CD.png', grayscale=True, confidence=0.7))\""
              },
              "id": "6fa1e243-642f-4d25-b27a-de0abc934d67",
              "name": "Locate On Screen27",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                4260
              ],
              "retryOnFail": true,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "689b2910-f60b-4e0a-9479-e2766aa08a87",
              "name": "Coordinate Parser26",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2420,
                4260
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time;  nombre='{{$('OCR Word2').item.json.Nombre}}'; time.sleep(0);pyautogui.doubleClick({{ $('Coordinate Parser26').item.json.x }}, {{ $('Coordinate Parser26').item.json.y }})\""
              },
              "id": "7977547a-91f7-4469-afc5-4934d244611d",
              "name": "Click31",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                4260
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "content": "## Seleccionar Archivo\n**Ingresa la dirección \ndonde se va a buscar\nel archivo**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                4220
              ],
              "typeVersion": 1,
              "id": "6590975a-dced-463d-9f0b-634f345e40c0",
              "name": "Sticky Note26"
            },
            {
              "parameters": {
                "content": "## Boton Adjuntar Archivo\n**Ingresa Nombre de Usuario**",
                "height": 180,
                "width": 1600,
                "color": 4
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                1700,
                5340
              ],
              "typeVersion": 1,
              "id": "0c61cb5d-eb22-48d2-87b1-dfc1d7e78b93",
              "name": "Sticky Note22"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui;from datetime import date; import datetime; import time; time.sleep(2); pyautogui.scroll(-1000)\""
              },
              "id": "3d7078b0-71bd-48e5-85d2-46c6fe3ad633",
              "name": "Scroll",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2240,
                5380
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "jsCode": "const output = $json[\"stdout\"];\n\n// Adjusted regex to match the new input format\nconst regex = /Point\\(x=(\\d+),\\s*y=(\\d+)\\)/;\nconst match = output.match(regex);\n\nconsole.log(\"Input:\", output);\nconsole.log(\"Regex match:\", match);\n\nif (match) {\n    const x = parseInt(match[1], 10);\n    const y = parseInt(match[2], 10);\n    console.log(\"Extracted values:\", { x, y });\n    return [{ x, y }];\n} else {\n    console.error(\"No match found. Invalid input format.\");\n    throw new Error('Invalid input format');\n}\n"
              },
              "id": "ecf3dbe2-53fb-47ca-98ed-83f7165bb107",
              "name": "Coordinate Parser24",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2680,
                5380
              ],
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(4);pyautogui.click({{ $json.x }},{{ $json.y }}); time.sleep(4);pyautogui.click(1030, 185)\""
              },
              "id": "61c3450d-6903-459f-9e62-79aba01f7095",
              "name": "Click24",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                3140,
                5380
              ],
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(fr'{direc}\\.n8n\\Screenshots\\ControlDocumentario\\Boton-Enviar-CD.png', grayscale=True, confidence=0.7))\"\n"
              },
              "id": "b3099103-44af-4267-9082-08020c6badad",
              "name": "Locate On Screen25",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                2480,
                5380
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "1de11e8e-1b46-4798-b4fe-c0d9c0f2bac0",
                      "leftValue": "={{ $json.error }}",
                      "rightValue": "True",
                      "operator": {
                        "type": "string",
                        "operation": "exists",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                1900,
                1520
              ],
              "id": "060fd003-0221-4bf9-8ee5-417ef33095cd",
              "name": "If1"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; direc = '{{$('Edit Fields').item.json.direc}}';print(pyautogui.locateCenterOnScreen(r'C:\\Users\\Uusario Nuevo Prueba\\.n8n\\Screenshots\\ControlDocumentario\\DropDown-Estados-CD.png', grayscale=True, confidence=0.6))\""
              },
              "id": "c9afd7fa-7ede-412e-9c4e-ecba365a4ae2",
              "name": "Locate On Screen23",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1740,
                1520
              ],
              "retryOnFail": true,
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "command": "=python -c \"import pyautogui; from datetime import date; import datetime; import time; time.sleep(3);pyautogui.keyDown('ctrl');pyautogui.typewrite(['w']);pyautogui.keyUp('ctrl')\""
              },
              "id": "0c455c5e-0929-46a4-a935-bcf7c8ba2c48",
              "name": "CloseTab",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                1260,
                2400
              ]
            },
            {
              "parameters": {
                "inputSource": "passthrough"
              },
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "typeVersion": 1.1,
              "position": [
                -460,
                360
              ],
              "id": "fc83ee7d-367a-4dc3-9836-92defcaa8a4e",
              "name": "When Executed by Another Workflow"
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"errores\": []\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -240,
                200
              ],
              "id": "bf51821d-9bf2-4933-96af-653df6a21962",
              "name": "Edit Fields1"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8964488f-7d1c-4bdf-b12a-a03131220e9e",
                      "name": "direc",
                      "value": "C:/Users/Uusario Nuevo Prueba",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -100,
                200
              ],
              "id": "3c9d95b5-5846-48ee-954a-49e97d75ad72",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "field": "minutes",
                      "minutesInterval": 3
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                -460,
                60
              ],
              "id": "ce7a397c-396b-4e62-adab-53e21913439b",
              "name": "Schedule Trigger"
            },
            {
              "parameters": {
                "command": "=powershell -Command \"$profilePath = 'C:\\Usuarios\\UusarioNuevoPrueba\\.n8n\\chromeprofile'; Get-CimInstance Win32_Process -Filter \\\"Name = 'chrome.exe'\\\" | Where-Object { $_.CommandLine -like \\\"*--user-data-dir=$profilePath*\\\" } | ForEach-Object { Stop-Process -Id $_.ProcessId -Force }; Start-Sleep -Seconds 2; Start-Process 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' -ArgumentList '--remote-debugging-port=1313', \\\"--user-data-dir=$profilePath\\\", 'https://controldocumentario.com/Login.aspx'; Start-Sleep -Seconds 5; $chromeProcess = Get-NetTCPConnection -LocalPort 1313; if ($chromeProcess) { Write-Host 'Chrome abierto correctamente'; exit 0 } else { Write-Host 'Error: No se pudo abrir Chrome o el puerto está ocupado.'; exit 1 }\""
              },
              "id": "0cba158a-b544-497f-8156-953ec32a94bd",
              "name": "Close&Open",
              "type": "n8n-nodes-base.executeCommand",
              "typeVersion": 1,
              "position": [
                320,
                200
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Documentos"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                2980,
                4720
              ],
              "id": "7576cee6-579e-4124-a104-690fb25a7308",
              "name": "Supabase3",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $json.Texto }},{{$('OCR Word2').item.json.nombreAsignado}}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                3140,
                4720
              ],
              "id": "1fa08e13-8118-49d8-aee6-ceb8ba8d9dc9",
              "name": "Supabase7",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Documentos"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1400,
                2400
              ],
              "id": "f5de6497-ac0c-436b-bc25-0eb32afc24fb",
              "name": "Supabase8",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $json.Texto }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                1540,
                2400
              ],
              "id": "87511cb3-f498-43e4-9d88-4b44cb9d5272",
              "name": "Supabase9",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Documentos"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "=."
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                40,
                200
              ],
              "id": "71534cb9-8036-4186-932e-94b388de4d19",
              "name": "Supabase10",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Este nodo procesa un array de items\nreturn items.map(item => {\n  const texto = item.json.Texto;\n\n  // Verifica si el texto solo contiene puntos, comas o espacios\n  const soloPuntosYComas = /^\\s*[.,]+\\s*$/.test(texto);\n\n  // Si cumple la condición, reemplaza con 0\n  item.json.Texto = soloPuntosYComas ? 0 : texto;\n\n  return item;\n});\n"
              },
              "id": "ea01dd0e-f5a6-453e-897c-d7e04672893e",
              "name": "Coordinate Parser31",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1960,
                2420
              ],
              "onError": "continueRegularOutput"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot": {
              "main": [
                [
                  {
                    "node": "Locate On Screen",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser4": {
              "main": [
                [
                  {
                    "node": "Click",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click": {
              "main": [
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Close&Open",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot1": {
              "main": [
                [
                  {
                    "node": "Locate On Screen1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen1": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser": {
              "main": [
                [
                  {
                    "node": "Click1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click1": {
              "main": [
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot2": {
              "main": [
                [
                  {
                    "node": "Locate On Screen2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen2": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser1": {
              "main": [
                [
                  {
                    "node": "Click2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot3": {
              "main": [
                [
                  {
                    "node": "Locate On Screen3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen3": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser2": {
              "main": [
                [
                  {
                    "node": "Click3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click3": {
              "main": [
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot4": {
              "main": [
                [
                  {
                    "node": "Locate On Screen4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen4": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser3": {
              "main": [
                [
                  {
                    "node": "Click4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click4": {
              "main": [
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen6": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser6": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click6": {
              "main": [
                [
                  {
                    "node": "Locate On Screen23",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot9": {
              "main": [
                [
                  {
                    "node": "Locate On Screen10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen10": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser9": {
              "main": [
                [
                  {
                    "node": "Click 11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click8": {
              "main": [
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen11": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser10": {
              "main": [
                [
                  {
                    "node": "Click8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen13": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser11": {
              "main": [
                [
                  {
                    "node": "Click9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click9": {
              "main": [
                [
                  {
                    "node": "Save Screenshot9",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click 11": {
              "main": [
                [
                  {
                    "node": "Locate On Screen11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot10": {
              "main": [
                [
                  {
                    "node": "Locate On Screen9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser12": {
              "main": [
                [
                  {
                    "node": "Click11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click11": {
              "main": [
                [
                  {
                    "node": "Edit Fields2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenBrowserCmd": {
              "main": [
                []
              ]
            },
            "Save Screenshot13": {
              "main": [
                [
                  {
                    "node": "Locate On Screen14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen14": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser14": {
              "main": [
                [
                  {
                    "node": "Click13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click13": {
              "main": [
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Local OCR Tesseract": {
              "main": [
                [
                  {
                    "node": "OCR Word2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot17": {
              "main": [
                [
                  {
                    "node": "Local OCR Tesseract",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OCR Word2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot14": {
              "main": [
                [
                  {
                    "node": "Locate On Screen15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot33": {
              "main": [
                [
                  {
                    "node": "Locate On Screen24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen24": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser40",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser40": {
              "main": [
                [
                  {
                    "node": "Switch",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser15": {
              "main": [
                [
                  {
                    "node": "Click14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen15": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click14": {
              "main": [
                [
                  {
                    "node": "Save Screenshot33",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot15": {
              "main": [
                [
                  {
                    "node": "Locate On Screen16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen16": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser16",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser16": {
              "main": [
                [
                  {
                    "node": "Click15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click15": {
              "main": [
                [
                  {
                    "node": "Save Screenshot14",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot15",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot16": {
              "main": [
                [
                  {
                    "node": "Locate On Screen17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen17": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser17": {
              "main": [
                [
                  {
                    "node": "Click16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click16": {
              "main": [
                [
                  {
                    "node": "Supabase4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot19": {
              "main": [
                [
                  {
                    "node": "Locate On Screen18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen18": {
              "main": [
                [
                  {
                    "node": "Click17",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items3": {
              "main": [
                [
                  {
                    "node": "CloseTab",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot16",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields2": {
              "main": [
                [
                  {
                    "node": "Split Out",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Split Out": {
              "main": [
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot20": {
              "main": [
                [
                  {
                    "node": "Locate On Screen19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen19": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser19": {
              "main": [
                [
                  {
                    "node": "Click18",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click18": {
              "main": [
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot21": {
              "main": [
                [
                  {
                    "node": "Locate On Screen20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen20": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser20": {
              "main": [
                [
                  {
                    "node": "Click19",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot22": {
              "main": [
                [
                  {
                    "node": "Locate On Screen21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen21": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser21": {
              "main": [
                [
                  {
                    "node": "Click20",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click20": {
              "main": [
                [
                  {
                    "node": "Supabase3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click19": {
              "main": [
                [
                  {
                    "node": "Save Screenshot22",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot23": {
              "main": [
                [
                  {
                    "node": "Locate On Screen22",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen22": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser22",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser22": {
              "main": [
                [
                  {
                    "node": "Click21",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click21": {
              "main": [
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot23",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns2": {
              "main": [
                [
                  {
                    "node": "Save Screenshot17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click17": {
              "main": [
                [
                  {
                    "node": "Save Screenshot21",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Get Table8": {
              "main": [
                [
                  {
                    "node": "Divide html columns2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase1": {
              "main": [
                [
                  {
                    "node": "Supabase12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Table12": {
              "main": [
                [
                  {
                    "node": "Divide html columns7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase4": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Get Table12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Divide html columns7": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase12": {
              "main": [
                [
                  {
                    "node": "Get Table8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Supabase1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot5": {
              "main": [
                [
                  {
                    "node": "Locate On Screen5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen5": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser5": {
              "main": [
                [
                  {
                    "node": "Click5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click5": {
              "main": [
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot12": {
              "main": [
                [
                  {
                    "node": "Locate On Screen12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen12": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser13",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser13": {
              "main": [
                [
                  {
                    "node": "Click12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click12": {
              "main": [
                [
                  {
                    "node": "Save Screenshot4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot12",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch": {
              "main": [
                [
                  {
                    "node": "Ruta Poliza",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Mono y Pago",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Poliza": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Poliza",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Ruta Mono y Pago": {
              "main": [
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Ruta Mono y Pago",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot27": {
              "main": [
                [
                  {
                    "node": "Locate On Screen26",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen26": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser25": {
              "main": [
                [
                  {
                    "node": "Click30",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click30": {
              "main": [
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Save Screenshot28": {
              "main": [
                [
                  {
                    "node": "Locate On Screen27",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen27": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser26",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Click17",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser26": {
              "main": [
                [
                  {
                    "node": "Click31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click31": {
              "main": [
                [
                  {
                    "node": "Save Screenshot19",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot28",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Scroll": {
              "main": [
                [
                  {
                    "node": "Locate On Screen25",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Coordinate Parser24": {
              "main": [
                [
                  {
                    "node": "Click24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Click24": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Scroll",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen25": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser24",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Locate On Screen23": {
              "main": [
                [
                  {
                    "node": "If1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If1": {
              "main": [
                [
                  {
                    "node": "Click6",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Save Screenshot11",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields1": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Supabase10",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Close&Open": {
              "main": [
                [
                  {
                    "node": "Save Screenshot",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase3": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase7": {
              "main": [
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase8": {
              "main": [
                [
                  {
                    "node": "Supabase9",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "CloseTab": {
              "main": [
                [
                  {
                    "node": "Supabase8",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase10": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase9": {
              "main": [
                [
                  {
                    "node": "Coordinate Parser31",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "timezone": "America/Argentina/Buenos_Aires",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "4026b78a-fe2b-45f3-8566-7ae01d4fb742",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-05-19T18:59:06.278Z",
          "updatedAt": "2025-05-19T18:59:50.000Z",
          "id": "vxbqVQ1r6XSan6po",
          "name": "My workflow 2",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                0,
                0
              ],
              "id": "a2f5af79-5858-4eb5-a5f6-f5792e2c7a13",
              "name": "When clicking ‘Test workflow’"
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "value": "DbwBS0zefv26xaJX",
                  "mode": "list",
                  "cachedResultName": "GenerarControlDocumentario"
                },
                "workflowInputs": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "query": "=cespedes esteban, inscripcion autonomo, 15\\ndonaire pablo ruben, inscripcion autonomo, 15\\ncunningham martin, inscripcion autonomo, 15\\ndelpino nicolas abel, inscripcion autonomo, 15\\nferreyra amilcar, inscripcion autonomo, 15\\nferreyra julian andres, inscripcion autonomo, 15\\nmarcelo gamalero, inscripcion autonomo, 15\\nmassa agustin, inscripcion autonomo, 15\\ncespedes esteban, pago poliza acc. personales, 17\\ndonaire pablo ruben, pago poliza acc. personales, 6\\ncunningham martin, pago poliza acc. personales, 14\\ndelpino nicolas abel, pago poliza acc. personales, 14\\nferreyra amilcar, pago poliza acc. personales, 14\\nferreyra julian andres, pago poliza acc. personales, 12\\nmarcelo gamalero, pago poliza acc. personales, 15\\nmassa agustin, pago poliza acc. personales, 17"
                  },
                  "matchingColumns": [
                    "query"
                  ],
                  "schema": [
                    {
                      "id": "query",
                      "displayName": "query",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "canBeUsedToMatch": true,
                      "type": "string",
                      "removed": false
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": true
                },
                "options": {}
              },
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.2,
              "position": [
                200,
                0
              ],
              "id": "465d28c7-6308-4e86-9aca-b8e50b7869b4",
              "name": "Execute Workflow"
            }
          ],
          "connections": {
            "When clicking ‘Test workflow’": {
              "main": [
                [
                  {
                    "node": "Execute Workflow",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "885bcbc1-60e3-4708-bc49-444cc08f935a",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-05-23T13:31:28.717Z",
          "updatedAt": "2025-07-08T18:48:34.000Z",
          "id": "zn4P4r19hy4V7BTs",
          "name": "N8N-BackUp-1",
          "active": true,
          "nodes": [
            {
              "parameters": {},
              "id": "d7f07922-0f01-4aaa-b510-be5297ec7106",
              "name": "On clicking 'execute'",
              "type": "n8n-nodes-base.manualTrigger",
              "position": [
                -380,
                0
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "642dd956-c362-4ea8-82ef-7a8b0619a5bb",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "position": [
                140,
                100
              ],
              "typeVersion": 3
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {}
                  ]
                }
              },
              "id": "37631421-a250-4afb-a285-a437d01184a2",
              "name": "Schedule Trigger",
              "type": "n8n-nodes-base.scheduleTrigger",
              "position": [
                -380,
                180
              ],
              "typeVersion": 1.2
            },
            {
              "parameters": {
                "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
                "height": 417,
                "width": 385,
                "color": 4
              },
              "id": "d5857cd2-f5da-40bd-892e-e9fbdd940fb5",
              "name": "Sticky Note1",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -860,
                -80
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "## Main workflow loop",
                "height": 416,
                "width": 1413,
                "color": 7
              },
              "id": "1be4bc08-a1fc-460b-9770-3e2fd4cf7759",
              "name": "Sticky Note2",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -440,
                -80
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "workflowId": "=sKItisoN4WjUR0bh",
                "mode": "each",
                "options": {}
              },
              "id": "d75c2ac5-dbd8-4351-81f7-c985ec3d82a1",
              "name": "Execute Workflow",
              "type": "n8n-nodes-base.executeWorkflow",
              "position": [
                360,
                120
              ],
              "typeVersion": 1,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "={{ $('Supabase6').item.json.Texto }},{{ $json.message }}\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                820,
                140
              ],
              "id": "69074fc7-4c74-4c6c-98cd-1c8e50bdb824",
              "name": "Supabase5",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bd154629-c902-4d90-9b05-b13782b4f671",
                      "name": "message",
                      "value": "=FailBackUp: {{ $('Loop Over Items').item.json.id }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                680,
                140
              ],
              "id": "c0dfeb52-a175-45b1-a12c-9f446062cfee",
              "name": "Edit Fields3"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                540,
                140
              ],
              "id": "e6b4fd9a-e1fe-423e-a40b-13763d57c768",
              "name": "Supabase6",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "sendTo": "=simonteralv2@gmail.com",
                "subject": "BackUp-Workflows-N8N",
                "emailType": "text",
                "message": "= Backup has completed - workflows have been processed.✅\nErrores: {{ $json.Texto }}",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                680,
                -40
              ],
              "id": "93f88180-7ba0-4f9b-ab78-875e088544f4",
              "name": "Mensaje",
              "webhookId": "6bc2c596-6b0a-4077-9a64-a43f3b27b4d7",
              "credentials": {
                "gmailOAuth2": {
                  "id": "NWtQUZYbGghGDkN1",
                  "name": "Gmail account"
                }
              }
            },
            {
              "parameters": {
                "keep": "lastItems"
              },
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                360,
                -40
              ],
              "id": "99016d8c-cfff-4eda-800e-b4b7c934716d",
              "name": "Limit"
            },
            {
              "parameters": {
                "operation": "get",
                "tableId": "Var-Control-Documentario",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "keyValue": "Errores"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                540,
                -40
              ],
              "id": "086b8cf9-17d4-4969-96eb-86fcc4c4e8c7",
              "name": "Supabase",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "operation": "update",
                "tableId": "Var-Control-Documentario",
                "matchType": "allFilters",
                "filters": {
                  "conditions": [
                    {
                      "keyName": "variable",
                      "condition": "eq",
                      "keyValue": "Errores"
                    }
                  ]
                },
                "fieldsUi": {
                  "fieldValues": [
                    {
                      "fieldId": "Texto",
                      "fieldValue": "=\n\n"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.supabase",
              "typeVersion": 1,
              "position": [
                -200,
                100
              ],
              "id": "1b1ffdc3-c8be-41c7-bc64-57386ec02c70",
              "name": "Supabase7",
              "credentials": {
                "supabaseApi": {
                  "id": "ZvkTz1mTFoOcPh6G",
                  "name": "Supabase account"
                }
              }
            },
            {
              "parameters": {
                "filters": {},
                "requestOptions": {}
              },
              "id": "679a4e27-2935-4695-94d3-895f4d82bc33",
              "name": "n8n1",
              "type": "n8n-nodes-base.n8n",
              "position": [
                -60,
                100
              ],
              "typeVersion": 1,
              "credentials": {
                "n8nApi": {
                  "id": "9InbP3eA3I6HvwbC",
                  "name": "n8n account 2"
                }
              }
            }
          ],
          "connections": {
            "On clicking 'execute'": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Limit",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Workflow",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "Supabase7",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Workflow": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Supabase6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields3": {
              "main": [
                [
                  {
                    "node": "Supabase5",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase6": {
              "main": [
                [
                  {
                    "node": "Edit Fields3",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase5": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit": {
              "main": [
                [
                  {
                    "node": "Supabase",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase": {
              "main": [
                [
                  {
                    "node": "Mensaje",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Supabase7": {
              "main": [
                [
                  {
                    "node": "n8n1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "n8n1": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "38a24f50-47ad-4daf-8330-d839d6fcc684",
          "triggerCount": 1,
          "tags": []
        }
      }
    ]
  },
  "repo_name": "n8n-backup",
  "repo_owner": "SimonTeralv",
  "repo_path": "",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-08-20T17:31:17.000Z",
  "versionId": "f615f6b5-7e9e-4097-9fd6-2e385b911714"
}